concrete LawEng of Law = {

lincat A = Str ;
lincat AP = Str ;
lincat CN = Str ;
lincat Comp = Str ;
lincat Conj = Str ;
lincat ConjCN = Str ;
lincat ConjCop = Str ;
lincat ConjItem = Str ;
lincat ConjN2 = Str ;
lincat ConjNP = Str ;
lincat ConjPP = Str ;
lincat ConjPPart = Str ;
lincat ConjVP2 = Str ;
lincat Cop = Str ;
lincat Date = Str ;
lincat Item = Str ;
lincat Line = Str ;
lincat Loc = Str ;
lincat N2 = Str ;
lincat NP = Str ;
lincat Num = Str ;
lincat PP = Str ;
lincat PPart = Str ;
lincat QCN = Str ;
lincat RS = Str ;
lincat Ref = Str ;
lincat S = Str ;
lincat Time = Str ;
lincat Title = Str ;
lincat V = Str ;
lincat V2 = Str ;
lincat VP = Str ;
lincat VP2 = Str ;

lin AP_affected_by_NP np = "affected" ++ "by" ++ np ;
lin AP_affecting_NP np = "affecting" ++ np ;
lin AP_applicable_to_NP np = "applicable" ++ "to" ++ np ;
lin AP_in_relation_to_NP np = "in" ++ "relation" ++ "to" ++ np ;
lin AP_mentioned_in_section_Ref ref = "mentioned" ++ "in" ++ "section" ++ ref ;
lin AP_mentioned_in_subsection_ConjItem conjitem = "mentioned" ++ "in" ++ "subsection" ++ conjitem ;
lin AP_on_behalf_of_and_for_the_purposes_of_NP np = "on" ++ "behalf" ++ "of" ++ "and" ++ "for" ++ "the" ++ "purposes" ++ "of" ++ np ;
lin AP_processing_NP np = "processing" ++ np ;
lin AP_under_NP np = "under" ++ np ;
lin AP_under_subsection_ConjItem conjitem = "under" ++ "subsection" ++ conjitem ;
lin AP_under_subsection_Item item = "under" ++ "subsection" ++ item ;
lin A_affected  = "affected" ;
lin A_notifiable  = "notifiable" ;
lin A_other  = "other" ;
lin A_prescribed  = "prescribed" ;
lin A_technological  = "technological" ;
lin A_written  = "written" ;
lin CN_A_CN a cn = a ++ cn ;
lin 'CN_CN_(_other_than_NP_)' cn np = cn ++ "(" ++ "other" ++ "than" ++ np ++ ")" ;
lin CN_CN_AP cn ap = cn ++ ap ;
lin CN_CN_ConjPP cn conjpp = cn ++ conjpp ;
lin CN_CN_RS cn rs = cn ++ rs ;
lin CN_Commission  = "Commission" ;
lin 'CN_ConjCN_relating_to_NP' conjcn np = conjcn ++ "relating" ++ "to" ++ np ;
lin CN_N2_of_NP n2 np = n2 ++ "of" ++ np ;
lin CN_action  = "action" ;
lin CN_assessment  = "assessment" ;
lin CN_assessment_of_whether_S s = "assessment" ++ "of" ++ "whether" ++ s ;
lin CN_class_of_personal_data  = "class" ++ "of" ++ "personal" ++ "data" ;
lin CN_contract  = "contract" ;
lin CN_data_breach  = "data" ++ "breach" ;
lin CN_data_intermediary  = "data" ++ "intermediary" ;
lin CN_device  = "device" ;
lin CN_duty  = "duty" ;
lin CN_individual  = "individual" ;
lin CN_information  = "information" ;
lin CN_law  = "law" ;
lin CN_law_enforcement_agency  = "law" ++ "enforcement" ++ "agency" ;
lin CN_measure  = "measure" ;
lin CN_notification  = "notification" ;
lin CN_obligation  = "obligation" ;
lin CN_obligation_of_NP_to_VP np vp = "obligation" ++ "of" ++ np ++ "to" ++ vp ;
lin CN_occurrence_of_NP np = "occurrence" ++ "of" ++ np ;
lin CN_organisation  = "organisation" ;
lin CN_person  = "person" ;
lin CN_personal_data  = "personal" ++ "data" ;
lin CN_professional_conduct  = "professional" ++ "conduct" ;
lin CN_public_agency  = "public" ++ "agency" ;
lin CN_purpose  = "purpose" ;
lin CN_requirement_to_VP vp = "requirement" ++ "to" ++ vp ;
lin CN_requirements  = "requirements" ;
lin CN_restriction_on_NP np = "restriction" ++ "on" ++ np ;
lin CN_rule_of_NP np = "rule" ++ "of" ++ np ;
lin CN_secrecy  = "secrecy" ;
lin CN_storage_medium  = "storage" ++ "medium" ;
lin Comp_of_a_significant_scale  = "of" ++ "a" ++ "significant" ++ "scale" ;
lin ConjCN_CN_Conj_CN cn conj cn2 = cn ++ conj ++ cn2 ;
lin 'ConjCop_Cop_,_Conj_Cop_,' cop1 conj cop2 = cop1 ++ "," ++ conj ++ cop2 ++ "," ;
lin 'ConjItem_Item_,_ConjItem' item conjitem = item ++ "," ++ conjitem ;
lin ConjItem_Item_Conj_Item item conj item2 = item ++ conj ++ item2 ;
lin 'ConjN2_N2_,_ConjN2' n2 conjn2 = n2 ++ "," ++ conjn2 ;
lin ConjN2_N2_Conj_N2 n2 conj n22 = n2 ++ conj ++ n22 ;
lin ConjNP_NP_Conj_NP np conj np2 = np ++ conj ++ np2 ;
lin ConjPP_PP_Conj_PP pp conj pp2 = pp ++ conj ++ pp2 ;
lin ConjPPart_PPart_Conj_PPart ppart conj ppart2 = ppart ++ conj ++ ppart2 ;
lin 'ConjVP2_VP2_,_Conj_VP2_,' vp21 conj vp22 = vp21 ++ "," ++ conj ++ vp22 ++ "," ;
lin Conj_and  = "and" ;
lin Conj_or  = "or" ;
lin Cop_is  = "is" ;
lin Cop_is_likely_to_be  = "is" ++ "likely" ++ "to" ++ "be" ;
lin Date_1_February_2021  = "1" ++ "February" ++ "2021" ;
lin 'Item_(1)'  = "(1)" ;
lin 'Item_(2)'  = "(2)" ;
lin 'Item_(3)'  = "(3)" ;
lin 'Item_(3)(b)'  = "(3)(b)" ;
lin 'Item_(4)'  = "(4)" ;
lin 'Item_(5)'  = "(5)" ;
lin 'Item_(6)'  = "(6)" ;
lin 'Item_(7)'  = "(7)" ;
lin 'Item_(8)'  = "(8)" ;
lin 'Item_(9)'  = "(9)" ;
lin 'Item_(a)'  = "(a)" ;
lin 'Item_(b)'  = "(b)" ;
lin 'Line_Item_NP_.' item np = item ++ np ++ "." ;
lin 'Line_Item_NP_;_Conj' item np conj = item ++ np ++ ";" ++ conj ;
lin 'Line_Item_S_.' item s = item ++ s ++ "." ;
lin 'Line_Item_S_;_Conj' item s conj = item ++ s ++ ";" ++ conj ;
lin 'Line_Item_S_if_NP_—' item s np = item ++ s ++ "if" ++ np ++ "—" ;
lin 'Line_Item_Time_,_VP_;_Conj' item time vp conj = item ++ time ++ "," ++ vp ++ ";" ++ conj ;
lin 'Line_Item_VP_,' item vp = item ++ vp ++ "," ;
lin 'Line_Item_VP_.' item vp = item ++ vp ++ "." ;
lin 'Line_Item_VP_;_Conj' item vp conj = item ++ vp ++ ";" ++ conj ;
lin 'Line_Item_an_CN_is_not_,_PP_,_to_be_regarded_as_NP_of_—' item cn pp np = item ++ "an" ++ cn ++ "is" ++ "not" ++ "," ++ pp ++ "," ++ "to" ++ "be" ++ "regarded" ++ "as" ++ np ++ "of" ++ "—" ;
lin 'Line_Item_an_CN_must_not_VP_in_accordance_with_subsection_Item_if_—' item cn vp item2 = item ++ "an" ++ cn ++ "must" ++ "not" ++ vp ++ "in" ++ "accordance" ++ "with" ++ "subsection" ++ item2 ++ "if" ++ "—" ;
lin 'Line_Item_any_CN_.' item cn = item ++ "any" ++ cn ++ "." ;
lin 'Line_Item_any_CN_;_Conj' item cn conj = item ++ "any" ++ cn ++ ";" ++ conj ;
lin 'Line_Item_despite_subsections_ConjItem_,_a_CN_is_deemed_not_to_be_a_CN_.' item conjitem cn cn2 = item ++ "despite" ++ "subsections" ++ conjitem ++ "," ++ "a" ++ cn ++ "is" ++ "deemed" ++ "not" ++ "to" ++ "be" ++ "a" ++ cn2 ++ "." ;
lin 'Line_Item_if_S_;_Conj' item s conj = item ++ "if" ++ s ++ ";" ++ conj ;
lin Line_Item_if_S_Conj item s conj = item ++ "if" ++ s ++ conj ;
lin 'Line_Item_in_other_prescribed_circumstances_.' item = item ++ "in" ++ "other" ++ "prescribed" ++ "circumstances" ++ "." ;
lin 'Line_Item_other_prescribed_circumstances_.' item = item ++ "other" ++ "prescribed" ++ "circumstances" ++ "." ;
lin 'Line_Item_subject_to_subsection_Item_,_where_S_,_S_.' item item2 s s2 = item ++ "subject" ++ "to" ++ "subsection" ++ item2 ++ "," ++ "where" ++ s ++ "," ++ s2 ++ "." ;
lin 'Line_Item_subject_to_subsections_ConjItem_,_Time_,_S_.' item conjitem time s = item ++ "subject" ++ "to" ++ "subsections" ++ conjitem ++ "," ++ time ++ "," ++ s ++ "." ;
lin 'Line_Item_subsections_ConjItem_VP_.' item conjitem vp = item ++ "subsections" ++ conjitem ++ vp ++ "." ;
lin 'Line_Item_where_a_CN_VP_—' item cn vp = item ++ "where" ++ "a" ++ cn ++ vp ++ "—" ;
lin 'Line_Item_without_limiting_subsection_Ref_,_a_CN_is_deemed_to_VP_—' item ref cn vp = item ++ "without" ++ "limiting" ++ "subsection" ++ ref ++ "," ++ "a" ++ cn ++ "is" ++ "deemed" ++ "to" ++ vp ++ "—" ;
lin 'Line_QCN_,_in_relation_to_NP_,_means_—' qcn np = qcn ++ "," ++ "in" ++ "relation" ++ "to" ++ np ++ "," ++ "means" ++ "—" ;
lin 'Line_QCN_means_any_CN_;' qcn cn = qcn ++ "means" ++ "any" ++ cn ++ ";" ;
lin Line_Ref ref = ref ;
lin 'Line_Ref_._Loc_,_unless_S_—' ref loc s = ref ++ "." ++ loc ++ "," ++ "unless" ++ s ++ "—" ;
lin 'Line_Ref_._where_an_CN_—' ref cn = ref ++ "." ++ "where" ++ "an" ++ cn ++ "—" ;
lin 'Line_Ref_._—_Item_Where_an_CN_VP_.' ref item cn vp = ref ++ "." ++ "—" ++ item ++ "Where" ++ "an" ++ cn ++ vp ++ "." ;
lin 'Line_Ref_._—_Item_a_CN_is_a_CN_if_NP_—' ref item cn cn2 np = ref ++ "." ++ "—" ++ item ++ "a" ++ cn ++ "is" ++ "a" ++ cn2 ++ "if" ++ np ++ "—" ;
lin 'Line_Ref_._—_Item_this_section_applies_to_a_CN_.' ref item cn = ref ++ "." ++ "—" ++ item ++ "this" ++ "section" ++ "applies" ++ "to" ++ "a" ++ cn ++ "." ;
lin 'Line_Ref_._—_Item_where_S_,_S_.' ref item s s2 = ref ++ "." ++ "—" ++ item ++ "where" ++ s ++ "," ++ s2 ++ "." ;
lin 'Line_S_.' s = s ++ "." ;
lin Line_Title title = title ;
lin 'Line_subsections_ConjItem_VP_.' conjitem vp = "subsections" ++ conjitem ++ vp ++ "." ;
lin Loc_in_this_Part  = "in" ++ "this" ++ "Part" ;
lin N2_access  = "access" ;
lin N2_collection  = "collection" ;
lin N2_copying  = "copying" ;
lin N2_disclosure  = "disclosure" ;
lin N2_disposal  = "disposal" ;
lin N2_modification  = "modification" ;
lin N2_use  = "use" ;
lin NP_CN cn = cn ;
lin 'NP_NP_(_including_NP_)' np np2 = np ++ "(" ++ "including" ++ np2 ++ ")" ;
lin 'NP_NP_,_Conj_NP_,_PP' np conj np2 pp = np ++ "," ++ conj ++ np2 ++ "," ++ pp ;
lin NP_a_CN cn = "a" ++ cn ;
lin NP_all_the_CN_RS cn rs = "all" ++ "the" ++ cn ++ rs ;
lin NP_an_CN cn = "an" ++ cn ;
lin NP_another_CN cn = "another" ++ cn ;
lin NP_any_CN cn = "any" ++ cn ;
lin NP_any_ConjCN conjcn = "any" ++ conjcn ;
lin NP_being_in_breach  = "being" ++ "in" ++ "breach" ;
lin NP_each_CN cn = "each" ++ cn ;
lin NP_it  = "it" ;
lin NP_notifying_ConjNP conjnp = "notifying" ++ conjnp ;
lin NP_significant_harm_to_NP np = "significant" ++ "harm" ++ "to" ++ np ;
lin NP_subsection_Item item = "subsection" ++ item ;
lin NP_that_CN cn = "that" ++ cn ;
lin NP_the_CN cn = "the" ++ cn ;
lin NP_the_loss_of_any_ConjCN_RS conjcn rs = "the" ++ "loss" ++ "of" ++ "any" ++ conjcn ++ rs ;
lin NP_the_unauthorised_ConjN2_of_NP conjn2 np = "the" ++ "unauthorised" ++ conjn2 ++ "of" ++ np ;
lin NP_the_unauthorised_ConjN2_of_NP_only_within_NP conjn2 np np2 = "the" ++ "unauthorised" ++ conjn2 ++ "of" ++ np ++ "only" ++ "within" ++ np2 ;
lin NP_this_CN cn = "this" ++ cn ;
lin Num_3  = "3" ;
lin 'PP_PP_,_but_in_any_case_PP' pp pp2 = pp ++ "," ++ "but" ++ "in" ++ "any" ++ "case" ++ pp2 ;
lin PP_as_soon_as_is_practicable  = "as" ++ "soon" ++ "as" ++ "is" ++ "practicable" ;
lin PP_as_to_ConjNP conjnp = "as" ++ "to" ++ conjnp ;
lin PP_by_reason_only_of_NP np = "by" ++ "reason" ++ "only" ++ "of" ++ np ;
lin PP_in_a_reasonable_and_expeditious_manner  = "in" ++ "a" ++ "reasonable" ++ "and" ++ "expeditious" ++ "manner" ;
lin PP_in_accordance_with_NP np = "in" ++ "accordance" ++ "with" ++ np ;
lin PP_in_accordance_with_section_Ref ref = "in" ++ "accordance" ++ "with" ++ "section" ++ ref ;
lin PP_in_any_manner_that_is_reasonable_in_the_circumstances  = "in" ++ "any" ++ "manner" ++ "that" ++ "is" ++ "reasonable" ++ "in" ++ "the" ++ "circumstances" ;
lin PP_in_its_possession  = "in" ++ "its" ++ "possession" ;
lin PP_in_relation_to_NP np = "in" ++ "relation" ++ "to" ++ np ;
lin PP_no_later_than_Num_calendar_days_after_the_day_S num s = "no" ++ "later" ++ "than" ++ num ++ "calendar" ++ "days" ++ "after" ++ "the" ++ "day" ++ s ;
lin PP_on_behalf_of_and_for_the_purposes_of_NP np = "on" ++ "behalf" ++ "of" ++ "and" ++ "for" ++ "the" ++ "purposes" ++ "of" ++ np ;
lin PP_on_the_written_application_of_NP np = "on" ++ "the" ++ "written" ++ "application" ++ "of" ++ np ;
lin PP_prior_to_the_occurrence_of_NP np = "prior" ++ "to" ++ "the" ++ "occurrence" ++ "of" ++ np ;
lin PP_relating_to_NP np = "relating" ++ "to" ++ np ;
lin PP_subject_to_any_conditions_that_the_Commission_thinks_fit  = "subject" ++ "to" ++ "any" ++ "conditions" ++ "that" ++ "the" ++ "Commission" ++ "thinks" ++ "fit" ;
lin 'PP_to_the_best_of_the_knowledge_and_belief_of_NP_at_the_time_NP_notifies_ConjNP_(_as_the_case_may_be_)' np np2 conjnp = "to" ++ "the" ++ "best" ++ "of" ++ "the" ++ "knowledge" ++ "and" ++ "belief" ++ "of" ++ np ++ "at" ++ "the" ++ "time" ++ np2 ++ "notifies" ++ conjnp ++ "(" ++ "as" ++ "the" ++ "case" ++ "may" ++ "be" ++ ")" ;
lin PP_under_its_control  = "under" ++ "its" ++ "control" ;
lin PP_upon_notification_by_NP np = "upon" ++ "notification" ++ "by" ++ np ;
lin PP_without_undue_delay  = "without" ++ "undue" ++ "delay" ;
lin PPart_made_in_the_form  = "made" ++ "in" ++ "the" ++ "form" ;
lin PPart_submitted_in_the_manner_required_by_the_Commission  = "submitted" ++ "in" ++ "the" ++ "manner" ++ "required" ++ "by" ++ "the" ++ "Commission" ;
lin 'QCN_“affected_individual”'  = "“affected" ++ "individual”" ;
lin 'QCN_“data_breach”'  = "“data" ++ "breach”" ;
lin RS_on_which_S s = "on" ++ "which" ++ s ;
lin RS_that_NP_VP np vp = "that" ++ np ++ vp ;
lin RS_that_VP vp = "that" ++ vp ;
lin RS_to_whom_NP_VP np vp = "to" ++ "whom" ++ np ++ vp ;
lin RS_where_S s = "where" ++ s ;
lin 'Ref_(1)(a)'  = "(1)(a)" ;
lin 'Ref_(1)(b)'  = "(1)(b)" ;
lin Ref_26A  = "26A" ;
lin Ref_26B  = "26B" ;
lin 'Ref_26B(1)(a)'  = "26B(1)(a)" ;
lin Ref_26C  = "26C" ;
lin Ref_26D  = "26D" ;
lin Ref_26E  = "26E" ;
lin 'Ref_[40/2020]'  = "[40/2020]" ;
lin S_NP_VP np vp = np ++ vp ;
lin S_NP_is_in_relation_to_NP np np2 = np ++ "is" ++ "in" ++ "relation" ++ "to" ++ np2 ;
lin S_NP_is_likely_to_occur np = np ++ "is" ++ "likely" ++ "to" ++ "occur" ;
lin S_personal_data_is_stored_in_circumstances_RS rs = "personal" ++ "data" ++ "is" ++ "stored" ++ "in" ++ "circumstances" ++ rs ;
lin S_the_context_otherwise_requires  = "the" ++ "context" ++ "otherwise" ++ "requires" ;
lin 'S_the_data_breach_affects_not_fewer_than_the_prescribed_number_of_affected_individuals_;'  = "the" ++ "data" ++ "breach" ++ "affects" ++ "not" ++ "fewer" ++ "than" ++ "the" ++ "prescribed" ++ "number" ++ "of" ++ "affected" ++ "individuals" ++ ";" ;
lin Time_on_or_after_assessing_that_S s = "on" ++ "or" ++ "after" ++ "assessing" ++ "that" ++ s ;
lin Time_on_or_after_notifying_the_Commission_under_subsection_Item item = "on" ++ "or" ++ "after" ++ "notifying" ++ "the" ++ "Commission" ++ "under" ++ "subsection" ++ item ;
lin Title_Duty_to_conduct_assessment_of_data_breach  = "Duty" ++ "to" ++ "conduct" ++ "assessment" ++ "of" ++ "data" ++ "breach" ;
lin Title_Duty_to_notify_occurrence_of_notifiable_data_breach  = "Duty" ++ "to" ++ "notify" ++ "occurrence" ++ "of" ++ "notifiable" ++ "data" ++ "breach" ;
lin Title_Interpretation_of_this_Part  = "Interpretation" ++ "of" ++ "this" ++ "Part" ;
lin Title_NOTIFICATION_OF_DATA_BREACHES  = "NOTIFICATION" ++ "OF" ++ "DATA" ++ "BREACHES" ;
lin Title_Notifiable_data_breaches  = "Notifiable" ++ "data" ++ "breaches" ;
lin Title_PART_6A  = "PART" ++ "6A" ;
lin Title_obligations_of_data_intermediary_of_public_agency  = "obligations" ++ "of" ++ "data" ++ "intermediary" ++ "of" ++ "public" ++ "agency" ;
lin V2_conduct  = "conduct" ;
lin V2_contain  = "contain" ;
lin VP2_is_likely_to_result_in  = "is" ++ "likely" ++ "to" ++ "result" ++ "in" ;
lin VP2_results_in  = "results" ++ "in" ;
lin VP_ConjCop_Comp conjcop comp = conjcop ++ comp ;
lin VP_ConjVP2_NP conjvp2 np = conjvp2 ++ np ;
lin 'VP_V2_,_PP_,_NP' v2 pp np = v2 ++ "," ++ pp ++ "," ++ np ;
lin 'VP_VP_,_Conj_to_VP' vp conj vp2 = vp ++ "," ++ conj ++ "to" ++ vp2 ;
lin VP_VP_PP vp pp = vp ++ pp ;
lin VP_apply_concurrently_with_NP np = "apply" ++ "concurrently" ++ "with" ++ np ;
lin 'VP_assesses_,_PP_,_that_S' pp s = "assesses" ++ "," ++ pp ++ "," ++ "that" ++ s ;
lin VP_be_ConjPPart conjppart = "be" ++ conjppart ;
lin VP_be_of_a_significant_scale  = "be" ++ "of" ++ "a" ++ "significant" ++ "scale" ;
lin VP_believe_that_S s = "believe" ++ "that" ++ s ;
lin VP_carry_out_NP np = "carry" ++ "out" ++ np ;
lin VP_conduct_NP np = "conduct" ++ np ;
lin VP_does_not_apply_to_NP np = "does" ++ "not" ++ "apply" ++ "to" ++ np ;
lin 'VP_had_implemented_,_PP_,_NP' pp np = "had" ++ "implemented" ++ "," ++ pp ++ "," ++ np ;
lin VP_has_occurred  = "has" ++ "occurred" ;
lin VP_has_reason_to_VP vp = "has" ++ "reason" ++ "to" ++ vp ;
lin VP_is_a_CN cn = "is" ++ "a" ++ cn ;
lin VP_is_prescribed_for_NP np = "is" ++ "prescribed" ++ "for" ++ np ;
lin VP_is_processing_PP pp = "is" ++ "processing" ++ pp ;
lin VP_makes_NP np = "makes" ++ np ;
lin 'VP_may_,_PP_,_VP' pp vp = "may" ++ "," ++ pp ++ "," ++ vp ;
lin 'VP_must_,_PP_,_VP' pp vp = "must" ++ "," ++ pp ++ "," ++ vp ;
lin VP_must_VP vp = "must" ++ vp ;
lin VP_must_also_VP vp = "must" ++ "also" ++ vp ;
lin VP_notify_NP np = "notify" ++ np ;
lin VP_notify_NP_of_NP np np2 = "notify" ++ np ++ "of" ++ np2 ;
lin VP_occurs_on_or_after_Date date = "occurs" ++ "on" ++ "or" ++ "after" ++ date ;
lin VP_provide_NP np = "provide" ++ np ;
lin VP_relates  = "relates" ;
lin VP_relates_to_NP np = "relates" ++ "to" ++ np ;
lin VP_renders_it_unlikely_that_S s = "renders" ++ "it" ++ "unlikely" ++ "that" ++ s ;
lin VP_result_in_significant_harm_to_NP np = "result" ++ "in" ++ "significant" ++ "harm" ++ "to" ++ np ;
lin VP_so_V v = "so" ++ v ;
lin 'VP_takes_NP_,_PP_,_RS' np pp rs = "takes" ++ np ++ "," ++ pp ++ "," ++ rs ;
lin VP_waive_NP np = "waive" ++ np ;
lin VP_will_result_in_significant_harm_to_NP np = "will" ++ "result" ++ "in" ++ "significant" ++ "harm" ++ "to" ++ np ;
lin V_directs  = "directs" ;
lin V_instructs  = "instructs" ;

}