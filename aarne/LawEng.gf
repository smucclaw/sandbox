concrete LawEng of Law = {

lincat A = Str ;
lincat A2 = Str ;
lincat AP = Str ;
lincat CN = Str ;
lincat Comp = Str ;
lincat Conj = Str ;
lincat ConjCN = Str ;
lincat ConjCop = Str ;
lincat ConjItem = Str ;
lincat ConjN2 = Str ;
lincat ConjNP = Str ;
lincat ConjPP = Str ;
lincat ConjPPart = Str ;
lincat ConjVP2 = Str ;
lincat Cop = Str ;
lincat Date = Str ;
lincat Item = Str ;
lincat LabLine = Str ;
lincat Line = Str ;
lincat N2 = Str ;
lincat NP = Str ;
lincat Num = Str ;
lincat PP = Str ;
lincat PPart = Str ;
lincat QCN = Str ;
lincat RS = Str ;
lincat Ref = Str ;
lincat S = Str ;
lincat SeqPP = Str ;
lincat Time = Str ;
lincat Title = Str ;
lincat V = Str ;
lincat V2 = Str ;
lincat VP = Str ;
lincat VP2 = Str ;

lin A_affected = "affected" ;
lin A_notifiable = "notifiable" ;
lin A_other = "other" ;
lin A_prescribed = "prescribed" ;
lin A_technological = "technological" ;
lin A_written = "written" ;

lin A2_affected_by = "affected" ++ "by" ;
lin A2_affecting = "affecting" ;
lin A2_applicable_to = "applicable" ++ "to" ;
lin A2_in_relation_to = "in" ++ "relation" ++ "to" ;
lin A2_mentioned_in = "mentioned" ++ "in" ;
lin A2_on_behalf_of_and_for_the_purposes_of = "on" ++ "behalf" ++ "of" ++ "and" ++ "for" ++ "the" ++ "purposes" ++ "of" ;
lin A2_other_than = "other" ++ "than" ;
lin A2_processing = "processing" ;
lin A2_under = "under" ;

lin AP_A2_NP a2 np = a2 ++ np ;

lin CN_A_CN a cn = a ++ cn ;
lin CN_CN__AP_ cn ap = cn ++ "(" ++ ap ++ ")" ;
lin CN_CN_AP cn ap = cn ++ ap ;
lin CN_CN_ConjPP cn conjpp = cn ++ conjpp ;
lin CN_CN_RS cn rs = cn ++ rs ;
lin CN_Commission = "Commission" ;
lin CN_ConjCN_relating_to_NP conjcn np = conjcn ++ "relating" ++ "to" ++ np ;
lin CN_N2_of_NP n2 np = n2 ++ "of" ++ np ;
lin CN_action = "action" ;
lin CN_assessment = "assessment" ;
lin CN_assessment_of_whether_S s = "assessment" ++ "of" ++ "whether" ++ s ;
lin CN_class_of_personal_data = "class" ++ "of" ++ "personal" ++ "data" ;
lin CN_contract = "contract" ;
lin CN_data_breach = "data" ++ "breach" ;
lin CN_data_intermediary = "data" ++ "intermediary" ;
lin CN_device = "device" ;
lin CN_duty = "duty" ;
lin CN_individual = "individual" ;
lin CN_individuals = "individuals" ;
lin CN_information = "information" ;
lin CN_law = "law" ;
lin CN_law_enforcement_agency = "law" ++ "enforcement" ++ "agency" ;
lin CN_measure = "measure" ;
lin CN_notification = "notification" ;
lin CN_number_of_CN cn = "number" ++ "of" ++ cn ;
lin CN_obligation = "obligation" ;
lin CN_obligation_of_NP_to_VP np vp = "obligation" ++ "of" ++ np ++ "to" ++ vp ;
lin CN_occurrence_of_NP np = "occurrence" ++ "of" ++ np ;
lin CN_organisation = "organisation" ;
lin CN_person = "person" ;
lin CN_personal_data = "personal" ++ "data" ;
lin CN_professional_conduct = "professional" ++ "conduct" ;
lin CN_public_agency = "public" ++ "agency" ;
lin CN_purpose = "purpose" ;
lin CN_requirement_to_VP vp = "requirement" ++ "to" ++ vp ;
lin CN_requirements = "requirements" ;
lin CN_restriction_on_NP np = "restriction" ++ "on" ++ np ;
lin CN_rule_of_NP np = "rule" ++ "of" ++ np ;
lin CN_secrecy = "secrecy" ;
lin CN_significant_harm_to_NP np = "significant" ++ "harm" ++ "to" ++ np ;
lin CN_storage_medium = "storage" ++ "medium" ;
lin Comp_of_a_significant_scale = "of" ++ "a" ++ "significant" ++ "scale" ;
lin ConjCN_CN_Conj_CN cn conj cn2 = cn ++ conj ++ cn2 ;
lin ConjCop_Cop__Conj_Cop_ cop1 conj cop2 = cop1 ++ "," ++ conj ++ cop2 ++ "," ;
lin ConjItem_Item__ConjItem item conjitem = item ++ "," ++ conjitem ;
lin ConjItem_Item_Conj_Item item conj item2 = item ++ conj ++ item2 ;
lin ConjN2_N2__ConjN2 n2 conjn2 = n2 ++ "," ++ conjn2 ;
lin ConjN2_N2_Conj_N2 n2 conj n22 = n2 ++ conj ++ n22 ;
lin ConjNP_NP_Conj_NP np conj np2 = np ++ conj ++ np2 ;
lin ConjPP_PP_Conj_PP pp conj pp2 = pp ++ conj ++ pp2 ;
lin ConjPPart_PPart_Conj_PPart ppart conj ppart2 = ppart ++ conj ++ ppart2 ;
lin ConjVP2_VP2__Conj_VP2_ vp21 conj vp22 = vp21 ++ "," ++ conj ++ vp22 ++ "," ;
lin Conj_and = "and" ;
lin Conj_or = "or" ;
lin Cop_is = "is" ;
lin Cop_is_likely_to_be = "is" ++ "likely" ++ "to" ++ "be" ;
lin Date_1_February_2021 = "1" ++ "February" ++ "2021" ;
lin Item_1 = "(1)" ;
lin Item_2 = "(2)" ;
lin Item_3 = "(3)" ;
lin Item_3b = "(3)(b)" ;
lin Item_4 = "(4)" ;
lin Item_5 = "(5)" ;
lin Item_6 = "(6)" ;
lin Item_7 = "(7)" ;
lin Item_8 = "(8)" ;
lin Item_9 = "(9)" ;
lin Item_a = "(a)" ;
lin Item_b = "(b)" ;

lin LabLine_Item_Line item line = item ++ line ;
lin LabLine_Line line = line ;
lin LabLine_Ref ref = ref ;
lin LabLine_Ref__Item_Line ref item line = ref ++ "." ++ "—" ++ item ++ line ;
lin LabLine_Ref_Line ref line = ref ++ "." ++ line ;
lin LabLine_Title title = title ;

lin Line_NP_ np = np ++ "." ;
lin Line_NP__Conj np conj = np ++ ";" ++ conj ;
lin Line_S_ s = s ++ "." ;
lin Line_S_cont s = s ++ "—" ;
lin Line_S__Conj s conj = s ++ ";" ++ conj ;
lin Line_S_if_ s = s ++ "if" ++ "—" ;
lin Line_S_if_NP_ s np = s ++ "if" ++ np ++ "—" ;
lin Line_VP_c vp = vp ++ "," ;
lin Line_VP_p vp = vp ++ "." ;
lin Line_VP__Conj vp conj = vp ++ ";" ++ conj ;
lin Line_an_CN_is_not__PP__to_be_regarded_as_NP_of_ cn pp np = "an" ++ cn ++ "is" ++ "not" ++ "," ++ pp ++ "," ++ "to" ++ "be" ++ "regarded" ++ "as" ++ np ++ "of" ++ "—" ;
lin Line_if_S__Conj s conj = "if" ++ s ++ ";" ++ conj ;
lin Line_if_S_Conj s conj = "if" ++ s ++ conj ;
lin Line_in_other_prescribed_circumstances_ = "in" ++ "other" ++ "prescribed" ++ "circumstances" ++ "." ;
lin Line_other_prescribed_circumstances_ = "other" ++ "prescribed" ++ "circumstances" ++ "." ;
lin Line_where_S_ s = "where" ++ s ++ "—" ;
lin Line_where_S__S_ s s2 = "where" ++ s ++ "," ++ s2 ++ "." ;

lin Line_PP__Line pp line = pp ++ "," ++ line ;
lin Line_where_S__S_ s s2 = "where" ++ s ++ "," ++ s2 ++ "." ;

lin Line_QCN__PP__means_ qcn pp = qcn ++ "," ++ pp ++ "," ++ "means" ++ "—" ;
lin Line_QCN_means_NP_ qcn np = qcn ++ "means" ++ np ++ ";" ;
lin Line_PP__unless_S_ loc s = loc ++ "," ++ "unless" ++ s ++ "—" ;
lin Line_where_an_CN_ cn = "where" ++ "an" ++ cn ++ "—" ;
lin Line_S_ s = s ++ "." ;

lin N2_access = "access" ;
lin N2_collection = "collection" ;
lin N2_copying = "copying" ;
lin N2_disclosure = "disclosure" ;
lin N2_disposal = "disposal" ;
lin N2_modification = "modification" ;
lin N2_use = "use" ;
lin NP_CN cn = cn ;
lin NP_NP__including_NP_ np np2 = np ++ "(" ++ "including" ++ np2 ++ ")" ;
lin NP_NP__Conj_NP__PP np conj np2 pp = np ++ "," ++ conj ++ np2 ++ "," ++ pp ;
lin NP_a_CN cn = "a" ++ cn ;
lin NP_all_the_CN_RS cn rs = "all" ++ "the" ++ cn ++ rs ;
lin NP_an_CN cn = "an" ++ cn ;
lin NP_another_CN cn = "another" ++ cn ;
lin NP_any_CN cn = "any" ++ cn ;
lin NP_any_ConjCN conjcn = "any" ++ conjcn ;
lin NP_being_in_breach = "being" ++ "in" ++ "breach" ;
lin NP_each_CN cn = "each" ++ cn ;
lin NP_it = "it" ;
lin NP_not_fewer_than_NP np = "not" ++ "fewer" ++ "than" ++ np ;
lin NP_notifying_ConjNP conjnp = "notifying" ++ conjnp ;
lin NP_section_Item item = "section" ++ item ;
lin NP_section_Ref ref = "section" ++ ref ;
lin NP_subsection_Item item = "subsection" ++ item ;
lin NP_subsection_Ref ref = "subsection" ++ ref ;
lin NP_subsection_ConjItem items = "subsection" ++ items ;
lin NP_subsections_ConjItem items = "subsections" ++ items ;
lin NP_that_CN cn = "that" ++ cn ;
lin NP_the_CN cn = "the" ++ cn ;
lin NP_the_loss_of_any_ConjCN_RS conjcn rs = "the" ++ "loss" ++ "of" ++ "any" ++ conjcn ++ rs ;
lin NP_the_unauthorised_ConjN2_of_NP conjn2 np = "the" ++ "unauthorised" ++ conjn2 ++ "of" ++ np ;
lin NP_this_CN cn = "this" ++ cn ;
lin NP_this_section = "this" ++ "section" ;

lin Num_3 = "3" ;

lin PP_PP__but_in_any_case_PP pp pp2 = pp ++ "," ++ "but" ++ "in" ++ "any" ++ "case" ++ pp2 ;
lin PP_Time time = time ;
lin PP_as_soon_as_is_practicable = "as" ++ "soon" ++ "as" ++ "is" ++ "practicable" ;
lin PP_as_to_ConjNP conjnp = "as" ++ "to" ++ conjnp ;
lin PP_by_reason_only_of_NP np = "by" ++ "reason" ++ "only" ++ "of" ++ np ;
lin PP_despite_NP np = "despite" ++ np ;
lin PP_in_a_reasonable_and_expeditious_manner = "in" ++ "a" ++ "reasonable" ++ "and" ++ "expeditious" ++ "manner" ;
lin PP_in_accordance_with_NP np = "in" ++ "accordance" ++ "with" ++ np ;
lin PP_in_accordance_with_section_Ref ref = "in" ++ "accordance" ++ "with" ++ "section" ++ ref ;
lin PP_in_any_manner_that_is_reasonable_in_the_circumstances = "in" ++ "any" ++ "manner" ++ "that" ++ "is" ++ "reasonable" ++ "in" ++ "the" ++ "circumstances" ;
lin PP_in_its_possession = "in" ++ "its" ++ "possession" ;
lin PP_in_relation_to_NP np = "in" ++ "relation" ++ "to" ++ np ;
lin PP_in_this_Part = "in" ++ "this" ++ "Part" ;
lin PP_no_later_than_Num_calendar_days_after_the_day_S num s = "no" ++ "later" ++ "than" ++ num ++ "calendar" ++ "days" ++ "after" ++ "the" ++ "day" ++ s ;
lin PP_on_behalf_of_and_for_the_purposes_of_NP np = "on" ++ "behalf" ++ "of" ++ "and" ++ "for" ++ "the" ++ "purposes" ++ "of" ++ np ;
lin PP_on_the_written_application_of_NP np = "on" ++ "the" ++ "written" ++ "application" ++ "of" ++ np ;
lin PP_only_within_NP np = "only" ++ "within" ++ np ;
lin PP_prior_to_the_occurrence_of_NP np = "prior" ++ "to" ++ "the" ++ "occurrence" ++ "of" ++ np ;
lin PP_relating_to_NP np = "relating" ++ "to" ++ np ;
lin PP_subject_to_NP np = "subject" ++ "to" ++ np ;
lin PP_subject_to_any_conditions_that_the_Commission_thinks_fit = "subject" ++ "to" ++ "any" ++ "conditions" ++ "that" ++ "the" ++ "Commission" ++ "thinks" ++ "fit" ;
lin PP_to_the_best_of_the_knowledge_and_belief_of_NP np = "to" ++ "the" ++ "best" ++ "of" ++ "the" ++ "knowledge" ++ "and" ++ "belief" ++ "of" ++ np ;
lin PP_at_the_time_NP_notifies_ConjNP np conjnp = "at" ++ "the" ++ "time" ++ np ++ "notifies" ++ conjnp ;
lin PP__as_the_case_may_be_ = "(" ++ "as" ++ "the" ++ "case" ++ "may" ++ "be" ++ ")";
lin PP_under_its_control = "under" ++ "its" ++ "control" ;
lin PP_upon_notification_by_NP np = "upon" ++ "notification" ++ "by" ++ np ;
lin PP_without_limiting_NP np = "without" ++ "limiting" ++ np ;
lin PP_without_undue_delay = "without" ++ "undue" ++ "delay" ;
lin PPart_made_in_the_form = "made" ++ "in" ++ "the" ++ "form" ;
lin PPart_submitted_in_the_manner_required_by_the_Commission = "submitted" ++ "in" ++ "the" ++ "manner" ++ "required" ++ "by" ++ "the" ++ "Commission" ;

lin QCN__CN_ cn = "“" ++ cn ++ "”" ;

lin RS_on_which_S s = "on" ++ "which" ++ s ;
lin RS_that_NP_VP np vp = "that" ++ np ++ vp ;
lin RS_that_VP vp = "that" ++ vp ;
lin RS_to_whom_NP_VP np vp = "to" ++ "whom" ++ np ++ vp ;
lin RS_where_S s = "where" ++ s ;
lin Ref_1a = "(1)(a)" ;
lin Ref_1b = "(1)(b)" ;
lin Ref_26A = "26A" ;
lin Ref_26B = "26B" ;
lin Ref_26B1a = "26B(1)(a)" ;
lin Ref_26C = "26C" ;
lin Ref_26D = "26D" ;
lin Ref_26E = "26E" ;
lin Ref_402020 = "[40/2020]" ;

lin S_NP_VP np vp = np ++ vp ;
lin S_NP_is_in_relation_to_NP np np2 = np ++ "is" ++ "in" ++ "relation" ++ "to" ++ np2 ;
lin S_NP_is_likely_to_occur np = np ++ "is" ++ "likely" ++ "to" ++ "occur" ;
lin S_personal_data_is_stored_in_circumstances_RS rs = "personal" ++ "data" ++ "is" ++ "stored" ++ "in" ++ "circumstances" ++ rs ;
lin S_the_context_otherwise_requires = "the" ++ "context" ++ "otherwise" ++ "requires" ;

lin SeqPP_PP pp = pp ;
lin SeqPP_PP_SeqPP pp seqpp = pp ++ seqpp ;

lin Time_on_or_after_assessing_that_S s = "on" ++ "or" ++ "after" ++ "assessing" ++ "that" ++ s ;
lin Time_on_or_after_notifying_the_Commission_under_subsection_Item item = "on" ++ "or" ++ "after" ++ "notifying" ++ "the" ++ "Commission" ++ "under" ++ "subsection" ++ item ;

lin Title_Duty_to_conduct_assessment_of_data_breach = "Duty" ++ "to" ++ "conduct" ++ "assessment" ++ "of" ++ "data" ++ "breach" ;
lin Title_Duty_to_notify_occurrence_of_notifiable_data_breach = "Duty" ++ "to" ++ "notify" ++ "occurrence" ++ "of" ++ "notifiable" ++ "data" ++ "breach" ;
lin Title_Interpretation_of_this_Part = "Interpretation" ++ "of" ++ "this" ++ "Part" ;
lin Title_NOTIFICATION_OF_DATA_BREACHES = "NOTIFICATION" ++ "OF" ++ "DATA" ++ "BREACHES" ;
lin Title_Notifiable_data_breaches = "Notifiable" ++ "data" ++ "breaches" ;
lin Title_PART_6A = "PART" ++ "6A" ;
lin Title_obligations_of_data_intermediary_of_public_agency = "obligations" ++ "of" ++ "data" ++ "intermediary" ++ "of" ++ "public" ++ "agency" ;

lin V2_conduct = "conduct" ;
lin V2_contain = "contain" ;
lin VP2_is_likely_to_result_in = "is" ++ "likely" ++ "to" ++ "result" ++ "in" ;
lin VP2_results_in = "results" ++ "in" ;

lin VP_ConjCop_Comp conjcop comp = conjcop ++ comp ;
lin VP_ConjVP2_NP conjvp2 np = conjvp2 ++ np ;
lin VP_V2__SeqPP__NP v2 seqpp np = v2 ++ "," ++ seqpp ++ "," ++ np ;
lin VP_VP__Conj_to_VP vp conj vp2 = vp ++ "," ++ conj ++ "to" ++ vp2 ;
lin VP_VP_PP vp pp = vp ++ pp ;
lin VP_affects_NP np = "affects" ++ np ;
lin VP_applies_to_NP np = "applies" ++ "to" ++ np ;
lin VP_apply_concurrently_with_NP np = "apply" ++ "concurrently" ++ "with" ++ np ;
lin VP_assesses__PP__that_S pp s = "assesses" ++ "," ++ pp ++ "," ++ "that" ++ s ;
lin VP_be_ConjPPart conjppart = "be" ++ conjppart ;
lin VP_be_a_CN cn = "be" ++ "a" ++ cn ;
lin VP_be_of_a_significant_scale = "be" ++ "of" ++ "a" ++ "significant" ++ "scale" ;
lin VP_believe_that_S s = "believe" ++ "that" ++ s ;
lin VP_carry_out_NP np = "carry" ++ "out" ++ np ;
lin VP_conduct_NP np = "conduct" ++ np ;
lin VP_does_not_apply_to_NP np = "does" ++ "not" ++ "apply" ++ "to" ++ np ;
lin VP_had_implemented__PP__NP pp np = "had" ++ "implemented" ++ "," ++ pp ++ "," ++ np ;
lin VP_has_occurred = "has" ++ "occurred" ;
lin VP_has_reason_to_VP vp = "has" ++ "reason" ++ "to" ++ vp ;
lin VP_is_a_CN cn = "is" ++ "a" ++ cn ;
lin VP_is_deemed_not_to_VP vp = "is" ++ "deemed" ++ "not" ++ "to" ++ vp ;
lin VP_is_deemed_to_VP vp = "is" ++ "deemed" ++ "to" ++ vp ;
lin VP_is_prescribed_for_NP np = "is" ++ "prescribed" ++ "for" ++ np ;
lin VP_is_processing_PP pp = "is" ++ "processing" ++ pp ;
lin VP_makes_NP np = "makes" ++ np ;
lin VP_may__SeqPP__VP seqpp vp = "may" ++ "," ++ seqpp ++ "," ++ vp ;
lin VP_must__SeqPP__VP seqpp vp = "must" ++ "," ++ seqpp ++ "," ++ vp ;
lin VP_must_VP vp = "must" ++ vp ;
lin VP_must_also_VP vp = "must" ++ "also" ++ vp ;
lin VP_must_not_VP vp = "must" ++ "not" ++ vp ;
lin VP_notify_NP np = "notify" ++ np ;
lin VP_notify_NP_of_NP np np2 = "notify" ++ np ++ "of" ++ np2 ;
lin VP_occurs_on_or_after_Date date = "occurs" ++ "on" ++ "or" ++ "after" ++ date ;
lin VP_provide_NP np = "provide" ++ np ;
lin VP_relates = "relates" ;
lin VP_relates_to_NP np = "relates" ++ "to" ++ np ;
lin VP_renders_it_unlikely_that_S s = "renders" ++ "it" ++ "unlikely" ++ "that" ++ s ;
lin VP_result_in_NP np = "result" ++ "in" ++ np ;
lin VP_so_V v = "so" ++ v ;
lin VP_takes_NP__PP__RS np pp rs = "takes" ++ np ++ "," ++ pp ++ "," ++ rs ;
lin VP_waive_NP np = "waive" ++ np ;
lin VP_will_result_in_NP np = "will" ++ "result" ++ "in" ++ np ;
lin V_directs = "directs" ;
lin V_instructs = "instructs" ;

}
