// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Variables getters get('foo') should return value of key foo 1`] = `"FooValue"`;

exports[`Variables getters getAll() should return values of all variables 1`] = `
Object {
  "bar": 2,
  "baz": Object {
    "name": "baz",
  },
  "blax": File {
    "__readFile": [Function],
    "content": "",
    "createTypedValue": [Function],
    "engineService": undefined,
    "filename": "path",
    "load": [Function],
    "remotePath": "/execution/undefined/localVariables/blax/data",
  },
  "foo": "FooValue",
  "qux": 2018-01-23T12:42:45.435Z,
  "zex": File {
    "__readFile": [Function],
    "content": "",
    "createTypedValue": [Function],
    "engineService": undefined,
    "filename": "data",
    "load": [Function],
    "remotePath": "/execution/undefined/localVariables/zex/data",
  },
}
`;

exports[`Variables getters getAllTyped() should return all variables 1`] = `
Object {
  "bar": Object {
    "type": "integer",
    "value": 2,
    "valueInfo": Object {},
  },
  "baz": Object {
    "type": "json",
    "value": Object {
      "name": "baz",
    },
    "valueInfo": Object {},
  },
  "blax": Object {
    "type": "file",
    "value": File {
      "__readFile": [Function],
      "content": "",
      "createTypedValue": [Function],
      "engineService": undefined,
      "filename": "path",
      "load": [Function],
      "remotePath": "/execution/undefined/localVariables/blax/data",
    },
    "valueInfo": Object {
      "filename": "path",
    },
  },
  "foo": Object {
    "type": "string",
    "value": "FooValue",
    "valueInfo": Object {},
  },
  "qux": Object {
    "type": "date",
    "value": 2018-01-23T12:42:45.435Z,
    "valueInfo": Object {},
  },
  "zex": Object {
    "type": "file",
    "value": File {
      "__readFile": [Function],
      "content": "",
      "createTypedValue": [Function],
      "engineService": undefined,
      "filename": "data",
      "load": [Function],
      "remotePath": "/execution/undefined/localVariables/zex/data",
    },
    "valueInfo": Object {},
  },
}
`;

exports[`Variables getters getDirtyVariables() should return all dirty variables 1`] = `
Object {
  "blax": Object {
    "type": "file",
    "value": "c29tZSBjb250ZW50",
    "valueInfo": Object {
      "filename": "path",
    },
  },
}
`;

exports[`Variables getters getTyped('foo') should return the typed value of key foo 1`] = `
Object {
  "type": "string",
  "value": "FooValue",
  "valueInfo": Object {},
}
`;

exports[`Variables read-only should have getters and setters if readOnly is not true 1`] = `
Array [
  "getTyped",
  "get",
  "getAll",
  "getAllTyped",
  "getDirtyVariables",
  "setTyped",
  "set",
  "setAll",
  "setAllTyped",
]
`;

exports[`Variables read-only should only have getters if readOnly is true 1`] = `
Array [
  "getTyped",
  "get",
  "getAll",
  "getAllTyped",
  "getDirtyVariables",
]
`;

exports[`Variables setters set("foo", "fooValue")) should set variable with key "foo" and value "fooValue": dirty variables 1`] = `Object {}`;

exports[`Variables setters set("foo", "fooValue")) should set variable with key "foo" and value "fooValue": dirty variables 2`] = `
Object {
  "foo": Object {
    "type": "string",
    "value": "fooValue",
    "valueInfo": Object {},
  },
}
`;

exports[`Variables setters set("foo", "fooValue")) should set variable with key "foo" and value "fooValue": variables 1`] = `Object {}`;

exports[`Variables setters set("foo", "fooValue")) should set variable with key "foo" and value "fooValue": variables 2`] = `
Object {
  "foo": Object {
    "type": "string",
    "value": "fooValue",
    "valueInfo": Object {},
  },
}
`;

exports[`Variables setters setAll(someValues)  should add someValues to variables: dirty variables 1`] = `Object {}`;

exports[`Variables setters setAll(someValues)  should add someValues to variables: dirty variables 2`] = `
Object {
  "bar": Object {
    "type": "integer",
    "value": 2,
    "valueInfo": Object {},
  },
  "foo": Object {
    "type": "string",
    "value": "FooValue",
    "valueInfo": Object {},
  },
}
`;

exports[`Variables setters setAll(someValues)  should add someValues to variables: variables 1`] = `Object {}`;

exports[`Variables setters setAll(someValues)  should add someValues to variables: variables 2`] = `
Object {
  "bar": Object {
    "type": "integer",
    "value": 2,
    "valueInfo": Object {},
  },
  "foo": Object {
    "type": "string",
    "value": "FooValue",
    "valueInfo": Object {},
  },
}
`;

exports[`Variables setters setAllTyped(someTypedValues) should add someTypedValues to variables: dirty variables 1`] = `Object {}`;

exports[`Variables setters setAllTyped(someTypedValues) should add someTypedValues to variables: dirty variables 2`] = `
Object {
  "bar": Object {
    "type": "string",
    "value": "barValue",
    "valueInfo": Object {},
  },
  "foo": Object {
    "type": "string",
    "value": "fooValue",
    "valueInfo": Object {},
  },
}
`;

exports[`Variables setters setAllTyped(someTypedValues) should add someTypedValues to variables: variables 1`] = `Object {}`;

exports[`Variables setters setAllTyped(someTypedValues) should add someTypedValues to variables: variables 2`] = `
Object {
  "bar": Object {
    "type": "string",
    "value": "barValue",
    "valueInfo": Object {},
  },
  "foo": Object {
    "type": "string",
    "value": "fooValue",
    "valueInfo": Object {},
  },
}
`;

exports[`Variables setters setTyped("baz",someTypeValue) should set typed value with key "baz": dirty variables 1`] = `Object {}`;

exports[`Variables setters setTyped("baz",someTypeValue) should set typed value with key "baz": dirty variables 2`] = `
Object {
  "baz": Object {
    "type": "json",
    "value": "{\\"name\\":\\"bazname\\"}",
    "valueInfo": Object {},
  },
}
`;

exports[`Variables setters setTyped("baz",someTypeValue) should set typed value with key "baz": variables 1`] = `Object {}`;

exports[`Variables setters setTyped("baz",someTypeValue) should set typed value with key "baz": variables 2`] = `
Object {
  "baz": Object {
    "type": "json",
    "value": Object {
      "name": "bazname",
    },
    "valueInfo": Object {},
  },
}
`;
