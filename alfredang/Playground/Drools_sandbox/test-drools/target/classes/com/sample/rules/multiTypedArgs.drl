package com.sample.multiTypedArgs 

import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;

declare BasicPred end

declare Foo extends BasicPred
	support : ESPred @position(0)
	arg0 : Integer @position(1)
end

declare Bar extends BasicPred
	support : ESPred @position(0)
	arg0 : Integer @position(1)
end

declare FooBar extends BasicPred
	support : ESPred @position(0)
	arg0: Integer @position(1)
end

declare ESPred 
	name: String @position(0)
	args: List @position(1)
	support: List @position(2)
end

declare ESRule 
	name: String @position(0)
	bindings: List @position(1)
	priors: List @position(2)
end

rule "foo > bar"
	when 
		Foo($j0 := support, $x := arg0)
		Bar($j1 := support, $y := arg0)
		eval($x > $y)
	then
		ArrayList<Object> bs = new ArrayList<>(Arrays.asList($x,$y));
		ArrayList<Object> ps = new ArrayList<>(Arrays.asList($j0, $j1));
		ESRule rj = new ESRule("foo > bar", bs, ps);
		ArrayList<Object> as = new ArrayList<>(Arrays.asList($x + $y));
		ArrayList<Object> sp = new ArrayList<>(Arrays.asList(rj));
		ESPred pj = new ESPred("FooBar", as, sp);
		insert(new FooBar(pj, $x + $y));
end

rule "fact1"
	when
	then
		ESRule rj = new ESRule("fact1", null, null);
		ArrayList<Object> as = new ArrayList<>(Arrays.asList(10)); // <-- hard coded
		ArrayList<Object> sp = new ArrayList<>(Arrays.asList(rj));
		ESPred pj = new ESPred("Foo", as, sp);
		insert(new Foo(pj, 10));
end

rule "fact2"
	when
	then
		ESRule rj = new ESRule("fact2", null, null);
		ArrayList<Object> as = new ArrayList<>(Arrays.asList(2));	// <-- hard coded
		ArrayList<Object> sp = new ArrayList<>(Arrays.asList(rj));
		ESPred pj = new ESPred("Bar", as, sp);
		insert(new Bar(pj, 2));
end

query "rule trace"
	$rule : BasicPred()
end