// Exercise : Pay or Return
//  extend the pay on delivery exercise by allowing a return of unwanted
//  items
//
//  Create an inventoryPrice function which, for each item, returns its
//  price. For items that are not explicitly listed, the price is some 
//  arbitrarily large number.
//
//  The seller should now include the price of the item in the Delivery
//  event, based on what inventoryPrice function returns. The buyer then
//  has two options: pay what is asked or return the item to the seller.


// Events

type Order : Event {
  amount : Int, // the amount of euros offered for item
  recipient : Agent, // recipient of the order
  item : String // item that is ordered
}

type Delivery : Event = {
  recipient : Agent, // recipient of item
  item : String // item delivered
  price : Int // as required by problem statement
}

type Payment : Event = {
  payee : Agent, // recipient of payment
  amount : Int, // payment amount
  item : String // item paid for
}

type Return : Event = {
  recipient : Agent, // recipient of item
  item : String // item returned
}


// Functions
val inventoryPrice =
  \ "Bike" -> 100
  | "Hammer" -> 30
  | "Saw" -> 40
  | _ -> 999999


// Contract
type entrypoint PayOrReturn(buyer, seller, item, inventory):
  // seller delivers
  <seller> delivery : Delivery where
    delivery.recipient = buyer &&
    delivery.item = item &&
    delivery.price = inventoryPrice delivery.item
  then (
    <buyer> payment : Payment where
      payment.payee = seller &&
      payment.amount = delivery.price &&
      payment.item = delivery.item
  or
    <buyer> return : Return where
      return.recipient = seller && 
      return.item = delivery.item
  )
    


// Write a contract in which the buyer orders both "Bike" and "Helmet",
// in any order. Use the 'and' combinator.

template entrypoint BikeAndHelmet(buyer, seller, inventory):
// Buyer orders bike and helmet
  // bike
  <buyer> order1 : Order where
    order1.item      = "Bike" &&
    order1.amount    = inventoryPrice order1.item &&
    order1.recipient = seller
  and
  <buyer> order2 : Order where
    order2.item      = "Helmet" &&
    order2.amount    = inventoryPrice order2.item &&
    order2.recipient = seller
  // contract concluded
