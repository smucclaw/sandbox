#fun nsubj_ head -- NP -> nsubj
#fun obj_ head -- NP -> obj
#fun iobj_ head -- NP -> iobj
#fun xcomp_ head -- Comp -> xcomp
#fun rootV_ head -- VP -> root
#fun rootV2_ head -- VPSlash -> root
#fun rootA_ head -- AP -> root
#fun rootN_ head -- NP -> root

#fun intransitive head nsubj -- root -> nsubj -> UDS ;  -- the cat sleeps
#fun transitive head nsubj obj -- root -> nsubj -> obj -> UDS ; -- the cat sees us
#fun apred head nsubj cop -- root -> nsubj -> cop -> UDS ; -- the cat is small
#fun anyUDS head

#fun AdAP advmod head -- AdA -> AP -> AP
#fun AdVVP advmod head -- AdV -> VP -> VP
#fun AddAdvQVP head advmod -- QVP -> IAdv -> QVP
#fun AddNPtoVP head obj -- VP -> NP -> VP
#fun AddPPtoVP head obl -- VP -> PP -> VP
#fun AddStoVP head ccomp -- VP -> S -> VP
#fun AddVPItoAuxVP aux head -- VP -> VPI -> VP
#fun AddVPItoVP head xcomp -- VP -> VPI -> VP
#fun AdjCN amod head -- AP -> CN -> CN
#fun AdjOrd head -- Ord -> AP
#fun AdvCN head nmod -- CN -> Adv -> CN
#fun AdvIAdv advmod head -- IAdv -> Adv -> IAdv
#fun AdvIP head advmod -- IP -> Adv -> IP
#fun AdvQVP head obj -- VP -> IAdv -> QVP
#fun AdvS advmod head
#fun AdvVP head advmod -- VP -> Adv -> VP
#fun BaseAP head conj -- AP -> AP -> ListAP
#fun BaseAdV head conj -- AdV -> AdV -> ListAdV
#fun BaseAdv head conj -- Adv -> Adv -> ListAdv
#fun BaseCN head conj -- CN -> CN -> ListCN
#fun BaseDAP head conj -- DAP -> DAP -> ListDAP
#fun BaseIAdv head conj -- IAdv -> IAdv -> ListIAdv
#fun BaseNP head conj -- NP -> NP -> ListNP
#fun BaseRS head conj -- RS -> RS -> ListRS
#fun BaseS head conj -- S -> S -> ListS
#fun BaseVPI head conj -- VPI -> VPI -> ListVPI
#fun BaseVPS head conj -- VPS -> VPS -> ListVPS
#fun CardCN nummod head -- Numeral -> CN -> NP
#fun CompAP head -- AP -> Comp
#fun CompAdv head -- Adv -> Comp
#fun CompNP head -- NP -> Comp
#fun CompIAdv head -- IAdv -> IComp
#fun CompIP head -- IP -> IComp
#fun ComplSlashIP head obj -- VPSlash -> IP -> QVP
#fun CompoundN compound head -- N -> N -> N
#fun ConjAP cc head -- Conj -> ListAP -> AP
#fun ConjAdV cc head -- Conj -> ListAdV -> AdV
#fun ConjAdv cc head -- Conj -> ListAdv -> Adv
#fun ConjCN cc head -- Conj -> ListCN -> CN
#fun ConjDet cc head -- Conj -> ListDAP -> Det
#fun ConjIAdv cc head -- Conj -> ListIAdv -> IAdv
#fun ConjNP cc head -- Conj -> ListNP -> NP
#fun ConjRS cc head -- Conj -> ListRS -> RS
#fun ConjS cc head -- Conj -> ListS -> S
#fun ConjVPI cc head -- Conj -> ListVPI -> VPI
#fun ConjVPS cc head -- Conj -> ListVPS -> VPS
#fun ConsAP head conj -- AP -> ListAP -> ListAP
#fun ConsAdV head conj -- AdV -> ListAdV -> ListAdV
#fun ConsAdv head conj -- Adv -> ListAdv -> ListAdv
#fun ConsCN head conj -- CN -> ListCN -> ListCN
#fun ConsDAP head conj -- DAP -> ListDAP -> ListDAP
#fun ConsIAdv head conj -- IAdv -> ListIAdv -> ListIAdv
#fun ConsNP head conj -- NP -> ListNP -> ListNP
#fun ConsRS head conj -- RS -> ListRS -> ListRS
#fun ConsS head conj -- S -> ListS -> ListS
#fun ConsVPI head conj -- VPI -> ListVPI -> ListVPI
#fun ConsVPS head conj -- VPS -> ListVPS -> ListVPS
#fun DetCN det head -- Det -> CN -> NP
#fun ExistS aux advmod head -- Temp -> Pol -> NP -> S
#fun FlatPN head flat -- PN -> PN -> PN
#fun FunRP case nmod head -- Prep -> NP -> RP -> RP
#fun IDig head -- Dig -> Digits
#fun IIDig nummod head -- Dig -> Digits -> Digits
#fun IdetCN det head -- IDet -> CN -> IP
#fun IdetIP head -- IDet -> IP
#fun IdetQuant head nummod -- IQuant -> Num -> IDet
#fun ImpVP head -- VP -> Imp
#fun MassNP head -- CN -> NP
#fun MkVPI head -- VP -> VPI
#fun MkVPS aux advmod head -- Temp -> Pol -> VP -> VPS
#fun OrdNumeral head -- Numeral -> Ord
#fun PassVP head -- V -> VP
#fun PositA head -- A -> AP
#fun PositAdvAdj head -- A -> Adv
#fun PossPlNP nmod:poss head -- Pron -> CN -> NP
#fun PossSgNP nmod:poss head -- Pron -> CN -> NP
#fun PredVPS nsubj head -- NP -> VPS -> S
#fun PrepIP case head -- Prep -> IP -> IAdv
#fun PrepNP case head -- Prep -> NP -> Adv
#fun PrepPP case head -- Prep -> NP -> PP
#fun ProgrVP head -- VP -> VP
#fun PunctUttText head punct -- Utt -> Punct -> Text
#fun QuantPlCN det head -- Quant -> CN -> NP
#fun QuantSgCN det head -- Quant -> CN -> NP
#fun QuestCl head -- Cl -> QCl ---- not active
#fun QuestIAdv advmod head -- IAdv -> Cl -> QCl ---- not active
#fun QuestIComp head nsubj -- IComp -> NP -> QCl
#fun QuestIAdvNPVP advmod nsubj head -- IAdv -> NP -> VP -> QCl ---- temporary
#fun QuestNP VP nsubj head -- NP -> VP -> QS ---- temporary
#fun QuestQCl aux advmod head -- Temp -> Pol -> QCl -> QS ---- temporary
#fun QuestQVP nsubj head -- IP -> QVP -> QCl
#fun QuestSlash obj head -- IP -> ClSlash -> QCl
#fun QuestVP nsubj head -- IP -> VP -> QCl
#fun RelCN head acl -- CN -> RS -> CN
#fun RelCl head -- Cl -> RCl
#fun RelSlash mark head -- RP -> ClSlash -> RCl
#fun RelVP mark head -- RP -> VP -> RCl
#fun SubjS mark head -- Subj -> S -> Adv
#fun TTAnt aux head --- head head -- Tense -> Ant -> Temp
#fun UseComp head -- Comp -> VP
#fun UseComparA head -- A -> AP
#fun UseN head -- N -> CN
#fun UsePN head -- PN -> NP
#fun UsePron head -- Pron -> NP
#fun UseV head -- V -> VP
#fun UttAdv head -- Adv -> Utt
#fun UttImpSg advmod head -- Pol -> Imp -> Utt
#fun UttNP head -- NP -> Utt
#fun UttQS head -- QS -> Utt
#fun UttS head -- S -> Utt
#fun UttText head -- Utt -> Text
#fun num head -- Sub1000000 -> Numeral
#fun pot0 head -- Digit -> Sub10
#fun pot0as1 head -- Sub10 -> Sub100
#fun pot1 head -- Digit -> Sub100
#fun pot1as2 head -- Sub100 -> Sub1000
#fun pot1plus nummod head -- Digit -> Sub10 -> Sub100
#fun pot1to19 head -- Digit -> Sub100
#fun pot2 head -- Sub10 -> Sub1000
#fun pot2as3 head -- Sub1000 -> Sub1000000
#fun pot2plus nummod head -- Sub10 -> Sub100 -> Sub1000
#fun pot3 head -- Sub1000 -> Sub1000000
#fun pot3plus nummod head -- Sub1000 -> Sub1000 -> Sub1000000

#cat Ant X
#cat Dig NUM
#cat RP PRON
#cat Pol X
#cat Tense X
#cat Det DET
#cat A ADJ
#cat AdA ADV
#cat Adv ADV
#cat Card NUM
#cat N NOUN
#cat PN PROPN
#cat Prep ADP
#cat V VERB
#cat AdN ADV
#cat AdV ADV
#cat Interj INTJ
#cat Subj SCONJ
#cat Predet DET
#cat Conj CCONJ
#cat Quant DET
#cat CAdv ADV
#cat PConj CCONJ
#cat Punct PUNCT
#cat CN NOUN
#cat NP PRON ----
#cat ACard ADV
#cat Pron PRON
#cat IAdv ADV
#cat Digit NUM
#cat Sub10 NUM
#cat Sub100 NUM
#cat IP PRON
#cat IQuant DET

-- needed in ud2gf only

#auxfun UseComp_Cop_Pres cop comp : Cop -> Comp -> VPS = MkVPS (TTAnt TPres ASimul) PPos  (UseComp comp) ; cop[Tense=Pres] head
#auxfun UseComp_Cop_PresNeg cop neg comp : Cop -> Neg -> Comp -> VPS = MkVPS (TTAnt TPres ASimul) PNeg (UseComp comp) ; cop[Tense=Pres] advmod head
#auxfun UseComp_Cop_Past cop comp : Cop -> Comp -> VPS = MkVPS (TTAnt TPast ASimul) PPos  (UseComp comp) ; cop[Tense=Past] head
#auxfun UseComp_Cop_PastNeg cop neg comp : Cop -> Neg -> Comp -> VPS = MkVPS (TTAnt TPast ASimul) PNeg (UseComp comp) ; cop[Tense=Past] advmod head

#auxfun ProgrVP_Cop_Pres cop vp : Cop -> VP -> VPS = MkVPS (TTAnt TPres ASimul) PPos  (ProgrVP vp) ; cop[Tense=Pres] head[Tense=Pres|VerbForm=Part]
#auxfun ProgrVP_Cop_PresNeg neg cop vp : Neg -> Cop -> VP -> VPS = MkVPS (TTAnt TPres ASimul) PNeg  (ProgrVP vp) ; advmod cop[Tense=Pres] head[Tense=Pres|VerbForm=Part]
#auxfun ProgrVP_Cop_Past cop vp : Cop -> VP -> VPS = MkVPS (TTAnt TPast ASimul) PPos  (ProgrVP vp) ; cop[Tense=Pres] head[Tense=Pres|VerbForm=Part]
#auxfun ProgrVP_Cop_PastNeg neg cop vp : Neg -> Cop -> VP -> VPS = MkVPS (TTAnt TPast ASimul) PNeg  (ProgrVP vp) ; advmod cop[Tense=Past] head[Tense=Pres|VerbForm=Part]

#auxfun MkVPS_Pres vp : VP -> VPS = MkVPS (TTAnt TPres ASimul) PPos vp ; head[Tense=Pres]
#auxfun MkVPS_PresNeg do neg vp : Do -> Neg -> VP -> VPS = MkVPS (TTAnt TPres ASimul) PNeg vp ; aux[Tense=Pres] advmod head
#auxfun MkVPS_Past vp : VP -> VPS = MkVPS (TTAnt TPast ASimul) PPos vp ; head[Tense=Past]
#auxfun MkVPS_PastNeg do neg vp : Do -> Neg -> VP -> VPS = MkVPS (TTAnt TPast ASimul) PNeg vp ; aux[Tense=Past] advmod head
#auxfun MkVPS_Perf have vp : Have -> VP -> VPS = MkVPS (TTAnt TPres AAnter) PPos vp ; aux[Tense=Pres] head
#auxfun MkVPS_PerfNeg have neg vp : Have -> Neg -> VP -> VPS = MkVPS (TTAnt TPres AAnter) PNeg vp ; aux[Tense=Pres] advmod head
#auxfun MkVPS_Pluperf have vp : Have -> VP -> VPS = MkVPS (TTAnt TPast AAnter) PPos vp ; aux[Tense=Past] head
#auxfun MkVPS_PluperfNeg have neg vp : Have -> Neg -> VP -> VPS = MkVPS (TTAnt TPast AAnter) PNeg vp ; aux[Tense=Past] advmod head
#auxfun MkVPS_Fut will vp : Will -> VP -> VPS = MkVPS (TTAnt TFut ASimul) PPos vp ; aux head
#auxfun MkVPS_FutNeg will neg vp : Will -> Neg -> VP -> VPS = MkVPS (TTAnt TFut ASimul) PNeg vp ; aux advmod head

#auxfun PassVP_Cop_Pres cop v : Cop -> V -> VPS = MkVPS (TTAnt TPres ASimul) PPos  (PassVP v) ; aux:pass[Tense=Pres] head[Tense=Past|VerbForm=Part]
#auxfun PassVP_Cop_PresNeg cop neg v : Cop -> Neg -> V -> VPS = MkVPS (TTAnt TPres ASimul) PNeg  (PassVP v) ; aux:pass[Tense=Pres] advmod head[Tense=Past|VerbForm=Part]
#auxfun PassVP_Cop_Past cop v : Cop -> V -> VPS = MkVPS (TTAnt TPast ASimul) PPos  (PassVP v) ; aux:pass[Tense=Past] head[Tense=Past|VerbForm=Part]
#auxfun PassVP_Cop_PastNeg cop neg v : Cop -> Neg -> V -> VPS = MkVPS (TTAnt TPast ASimul) PNeg  (PassVP v) ; aux:pass[Tense=Past] advmod head[Tense=Past|VerbForm=Part]

#auxfun ExistS_Pres there cop np : There -> Cop -> NP -> S = ExistS (TTAnt TPres ASimul) PPos np ; expl head[Tense=Pres] nsubj
#auxfun ExistS_Past there cop np : There -> Cop -> NP -> S = ExistS (TTAnt TPast ASimul) PPos np ; expl head[Tense=Past] nsubj

#auxfun ExistS_Pres_native there cop np : There -> Cop -> NP -> S = ExistS (TTAnt TPres ASimul) PPos np ; expl cop[Tense=Pres] head
#auxfun ExistS_Past_native there cop np : There -> Cop -> NP -> S = ExistS (TTAnt TPast ASimul) PPos np ; expl cop[Tense=Past] head

#disable ExistS

--- needed in English
#auxfun MkVPS_PlPres vp : VP -> VPS = MkVPS (TTAnt TPres ASimul) PPos vp ; head[VerbForm=Inf]
#auxfun MkVPS_PlPresNeg do neg vp : Do -> Neg -> VP -> VPS = MkVPS (TTAnt TPres ASimul) PNeg vp ; aux[VerbForm=Inf] advmod head
#auxfun MkVPS_PlPerf have vp : Have -> VP -> VPS = MkVPS (TTAnt TPres AAnter) PPos vp ; aux[VerbForm=Inf] head
#auxfun MkVPS_PlPerfNeg have neg vp : Have -> Neg -> VP -> VPS = MkVPS (TTAnt TPres AAnter) PNeg vp ; aux[VerbForm=Inf] advmod head

#auxfun MkVPI_to to vpi : VPI -> To -> VPI = vpi ; mark head

#auxfun UttImpSg_Pos vp : VP -> Utt = UttImpSg PPos (ImpVP vp) ; head[VerbForm=Inf]
#auxfun UttImpSg_Neg do neg vp : Do -> Neg -> VP -> Utt = UttImpSg PNeg (ImpVP vp) ; aux[VerbForm=Inf] advmod head[VerbForm=Inf]

#auxfun PositA_ a : A -> AP = PositA a ; head[Degree=Pos]
#auxfun UseComparA_ a : A -> AP = UseComparA a ; head[Degree=Cmp]

#auxfun ExtAdvS_ adv comma s : Adv -> Comma -> S -> S = ExtAdvS adv s ; advmod punct head

#auxcat Cop AUX
#auxcat Do AUX
#auxcat Have AUX
#auxcat Will AUX
#auxcat Would AUX
#auxcat Neg PART
#auxcat Gen PART
#auxcat To PART
#auxcat That PART
#auxcat Comma PUNCT
#auxcat There PRON

#disable UseComp MkVPS PositA UseComparA ProgrVP ExtAdvS UttImpSg ImpVP PassVP

#altfun AddNPtoVP head iobj
#altfun PredVPS nsubj:pass head

-- to deal with the_Det / thePl_Det, together with a #lemma for The in ShallowParseEng.labels
#auxcat The DET
#auxfun DetCN_theSg det cn : The -> CN -> NP = DetCN the_Det cn ; det head[Number=Sing]
#auxfun DetCN_thePl det cn : The -> CN -> NP = DetCN thePl_Det cn ; det head[Number=Plur]
#disable the_Det thePl_Det

-- disable plurals as mass terms
#auxfun MassNP_sg cn : CN -> NP = MassNP cn ; head[Number=Sing]
#auxfun DetCN_aPl cn : CN -> NP = DetCN aPl_Det cn ; head[Number=Plur]
#disable MassNP

#auxfun PossSgNP_ pron cn : Pron -> CN -> NP = PossSgNP pron cn ; nmod:poss head[Number=Sing]
#auxfun PossPlNP_ pron cn : Pron -> CN -> NP = PossPlNP pron cn ; nmod:poss head[Number=Plur]
#disable PossSgNP PossPlNP

