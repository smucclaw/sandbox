datatype Actor = borrower | lender

datatype RuleName =
  RequestPrincipal | SendPrincipal |
  Payment1 | Payment2 |
  EventOfDefault | NotifyBorrower | CureDefault |
  PayAccelerated

channel trigger_rule : RuleName.Actor
channel interrupt_rule : RuleName

channel request_principal, send_principal, pay1, pay2 : Bool.Actor
channel event_of_default, notify_borrower, cure_default : Bool.Actor
channel pay_accelerated : Bool.Actor

channel tic

Tic = tic -> Tic

Rule(RuleInstance) = \ rule_name, evnt, evnt_timer @
  let
    Trigger = [] trigger : {|trigger_rule.rule_name|} @ trigger -> Trigger

    Go =
      tic -> Go []
      trigger_rule!rule_name?actor -> (
        (RuleInstance(actor, evnt, evnt_timer) ||| Trigger)
        [| {evnt.true.actor, evnt.false.actor} |> Go
      )
  within
    Go /\ interrupt_rule!rule_name -> Go

-- Preemptive achievement instance.
PreAchvI = \ actor, evnt, initial_evnt_timer @ 
  initial_evnt_timer >= 0 &
    let
      Go(evnt_timer) =
        if evnt_timer < 0 then
          evnt!false!actor -> SKIP
        else (
          evnt!true!actor -> SKIP []
          tic -> Go(evnt_timer - 1)
        )
    within
      Go(initial_evnt_timer)

-- Non-preemptive achievement instance.
NonPreAchvI = \ actor, evnt, initial_evnt_timer @
  initial_evnt_timer >= 0 &
    let
      Go(evnt_timer) =
        if evnt_timer == 0 then
          evnt!true!actor -> SKIP
          [] tic -> evnt!false!actor -> SKIP
        else
          tic -> Go(evnt_timer - 1)
    within
      Go(initial_evnt_timer)

PreRule = Rule(PreAchvI)
NonPreRule = Rule(NonPreAchvI)

Rules = {
  PreRule(RequestPrincipal, request_principal, 1),
  NonPreRule(SendPrincipal, send_principal, 1),
  NonPreRule(Payment1, pay1, 365),
  NonPreRule(Payment2, pay2, 365),
  PreRule(EventOfDefault, event_of_default, 710),
  PreRule(NotifyBorrower, notify_borrower, 3),
  PreRule(CureDefault, cure_default, 2),
  PreRule(PayAccelerated, pay_accelerated, 1)
}

MAIN = [| {tic} |] P : union(Rules, {Tic}) @ P