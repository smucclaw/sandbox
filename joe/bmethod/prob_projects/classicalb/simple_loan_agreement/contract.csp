datatype Actor = borrower | lender

datatype RuleName =
  RequestPrincipal | SendPrincipal |
  Payment1 | Payment2 |
  EventOfDefault | NotifyBorrower | CureDefault |
  PayAccelerated

channel trigger_rule : RuleName.Actor
channel interrupt_rule : RuleName

channel request_principal, send_principal, pay1, pay2 : Bool.Actor
channel event_of_default, notify_borrower, cure_default : Bool.Actor
channel pay_accelerated : Bool.Actor

channel tic

Tic = tic -> Tic

Rule(RuleInstance) = \ rule_name, evnt, evnt_timer @
  let
    Go =
      tic -> Go []
      trigger_rule!rule_name?actor -> (
        ((RuleInstance(actor, evnt, evnt_timer) ||| trigger_rule!rule_name?actor -> SKIP)
        /\ interrupt_rule!rule_name -> SKIP)
        ; Go
      )
  within
    Go

-- Preemptive achievement instance.
PreAchvI(Cont) = \ actor, evnt, initial_evnt_timer @ 
  initial_evnt_timer >= 0 &
    let
      Go(evnt_timer) =
        if evnt_timer < 0 then
          evnt!false!actor -> Cont(false)
        else (
          evnt!true!actor -> Cont(true) []
          tic -> Go(evnt_timer - 1)
        )
    within
      Go(initial_evnt_timer)

-- Non-preemptive achievement instance.
NonPreAchvI(Cont) = \ actor, evnt, initial_evnt_timer @
  initial_evnt_timer >= 0 &
    let
      Go(evnt_timer) =
        if evnt_timer == 0 then
          evnt!true!actor -> Cont(true)
          [] tic -> evnt!false!actor -> Cont(false)
        else
          tic -> Go(evnt_timer - 1)
    within
      Go(initial_evnt_timer)

-- Template for non-compensable preemptive rule.
NCPreRule(OnDone, OnTimeout) =
  let
    Cont(is_done) = if is_done then OnDone else OnTimeout
  within
    Rule(PreAchvI(Cont))

-- Non-compensable preemptive achievement obligation.
NCPreOb = NCPreRule(Tic, STOP)

-- Non-compensable preemptive achievement prohibition.
NCPreProhib = NCPreRule(STOP, Tic)

-- Compensable, pre-emptive obligations, prohibitions and permissions.
CPreRule = Rule(PreAchvI(\ _ @ Tic))

CNonPreRule = Rule(NonPreAchvI(\ _ @ Tic))

MAIN =
  let
    Procs = {
      Tic,
      CPreRule(RequestPrincipal, request_principal, 1),
      NCPreOb(SendPrincipal, send_principal, 1),
      CNonPreRule(Payment1, pay1, 365),
      CNonPreRule(Payment2, pay2, 365),
      CPreRule(EventOfDefault, event_of_default, 730),
      -- May notify borrower
      CPreRule(NotifyBorrower, notify_borrower, 3),
      -- Must notify borrower
      -- NCPreOb(NotifyBorrower, notify_borrower, 3),
      CPreRule(CureDefault, cure_default, 2),
      NCPreOb(PayAccelerated, pay_accelerated, 1)
    }
  within
    [| {tic} |] P : Procs @ P