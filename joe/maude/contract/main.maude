--- load ./semantics/transpiler
--- load ./semantics/semantics
load ./semantics/rewrite-trace-strat
--- load ./verification/race-cond-strat

(srewrite
  transpile (
    RULE 'START
    PARTY 'party0
    MUST DO 'action0
    WITHIN 1 DAY
    HENCE ('rule1, 'rule2)
    LEST 'rule3,

    RULE 'rule1
    PARTY 'party1
    MAY DO 'action1
    WITHIN 1 DAY
    HENCE empty
    LEST empty,

    RULE 'rule2
    PARTY 'party2
    SHANT DO 'action2
    WITHIN 2 DAY
    HENCE empty
    LEST empty,

    RULE 'rule3
    PARTY 'party3
    MAY DO 'action3
    WITHIN 3 DAY
    HENCE empty
    LEST empty
  )
  using rewriteTrace(
    --- emptyEventTrace
    tick ++ ('party0 does 'action0) ++ ('party1 does 'action1) ++ tick ++ tick ++ tick
  )
.)

---(rewrite
  deltaTick
  --- Collection of all rules in the contract.
  (
    RULE 'START PARTY 'party0 MUST DO 'action0 WITHIN 1 DAY HENCE empty LEST ('rule1, 'rule2),
    RULE 'rule1 PARTY 'party1 MAY DO 'action1 WITHIN 1 DAY HENCE empty LEST empty,
    RULE 'rule2 PARTY 'party2 SHANT DO 'action2 WITHIN 1 DAY HENCE empty LEST empty,
    RULE 'rule3 PARTY 'party3 MAY DO 'action2 WITHIN 1 DAY HENCE empty LEST empty
  )
  --- Collection of currently active rule instances.
  Active (
    RULE 'START PARTY 'party MUST DO 'action0 WITHIN 0 DAY HENCE empty LEST ('rule1, 'rule2),
  )
.)

eof

(rewrite
  tau

  < 'lender : Actor | none > 
  < 'borrower : Actor | none >

  < 'machineState : AbstractMachineState |
    time : 0,
    rules : empty,
    contractState : (
      RULE 'rule0 PARTY 'borrower MUST DO 'action WITHIN 1 DAY HENCE empty LEST empty,
      RULE 'rule1 PARTY 'borrower SHANT DO 'action WITHIN 1 DAY HENCE empty LEST empty
    ) >

  --- using raceCond(
  ---   RULE 'rule
  ---   PARTY 'borrower
  ---   SHANT DO 'action
  ---   WITHIN 10 DAY
  ---   HENCE 'hence
  ---   LEST 'lest
  --- )

  --- using rewriteTrace (
  ---   ('borrower do 'default) ++
  ---   tick
  --- )
.)

---( PDPA race condition:
  action [actorName <- 'pdpc, actionName <- 'prohibit_notify_indiv] ;
  all * ;
  action [actorName <- 'org, actionName <- 'notify_indiv]

  Per the paper on the semantics of strategy language expressions
  (see propositions 5 and 6 of https://eprints.ucm.es/id/eprint/67449/1/slang.pdf),
  under some restrictions like a finite state space, such strategy exprs are
  equivalent to omega-regular expressions, or equivalently, Buchi automata.
  In this case, the regex is equivalent to an LTL formula characterizing the PDPA
  race condition.
  The resulting Kripke structure is the intersection of the original Kripke
  structure and the Buchi automaton.
  With this, we can check if the original transition system satisfies the
  omega-regex by checking if the language accepted by the intersection automaton
  is empty.
  This is actually very similar to how LTL model checking works.

  Note that omega-regexs are technically incomparable to usual formulations of
  LTL because those are usually state-based, while regexes form an action-based
  logic.
  In other words, LTL lets you talk about formulae satisfied by states while
  regexes let you talk about transitions lying along traces.
  Some variants like Henessy-Milner based logics let you talk about both
  together.
)

---(reduce
  modelCheck(none, [] Top)
.)