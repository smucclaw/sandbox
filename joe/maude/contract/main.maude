--- sload ./semantics/rewrite-trace-strat
sload ./semantics/verification/race-cond-strat

---(
  For a petri net representation, we take
  - place <-> rule
  - transition <-> action or timeout event

  If there is a missing HENCE or LEST clause, we use either:
  - a dead sink place if the contract is not yet breached, or
  - a breach place that denotes the actor in breach of the contract

  This gets very messy visually because:
  - we need to merge all transitions and add things like or-gates so that
    so that the transitions can fire when less than all input places have tokens.
  - we also need to add reset arcs from any transition going into breach places
    to all other places in order to drain them of tokens.

  What we could do is find another formalism based on petri nets that has more
  sophisticated control flow primtives.
  Maybe something like: https://yawlfoundation.github.io/index.html

  Eg:
  (START) --> [party0 does action0] --> (rule0) (rule1)
          --> [timeout] --> (rule2)

  (rule1) --> [party1 does action1] --> (rule3)
          --> [timeout] --> (Breached party1)

  (rule2) --> [party2 does action2] --> ()
          --> [timeout] --> (rule3)

  (rule3) --> [party3 does action3] --> ()
          --> [timeout] --> (Breached party3)
)
(smod MAIN is
  protecting RACE-COND-STRAT .

  --- ops rules : -> Set{Rule} .
  --- ops initialConfig : -> Configuration .

  --- eq rules
  --- = RULE 'START
  ---   WITHIN 1 DAY PARTY 'party0 MUST DO 'action0
  ---   LEST 'rule2
  ---   HENCE ('rule0 AND 'rule1),

  ---   RULE 'rule0 PARTY 'party0 SHANT WITHIN 1 DAY 'action0,

  ---   RULE 'rule1 PARTY 'party1 MUST DO 'action1 WITHIN 2 DAY HENCE 'rule3,

  ---   RULE 'rule2 WITHIN 2 DAY PARTY 'party2 MUST 'action2 LEST 'rule3,

  ---   RULE 'rule3 PARTY 'party3 MUST WITHIN 4 DAY DO 'action3 .

  --- eq initialConfig = transpile rules .

endsm)

--- (reduce
---   getAction (< 'p : Actor | none > ('p does 'a))
--- .)

(show all .)

quit

(srewrite [1]
  initialConfig
  using raceCond(rules)
  --- using raceCondAux('party0 does 'action0)
  --- using rewriteTrace(
  ---   tick ++ ('party0 does 'action0) ++ ('party1 does 'action1) ++
  ---   ('party1 does 'action1)
  --- )
.)

quit

---(rewrite
  deltaTick
  --- Collection of all rules in the contract.
  (
    RULE 'START PARTY 'party0 MUST DO 'action0 WITHIN 1 DAY HENCE empty LEST ('rule1, 'rule2),
    RULE 'rule1 PARTY 'party1 MAY DO 'action1 WITHIN 1 DAY HENCE empty LEST empty,
    RULE 'rule2 PARTY 'party2 SHANT DO 'action2 WITHIN 1 DAY HENCE empty LEST empty,
    RULE 'rule3 PARTY 'party3 MAY DO 'action2 WITHIN 1 DAY HENCE empty LEST empty
  )
  --- Collection of currently active rule instances.
  Active (
    RULE 'START PARTY 'party MUST DO 'action0 WITHIN 0 DAY HENCE empty LEST ('rule1, 'rule2),
  )
.)

eof

(rewrite
  tau

  < 'lender : Actor | none > 
  < 'borrower : Actor | none >

  < 'coordinator : Coordinator |
    time : 0,
    rules : empty,
    contractState : (
      RULE 'rule0 PARTY 'borrower MUST DO 'action WITHIN 1 DAY HENCE empty LEST empty,
      RULE 'rule1 PARTY 'borrower SHANT DO 'action WITHIN 1 DAY HENCE empty LEST empty
    ) >

  --- using raceCond(
  ---   RULE 'rule
  ---   PARTY 'borrower
  ---   SHANT DO 'action
  ---   WITHIN 10 DAY
  ---   HENCE 'hence
  ---   LEST 'lest
  --- )

  --- using rewriteTrace (
  ---   ('borrower do 'default) ++
  ---   tick
  --- )
.)

---( PDPA race condition:
  action [actorName <- 'pdpc, actionName <- 'prohibit_notify_indiv] ;
  all * ;
  action [actorName <- 'org, actionName <- 'notify_indiv]

  Per the paper on the semantics of strategy language expressions
  (see propositions 5 and 6 of https://eprints.ucm.es/id/eprint/67449/1/slang.pdf),
  under some restrictions like a finite state space, such strategy exprs are
  equivalent to omega-regular expressions, or equivalently, Buchi automata.
  In this case, the regex is equivalent to an LTL formula characterizing the PDPA
  race condition.
  The resulting Kripke structure is the intersection of the original Kripke
  structure and the Buchi automaton.
  With this, we can check if the original transition system satisfies the
  omega-regex by checking if the language accepted by the intersection automaton
  is empty.
  This is actually very similar to how LTL model checking works.

  Note that omega-regexs are technically incomparable to usual formulations of
  LTL because those are usually state-based, while regexes form an action-based
  logic.
  In other words, LTL lets you talk about formulae satisfied by states while
  regexes let you talk about transitions lying along traces.
  Some variants like Henessy-Milner based logics let you talk about both
  together.
)

---(reduce
  modelCheck(none, [] Top)
.)