--- load ./verification/model-check  
load ./semantics/rewrite-trace

---(rewrite
  < 'lender : Actor | none >
  < 'borrower : Actor | none >
  < 'machineState : AbstractMachineState |
      rules : empty,
      time : 0,
      activeRules : empty >
  containsActor 'borrower
.)

---(rewrite
  transpile (
    RULE 'PayPayment
    PARTY 'borrower
    MUST DO 'pay_payment
    WITHIN 1 YEAR
    HENCE 'something
    LEST 'something_else
  )
.)

(srewrite
  tau

  < 'lender : Actor | none > 
  < 'borrower : Actor | none >

  < 'machineState : AbstractMachineState |
    time : 0,
    rules : empty,
    activeRules : (
      PARTY 'borrower MUST DO 'pay_payment WITHIN 1,
      PARTY 'borrower SHANT DO 'default WITHIN 1
    ) >

  using rewriteTrace (
    ('borrower do 'default) ++
    ('borrower does 'pay_payment)
  )

---( PDPC race condition:
  action [actorName <- 'pdpc, actionName <- 'prohibit_notify_indiv] ;
  all * ;
  action [actorName <- 'org, actionName <- 'notify_indiv]

  Per the paper on the semantics of strategy language expressions
  (see propositions 5 and 6 of https://eprints.ucm.es/id/eprint/67449/1/slang.pdf),
  under some restrictions like a finite state space, such strategy exprs are
  equivalent to omega-regular expressions, or equivalently, Buchi automata.
  In this case, the regex is equivalent to an LTL formula characterizing the PDPA
  race condition.
  The resulting Kripke structure is the intersection of the original Kripke
  structure and the Buchi automaton.
  With this, we can check if the original transition system satisfies the
  omega-regex by checking if the language accepted by the intersection automaton
  is empty.
  This is actually very similar to how LTL model checking works.

  Note that omega-regexs are technically incomparable to usual formulations of
  LTL because those are usually state-based, while regexes form an action-based
  logic.
  In other words, LTL lets you talk about formulae satisfied by states while
  regexes let you talk about transitions lying along traces.
  Some variants like Henessy-Milner based logics let you talk about both
  together.
)
.)

---(reduce
  modelCheck(none, [] Top)
.)