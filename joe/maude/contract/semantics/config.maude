load ../syntax/rule

fmod PRELUDE is
  protecting RULE .

  sorts Id Message Event ActiveRule .
  --- subsorts Time < Int .
  subsorts Event < Message .

  ops tau : -> Event [ctor] .
  msgs _do_ _does_ _did_ : Id Id -> Event .
  ops tick : -> Event [ctor].

  vars actorName actionName : Id .

  eq actorName do actionName = actorName did actionName .
  eq actorName did actionName = actorName does actionName .

  op PARTY _ _ DO _ WITHIN _ : Id Deontic Id Nat -> ActiveRule [ctor] .

endfm

--- view Event from TRIV to PRE-SEMANTICS is
---   sort Elt to Event .
--- endv

--- view List`{Event`} from TRIV to LIST{Event} is
---   sort Elt to List`{Event`} .
--- endv

---(
  The denotational/model-theoretic interpretation of this module is an intial
  algebra isomorphic to that of List{Event}.
  As before, initiality is used to disregard nonstandard models.
)
fmod EVENT-TRACE is
  protecting PRELUDE .

  sorts EventTrace .
  subsorts Event < EventTrace .

  ops emptyEventTrace : -> EventTrace [ctor] .
  ops _++_ : EventTrace EventTrace -> EventTrace
    [ctor assoc id: emptyEventTrace] .
endfm

view ActiveRule from TRIV to PRELUDE is
  sort Elt to ActiveRule .
endv

view Set`{ActiveRule`} from TRIV to SET{ActiveRule} is
  sort Elt to Set`{ActiveRule`} .
endv

--- fmod ALLOWED-EVENT is
---   protecting EVENT-TRACE .

---   sorts AllowedEvent .
---   subsorts EventTrace < AllowedEvent .
---   ops allEvents : -> AllowedEvent [ctor] .
--- endfm

load full-maude

(omod CONFIG is
  protecting PRELUDE + SET{Rule} + SET{ActiveRule} + QID .

  subsorts Qid < Oid < Id .
  subsorts Message < Msg .

  sorts ActorState .

  class Actor .

  class StatefulActor |
    state : ActorState .

  subclass StatefulActor < Actor .

  --- class Situation .

  class AbstractMachineState |
    rules : Set{Rule},
    time : Nat,
    activeRules : Set{ActiveRule} .

endom)