load config

(omod SEMANTICS is
  protecting CONFIG .

  vars actorName actionName ruleName machineState hence lest : Oid .
  vars activeRule : ActiveRule .
  vars activeRules activeRules' : Set{ActiveRule} .
  vars rule : Rule .
  vars rules : Set{Rule} .
  vars config config' : Configuration .
  vars event event' : Event .
  vars deadline : Deadline .
  --- vars events : EventTrace .
  --- vars allowedEvents allowedEvents' : AllowedEvent .
  vars deontic : Deontic .
  vars time time' : Nat .

---(
  AC-unification allows us to recurse on sets as if they were lists.

  It may be more efficient to use a balanced binary tree like finger trees or
  red black trees ala
  https://matt.might.net/papers/germane2014deletion.pdf
)

  ops _containsRuleWithEvent_ : Set{ActiveRule} Event -> Bool .
    
  eq (PARTY actorName deontic DO actionName WITHIN time, activeRules)
    containsRuleWithEvent
    (actorName does actionName)
  = true .

  eq activeRules containsRuleWithEvent (actorName does actionName)
  = false [owise].

  ops _containsRuleWithZeroTimer : Set{ActiveRule} -> Bool .

  eq (PARTY actorName deontic DO actionName WITHIN 0, activeRules)
    containsRuleWithZeroTimer
  = true .

  eq activeRules containsRuleWithZeroTimer = false [owise] .

  ops deltaAction__ : Event Set{ActiveRule} -> Set{ActiveRule} .
  eq deltaAction event empty = empty .

  ceq deltaAction
    event
    (PARTY actorName deontic DO actionName WITHIN time, activeRules)
  = deltaAction event activeRules
  if event := actorName did actionName .

  eq deltaAction event (activeRule, activeRules')
  = activeRule, deltaAction event activeRules' [owise].

  ops deltaTick_ : Set{ActiveRule} -> Set{ActiveRule} .
  eq deltaTick empty = empty .

  eq deltaTick
    (PARTY actorName deontic DO actionName WITHIN (s time), activeRules)
  = PARTY actorName deontic DO actionName WITHIN time, deltaTick activeRules .

  eq deltaTick
    (PARTY actorName deontic DO actionName WITHIN 0, activeRules)
  = deltaTick activeRules .

---(
    there exists some active rule in machineState that
    is fulfilled/breached when the action is taken
  ----------------------------------------------------- [action]
  { actorName, machineState, ... }
  -- actorName does actionName -->
  { actorName, machineState[activeRules |-> activeRules \ { R | R is an active rule mentioning the action }] }
)
  crl [action] :
    < actorName : Actor | >
    < machineState : AbstractMachineState |
      activeRules : (
        PARTY actorName deontic DO actionName WITHIN time,
        activeRules
      ) >
    event
  =>
    < actorName : Actor | >
    < machineState : AbstractMachineState |
      activeRules : deltaAction event' activeRules >
    event'
  if event' := actorName did actionName .

  rl [tick] :
    < machineState : AbstractMachineState |
      time : time,
      activeRules : activeRules >
  =>
    < machineState : AbstractMachineState |
      time : s time,
      activeRules : deltaTick activeRules > .

  ops transpile_ : Set{Rule} -> Configuration .
  ops transpileAux__ : Set{Rule} Configuration -> Configuration .
  ops _containsActor_ : Configuration Oid -> Bool .

---(
  Transpile a set of rules to an initial abstract machine configuration for
  execution and model checking.
)
  eq transpile rules
  = transpileAux rules
    < 'machineState : AbstractMachineState |
      rules : rules,
      time : 0,
      activeRules : empty > .

  eq transpileAux empty config = tau config .

---(
  During transpilation, we detect all actors and initialize one object for each
  actor.
)
  ceq transpileAux
    (
      (
        RULE ruleName
        PARTY actorName
        deontic DO actionName
        deadline
        HENCE hence
        LEST lest
      ), rules
    )
    config
  = transpileAux rules config'
  if config' := config
      if config containsActor actorName
      then none
      else < actorName : Actor | none >
      fi .

  eq (< actorName : Actor | > config) containsActor actorName = true .
  eq config containsActor actorName = false [owise] .

endom)