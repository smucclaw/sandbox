---(
  Structural operational semantics ala Plotkin in which a configuration is a
  multiset of the following objects:
    - a list of all rules found in the program.
    - actors
    - active rule instances
    - situations that hold

  A conditional rewriting rule of the form
    crl [rule] : t => t' if C1 /\ ... /\ Cn
  gives rise to an operational rule of the form
      C1 ... Cn
    ----------------
      C[t] => C[t']
  where:
    -  _ => _ denotes the (small-step) evaluation relation.
    - C[t] is the current configuration, decomposed (via E-unification) into an
      evaluation context C[.] with a hole and a proper subterm t.

      Note that E-unification is what happens when you perform unification
      modulo an equational theory E.
      Here we are performing unification modulo some equational
      axioms that says list concatenation is associative and commutative,
      which is why this type of unification is called AC (associative + commutative)
      unification.
      Indeed, one can think of finite multisets as what happens when you quotient
      out lists by equivalence relation that permutes the elements.

      One can also define additional equality axioms for configurations to perform
      model checking under view symmetry as in Lamport's paper
      https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/charme2005.pdf
      For instance, one can define an extra axiom that associates configurations
      of timed transition systems that equates them together, disregarding global time
      and timers:
        ceq {C, time} = {C', time'} if ...
      Such a naive definition messes up the ordering of events though.

  A rewriting logic theory is the logical theory resulting from combining all
  these rules together.
  The initial model of the theory is precisely the transition system whose
  small step evaluation relation is axiomatized by the rewriting theory.
  In other words, computation by way of => is equivalent to provability in the
  rewriting theory.
  Note that initiality is important here because standard compactness arguments
  will yield nonstandard models in which there are states that are not
  reachable from the initial state.

  For our semantics, we axiomatize 2 judgement forms in the style of timed
  transition systems:
  - Action transition:
    Configuration -- actor performs action --> Configuration'
  - Time transition:
    Configuration -- time delay --> Configuration'

  We assume that time is interpreted in some initial model of a totally ordered
  commutative monoid in which 0 is the least element and +, - and < are
  primitive recursive.
  Note here that initality is just to avoid nonstandard models as in the case of
  Presburger arithmetic.
)
load ../syntax/rule
load full-maude

(omod SEMANTICS is
  protecting QID + RULE + RULE-LIST + INT .

  subsorts Qid < Oid .

  sorts Time .
  --- subsorts Time < Int .

  msgs _did_ : Oid Oid -> Msg .
  msgs ticked_ : Time -> Msg .

  class Actor .
  class Situation .

  class Rules |
    rules : RuleList .

  class RuleInstance |
    actor : Oid,
    deontic : Deontic,
    action : Qid,
    timer : Time .

  vars actorName ruleName : Oid .
  vars actionName : Qid .
  vars currentTimer timeDelta : Time .

---(
  --------------------------------------------------------------------------
  {< A : Actor | >, < R : RuleInstance | actor : A >, ... }
  -- A performs actionName -->
  {< A : Actor | >, ... }

  How to synchronize across all rule instances?
)
  --- rl [test] :
  ---   < actorName : Actor | >
  --- =>
  ---   none .

  rl [act] :
  --- For some reason, this actor object isn't unifying properly so the rule is
  --- not being used during rewriting.
    < actorName : Actor | >
    < ruleName : RuleInstance |
      actor : actorName,
      action : actionName >
  =>
    < actorName : Actor | >
    actorName did actionName .

  --- crl [tick] :
  ---   < ruleName : RuleInstance | timer : currentTimer >
  --- =>
  ---   < ruleName : RuleInstance | timer : (currentTimer - timeDelta) >
  --- if timeDelta > 0 .

endom)