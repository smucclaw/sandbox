load config

(omod TRANSPILER is
  protecting CONFIG .

  vars actorName actionName ruleName coordinator : Qid .
  vars hence lest : Set{Qid} .
  vars rules activeRules activeRules' : Set{Rule} .
  vars rule : Rule .
  vars config config' : Configuration .
  vars event event' : Event .
  vars deadline : Deadline .
  vars deontic : Deontic .
  vars time time' : Nat .

  ops transpile_ : Set{Rule} -> Configuration .
  ops transpileAux__ : Set{Rule} Configuration -> Configuration .
  ops _containsActor_ : Configuration Qid -> Bool .

---(
  Transpile a set of rules to an initial abstract machine configuration for
  execution and model checking.
)
  eq transpile rules
  = transpileAux rules
    < 'coordinator : Coordinator |
      rules : rules,
      time : 0,
      contractState : Active (getRulesWithNames rules 'START) > .

  eq transpileAux empty config = tau config .

---(
  During transpilation, we detect all actors and initialize one object for each
  actor.
)
  eq transpileAux
    (
      RULE ruleName
      PARTY actorName
      deontic actionName
      deadline
      HENCE hence
      LEST lest,
      rules
    )
    config
  = transpileAux rules config
      if config containsActor actorName
      then none
      else < actorName : Actor | none >
      fi .

  eq (< actorName : Actor | > config) containsActor actorName = true .
  eq config containsActor actorName = false [owise] .

endom)