---(
  Strategy module for detecting PDPA race condition.
)

sload ../rewrite-trace-strat

(smod RACE-COND-STRAT is
  protecting RULE .
  --- protecting SEMANTICS .
  protecting REWRITE-TRACE-STRAT .

  strat raceCond @ Configuration .
  strat raceCondAux : Set{ActionEvent} @ Configuration .
  strat raceCondActionEvent : ActionEvent @ Configuration .

  vars actorName actionName ruleName coordinator : Qid .
  vars actionEvent : ActionEvent .
  vars actionEvents : Set{ActionEvent} .
  vars hence lest : Set{Qid} .
  vars deontic : Deontic .
  vars deadline : Deadline .
  vars activeRules rules : Set{Rule} .
  vars config : Configuration .

---(
  This strategy isn't working as expected for some reason.
  This is supposed to extract the set of rules from the initial config and
  pass that to raceCondAux so we don't have to do it ourselves.
  For the time being, use raceCondAux and explicitly pass in the set of rules.
)
  sd raceCond :=
    matchrew
      < coordinator : Coordinator |
        rules : rules >
      config
    by rules using raceCondAux(getAllActions rules) .

  sd raceCondAux(empty) := idle .

  sd raceCondAux((actionEvent, actionEvents)) :=
    raceCondActionEvent(actionEvent) or-else raceCondAux(actionEvents) .

  sd raceCondActionEvent(actorName does actionName) :=
    all * ;
    match config s.t.
      config |= actorName allowedToDo actionName ;
    rewriteEvent(actorName does actionName) ;
    all * ;
    match config s.t.
      config |= actorName prohibitedFromDoing actionName .

endsm)