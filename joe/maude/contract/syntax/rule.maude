fmod RULE is
  protecting BOOL + STRING + NAT + QID .

  sorts
    Rule RuleName ActorName Deadline ActionName Deontic Date Duration
    Situation .

  subsorts Qid Bool < Situation .

---(
  MUST -- obligation
  MAY -- permission
  SHANT -- prohibition
)
  ops MUST MAY SHANT : -> Deontic [ctor] .

---(
  BY is for dates, ie absolute deadlines
  WITHIN is for relative deadlines
)
  op BY _ : Date -> Deadline [ctor].
  op WITHIN _ : Duration -> Deadline [ctor] .

  ops _DAY _WEEK _MONTH _YEAR : Nat -> Duration [ctor] .

  --- op _ performs _ at _ : ActorName ActionName Date -> Event [ctor] .

  op RULE _ UPON _ WHILE _ PARTY _ _ DO _ _ HENCE _ LEST _ :
    Qid Situation Situation Qid Deontic Qid Deadline
    Situation Situation -> Rule [ctor] .

  op testRule1 : -> Rule .
  eq testRule1 =
    RULE 'rule
    --- Trigger that tells us in which situations the rule come into effect.
    UPON true
    --- Once the norm is triggered, it remains in effect while this situation holds.
    WHILE 'situation
    PARTY 'party
    MUST DO 'action
    WITHIN 1 YEAR
    --- The situation resulting from performing the action.
    HENCE 'situation1
    --- The situation resulting from a timeout.
    LEST 'situation2 .

endfm

view Rule from TRIV to RULE is
  sort Elt to Rule .
endv

view Set`{Rule`} from TRIV to SET{Rule} is
  sort Elt to Set`{Rule`} .
endv

--- fmod RULE-LIST is
---   protecting LIST{Rule} * (
---     sort NeList{Rule} to NeRuleList,
---     sort List{Rule} to RuleList
---   ) .
--- endfm