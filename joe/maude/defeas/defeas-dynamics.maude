sload defeas-statics

mod DEFEAS-DYNAMICS is
  pr DEFEAS-STATICS .

  vars p q q' : Literal .
  vars atom ruleName ruleName' : Qid .
  vars +∆ -∆ +∂ -∂ atoms facts literals literals' : Literals .
  vars rule : NamedRule .
  vars rules : NamedRules .
  vars prefRel : Module .
  vars arrow : Arrow .
  vars -=> : StrictDefeasArrow .
  vars =~> : DefeasDefeatArrow .
  vars -=~> : Arrow .
  vars defeasTheory : DefeasTheory .

---(
  Transition system for transfinite iteration to compute the colimit of the
  endofunctor F in page 10 of Guido's paper. 

  For details on fixpoint iteration, see:
  https://core.ac.uk/download/pdf/82239173.pdf

  Can we bound the ordinal height by omega for computability purposes?
  According to Guido, we can for propositional logic.
  How much higher do we need to go for first-oder?
)
  sorts FixptIterState .
  subsorts DefeasTheory < FixptIterState .

  --- theory | +∆ | -∆ | +∂ | -∂
  ops _|_|_|_|_ :
    DefeasTheory Literals Literals Literals Literals -> FixptIterState .

  --- Fixpoint iteration begins at ⊥ = ({}, {}, {}, {})
  op _ | ⊥  : DefeasTheory -> FixptIterState .
  eq defeasTheory | ⊥
  = defeasTheory
    | emptyLiterals | emptyLiterals | emptyLiterals | emptyLiterals .

---(
  Notes on metaSearch:
  https://www.uio.no/studier/emner/matnat/ifi/INF5130/h15/lectures/lecture4.pdf
)
  ops _<`[_`]_ : Qid Module Qid -> Bool .
  eq ruleName < [prefRel] ruleName'
  = metaSearch(
      prefRel, upTerm(ruleName), upTerm(ruleName'), nil, '+, unbounded, 0
  ) =/= failure .

  crl [+∆-fact] :
    Atoms (atom # atoms)
    Facts (q # facts)
    Rules rules
    PrefRel prefRel
    | +∆ | -∆ | +∂ | -∂
  =>
    Atoms (atom # atoms)
    Facts (q # facts)
    Rules rules
    PrefRel prefRel
    | (q # +∆) | -∆ | +∂ | -∂
  if q isLiteralOfAtom atom
  /\ q notElemOf +∆ .

  crl [+∆-strict-rule] :
    Atoms (atom # atoms)
    Facts facts
    Rules ((ruleName : literals -> q) # rules)
    PrefRel prefRel
    | (literals # +∆) | -∆ | +∂ | -∂
  =>
    Atoms (atom # atoms)
    Facts facts
    Rules ((ruleName : literals -> q) # rules)
    PrefRel prefRel
    | (q # literals # +∆) | -∆ | +∂ | -∂
  if q isLiteralOfAtom atom
  /\ q notElemOf +∆ .

 crl [-∆-positive-literal] :
    Atoms (atom # atoms)
    Facts facts
    Rules rules
    PrefRel prefRel
    | +∆ | -∆ | +∂ | -∂ 
  =>
    Atoms (atom # atoms)
    Facts facts
    Rules rules
    PrefRel prefRel
    | +∆ | (atom # -∆) | +∂ | -∂
  if atom notElemOf -∆
  /\ atom notElemOf facts
  /\ atom notProvableFrom rules -∆ .

 crl [-∆-negative-literal] :
    Atoms (atom # atoms)
    Facts facts
    Rules rules
    PrefRel prefRel
    | +∆ | -∆ | +∂ | -∂ 
  =>
    Atoms (atom # atoms)
    Facts facts
    Rules rules
    PrefRel prefRel
    | +∆ | (not atom # -∆) | +∂ | -∂
  if (not atom)  notElemOf -∆
  /\ (not atom) notElemOf facts
  /\ (not atom) notProvableFrom rules -∆ .

  ops _notProvableFrom__ : Literal NamedRules Literals -> Bool .

  eq q notProvableFrom emptyRules -∆ = true .
  
  eq q notProvableFrom ((ruleName : (p # literals) -> q) # rules) (p # -∆)
  = q notProvableFrom rules (p # -∆) .

  ceq q notProvableFrom ((ruleName : literals -=~> p) # rules) -∆
  = q notProvableFrom rules -∆
  if -=~> =/= -> or p =/= q .

  --- eq q notProvableFrom ((rulename : literals -~> p) # rules) -∆
  --- = q notProvableFrom rules -∆ .

  crl [+∂-definitely] :
    Atoms (atom # atoms)
    Facts facts
    Rules rules
    PrefRel prefRel
    | (q # +∆) | -∆ | +∂ | -∂
  =>
    Atoms (atom # atoms)
    Facts facts
    Rules rules
    PrefRel prefRel
    | (q # +∆) | -∆ | (q # +∂) | -∂
  if q isLiteralOfAtom atom
  /\ q notElemOf +∂ .

  crl [+∂-defeasibly] :
    Atoms (atom # atoms)
    Facts facts
    Rules ((ruleName : literals -=> q) # rules)
    PrefRel prefRel
    | +∆ | (q' # -∆) | (literals # +∂) | -∂
  =>
    Atoms (atom # atoms)
    Facts facts
    Rules ((ruleName : literals -=> q) # rules)
    PrefRel prefRel
    | +∆ | (q' # -∆) | (q # literals # +∂) | -∂
  if q isLiteralOfAtom atom
  /\ q' == ~ q
  /\ q notElemOf +∂
  /\ f q prefRel (literals # +∂) -∂ ((ruleName : literals -=> q) # rules) .

---(
  This function handles 2.3 in the definition of +∂
  We perform recursion on the set of input rules to handle the universal quantifier.
)
  ops f_____ : Literal Module Literals Literals NamedRules -> Bool .

  eq f q prefRel +∂ -∂ emptyRules = true .

  --- Case 2.3.1
  ceq f q prefRel +∂ (p # -∂) ((ruleName : (p # literals) -=~> q') # rules)
  = f q prefRel +∂ -∂ rules
  if q' == ~ q .

  --- Case 2.3.2
  ceq f q prefRel (literals' # +∂) -∂
    (
      (ruleName : (p # literals) -=~> q') #
      (ruleName' : literals' -=> q) #
      rules
    )
  = ruleName <[prefRel] ruleName'
  and f q prefRel (literals' # +∂) -∂ ((ruleName' : literals' -=> q) # rules)
  if q' == ~ q .

  ceq f q prefRel +∂ -∂ ((ruleName : literals -=~> p) # rules)
  = f q prefRel +∂ -∂ rules
  if p =/= ~ q .

  --- eq f q prefRel +∂ -∂ rules
  --- = false [owise] .

  crl [-∂-not-defeasibly-provable-2.1] :
    Atoms (atom # atoms)
    Facts facts
    Rules rules
    PrefRel prefRel
    | +∆ | (q # -∆) | +∂ | -∂
  =>
    Atoms (atom # atoms)
    Facts facts
    Rules rules
    PrefRel prefRel
    | +∆ | (q # -∆) | +∂ | (q # -∂)
  if q isLiteralOfAtom atom
  /\ q notElemOf -∂
  /\ g q -∂ rules .

  ops g___ : Literal Literals NamedRules -> Bool .

  eq g q -∂ emptyRules = true .

  eq g q (p # -∂) ((ruleName : (p # literals) -=> q) # rules)
  = g q -∂ rules .

  ceq g q -∂ ((ruleName : literals -=~> p) # rules)
  = g q -∂ rules
  if -=~> == ~> or p =/= q .

  crl [-∂-not-defeasibly-provable-2.2] :
    Atoms (atom # atoms)
    Facts facts
    Rules rules
    PrefRel prefRel
    | (q' # +∆) | (q # -∆) | +∂ | -∂
  =>
    Atoms (atom # atoms)
    Facts facts
    Rules rules
    PrefRel prefRel
    | (q' # +∆) | (q # -∆) | +∂ | (q # -∂)
  if q isLiteralOfAtom atom
  /\ q' == ~ q
  /\ q notElemOf -∂ .

  crl [-∂-not-defeasibly-provable-2.3] :
    Atoms (atom # atoms)
    Facts facts
    Rules ((ruleName : literals -=~> q') # rules)
    PrefRel prefRel
    | +∆ | (q # -∆) | (literals # +∂) | -∂
  =>
    Atoms (atom # atoms)
    Facts facts
    Rules ((ruleName : literals -=~> q') # rules)
    PrefRel prefRel
    | +∆ | (q # -∆) | (literals # +∂) | (q # -∂)
  if q isLiteralOfAtom atom
  /\ q' == ~ q
  /\ q notElemOf -∂
  /\ h prefRel ruleName q -∂ rules .

  --- Case 2.3.2 of not defeasibly provable.
  ops h_____ : Module Qid Literal Literals NamedRules -> Bool .

---(
  h
    upModule('PREF-REL, false)
    'r2
    (not 'r)
    ('q # 'r # not 'p # not 'q)
    (('r1 : 'p -> 'r) # ('r2 : 'p -> not 'r))

    'r1 < 'r2
)
  eq h prefRel ruleName q -∂ emptyRules = true .

  eq h prefRel ruleName q (p # -∂) ((ruleName' : (p # literals) -=> q) # rules)
  = h prefRel ruleName q (p # -∂) rules .

  eq h prefRel ruleName q -∂ ((ruleName' : literals -=> q) # rules)
  = not (ruleName <[prefRel] ruleName')
  and h prefRel ruleName q -∂ rules .

  ceq h prefRel ruleName q -∂ ((ruleName' : literals -=~> p) # rules)
  = h prefRel ruleName q -∂ rules
  if -=~> == ~> or p =/= q .

endm