mod TEST is
  pr QID .
  pr BOOL .
  
  sorts Relationship Person .
  ops parent grandparent child : -> Relationship .
  subsort Qid < Person .
  
  op _ is a _ of _ : Person Relationship Person -> Bool .

  sort Goal .
  subsort Bool < Goal .
  op _ , _ : Goal Goal -> Goal
    [assoc id: true prec 121 format (d r os d)] .

  sorts Configuration Explanation Explanations .
  subsort Explanation < Explanations .

  op < _ | _ > : Goal Explanations -> Configuration [ctor] .

  op _ because it is a fact : Bool -> Explanation .
  op _ because _ : Bool Bool -> Explanation .

  op nil : -> Explanations [ctor] .
  op _ , _ : Explanations Explanations -> Explanations 
    [assoc id: nil prec 121 format (d r os d)] .

  op < _ > : Goal -> Configuration .

  var goal : Goal .

  eq < goal > = < goal | nil > . 

  --- class State |
  ---   goal : Goal,
  ---   explanations : Explanations .
  
  var explanations : Explanations .

  --- :- 'A is a parent of 'B
  rl [fact-1] :
    < 'A is a parent of 'B, goal | explanations >
  =>
    < goal | explanations, ('A is a parent of 'B) because it is a fact >
  [narrowing] .

  --- :- 'B is a parent of 'C
  rl [fact-2] :
    < 'B is a parent of 'C, goal | explanations >
  =>
    < goal | explanations, ('B is a parent of 'C) because it is a fact >
  [narrowing] .

  vars X Y Z : Qid .

  --- X is a child of Y :- Y is a parent of X
  rl [child] :
    < X is a child of Y, goal | explanations >
  =>
    < Y is a parent of X, goal | explanations, (X is a child of Y) because (Y is a parent of X) >
  [narrowing] .

  --- X is a gradparent of Y :- X is a parent of Z, Z is a parent of Y
  rl [grandparent] :
    < X is a grandparent of Y, goal | explanations >
  =>
    < X is a parent of Z, Z is a parent of Y, goal | explanations, (X is a grandparent of Y) because (X is a parent of Z and Z is a parent of Y) >
  [narrowing nonexec] .

  --- vars goal' goal'' : Goal .

  --- crl [eval-and-explain] :
  ---   < goal, goal' | explanations >
  --- =>
  ---   < goal'', goal' | explanations >
  --- if < goal > => < goal'' > .

endm

vu-narrow
  < p1:Person is a grandparent of p2:Person >
=>!
  < true | exps:Explanations > .