mod TEST is
  pr QID .
  pr BOOL .
  
  sorts Relationship Person .
  ops parent grandparent child : -> Relationship .
  subsort Qid < Person .
  
  op _ is a _ of _ : Person Relationship Person -> Bool .

  sort HornBody .
  subsort Bool < HornBody .
  op _ , _ : HornBody HornBody -> HornBody
    [assoc id: true prec 121 format (d r os d)] .

  sorts Configuration Explanation Explanations .
  subsort Explanation < Explanations .

  op < _ | _ > : HornBody Explanations -> Configuration .

  op _ because it is a fact : Bool -> Explanation .
  op _ because _ : Bool Bool -> Explanation .

  op nil : -> Explanations [ctor] .
  op _ , _ : Explanations Explanations -> Explanations 
    [assoc id: nil prec 121 format (d r os d)] .
  
  var hornBody : HornBody .
  var explanations : Explanations .

  --- :- 'A is a parent of 'B
  rl [fact-1] :
    < 'A is a parent of 'B, hornBody | explanations >
  =>
    < hornBody | ('A is a parent of 'B) because it is a fact, explanations >
  [narrowing] .

  --- :- 'B is a parent of 'C
  rl [fact-2] :
    < 'B is a parent of 'C, hornBody | explanations >
  =>
    < hornBody | ('B is a parent of 'C) because it is a fact, explanations >
  [narrowing] .

  vars X Y Z : Qid .

  --- X is a child of Y :- Y is a parent of X
  rl [child] :
    < X is a child of Y, hornBody | explanations >
  =>
    < Y is a parent of X, hornBody | (X is a child of Y) because (Y is a parent of X), explanations >
  [narrowing] .

  --- X is a gradparent of Y :- X is a parent of Z, Z is a parent of Y
  rl [grandparent] :
    < X is a grandparent of Y, hornBody | explanations >
  =>
    < X is a parent of Z, Z is a parent of Y, hornBody | (X is a grandparent of Y) because (X is a parent of Z, Z is a parent of Y), explanations >
  [narrowing nonexec] .

  --- vars hornBody' hornBody'' : HornBody .

  --- crl [eval-and-explain] :
  ---   < hornBody, hornBody' | explanations >
  --- =>
  ---   < hornBody'', hornBody' | explanations >
  --- if < hornBody > => < hornBody'' > .

endm

vu-narrow
  < p:Person is a grandparent of 'C, true | nil >
=>*
  < true | exps:Explanations > .