load model-checker
load full-maude

(omod JUGS is
  protecting NAT .
  protecting LIST{Nat} .
  protecting INT .
  protecting QID .

  subsorts Qid < Oid .

  class Jug |
    maxCap : Nat,
    currCap : Int .

  vars J J' : Oid .
  vars maxCap maxCap' n n' : Nat .
  vars currCap currCap' : Int .
  vars ns : List{Nat} .

  ops mkJugs_ : List{Nat} -> Configuration .
  eq mkJugs nil = none .
  eq mkJugs (n ns) =
    < 'J : Jug | maxCap : n, currCap : 0 >
    mkJugs ns .

  --- ops initial : -> Configuration .
  --- eq initial = mkJugs 4 . 

  rl [fill-jug] :
    < J : Jug |
      maxCap : maxCap,
      currCap : currCap >
  =>
    < J : Jug |
      maxCap : maxCap,
      currCap : maxCap > .
  
  rl [empty-jug] :
    < J : Jug |
      currCap : currCap >
  =>
    < J : Jug |
      currCap : 0 > .

  crl [transfer-full] :
    < J : Jug |
      maxCap : maxCap,
      currCap : currCap >
    < J' : Jug |
      maxCap : maxCap',
      currCap : currCap' >
  =>
    < J : Jug |
      maxCap : maxCap,
      currCap : 0 >
    < J' : Jug |
      maxCap : maxCap',
      currCap : currCap + currCap' >
  if currCap + currCap' <= maxCap' .

  crl [transfer-partial] :
    < J : Jug |
      maxCap : maxCap,
      currCap : currCap >
    < J' : Jug |
      maxCap : maxCap',
      currCap : currCap' >
  =>
    < J : Jug |
      maxCap : maxCap,
      currCap : currCap + - (maxCap' + - currCap') >
    < J' : Jug |
      maxCap : maxCap',
      currCap : maxCap' >
  if currCap + currCap' > maxCap' .

endom)

(omod ATOMIC-PROPS is
  protecting JUGS .
  including MODEL-CHECKER + SATISFACTION . 

  subsorts Configuration < State .

  vars config : Configuration .
  vars J : Oid .
  vars cap : Nat .

---(
  (someJugHasCap cap) is a proposition which says that the current state
  contains a jug filled with cap amount of water.
)
  ops someJugHasCap_ : Nat -> Prop .
  eq < J : Jug | currCap : cap > config |= someJugHasCap cap
  = true .

endom)

(smod JUGS-STRAT is
  protecting JUGS .
  protecting ATOMIC-PROPS .

  vars config : Configuration .
  vars cap : Nat .

---(
  Simple goal directed execution strategy, in which we try to find a
  configuration where some jug contains cap amount of water.

  Note that as per the semantics of the strategy language (see Propositions
  5 and 6 of https://eprints.ucm.es/id/eprint/67449/1/slang.pdf), in the presence
  of a finite state space, the strategy language covers the whole space of
  omega-regular expressions.
  By the papers cited in  
  https://cs.stackexchange.com/questions/108/equivalence-of-b%C3%BCchi-automata-and-linear-mu-calculus
  omega-regexs have the same expressive power as Buchi automata and the _linear_
  time mu calculus. (basically LTL augmented with fixed point operators).
  This is strictly more expressive than LTL and incomparable with CTL.
  Of course, the full modal mu calculus is still the most expressive temporal logic
  out there (I think).

  In particular, this strategy is equivalent to the linear time mu calculus
  formula
  mu X. someJugHasCap cap \/ (not someJugHasCap cap /\ O X)

  Note that this is NOT the same as the LTL formula (<> someJugHasCap cap)
  because the former says that we begin searching from the initial state of the
  transition system (viewed as a Kripke structure) and then stop the instant
  we reach a state in which the state formula (someJugHasCap cap) holds.

  In other words, every model of this formula will have goal states and these
  goal states will not have any outgoing transitions.
  Moreover, there cannot be any other dead-end states other than these goal states.

  The umaudemc tool allows us to visualize all traces in the original
  transition system that satisfy the given linear time mu calculus formula.
  More precisely, we can compute a maximal witness of this formula
  (maximal in the lattice of subtructures of the transition system rooted at the
  initial state, defined by the above rewriting rules).

  This lets us generate a DFA showing all possible ways of reaching goal states.
  For the PDPA use case, this lets us visualize every single trace leading up
  to the race condition.
)
  strat simple : Nat @ Configuration .

  --- mu X.
  sd simple(cap) :=
    --- someJugHasCap cap
    match config s.t.
      config |= someJugHasCap cap
    --- \/ (not someJugHasCap cap /\
    or-else
      --- O
      all ;
      --- X)
      simple(cap) .

endsm)

(show all .)

quit

set trace on .
trace exclude FULL-MAUDE .

(srewrite
  mkJugs (1 4) using simple(3)
.)