fmod SYNTAX is
  pr BOOL * (
    --- op _xor_ to _or_`but`not`both
  ) .
  pr RAT * (
    op _<_ to _is`less`than_,
    op _>_ to _is`greater`than_,
    op _<=_ to _is`less`than`or`equal`to_,
    op _>=_ to _is`greater`than`or`equal`to_,
    op _+_ to the`sum`of_and_,
    op _-_ to _subtracted`by_,
    op min to the`smaller`of_and_,
    op max to the`larger`of_and_
  ) .
  pr STRING * (
    op _+_ to the`concatenation`of_and_,
    op length to the`length`of_,
    op _<_ to _is`lexicographically`less`than_,
    op _>_ to _is`lexicographically`greater`than_,
    op _<=_ to _is`lexicographically`less`than`or`equal`to_,
    op _>=_ to _is`lexicographically`greater`than`or`equal`to_
  ) .
  pr QID-LIST .
  --- pr STRING * (
  ---   op _+_ to _++_,
  ---   op _<_ to _<str_,
  ---   op _>_ to _>str_,
  ---   op _<=_ to _<=str_,
  ---   op _>=_ to _>=str_
  --- ) .

  sort Universal .
  sorts Decide DecideBody DecideBodies .
  sorts IsA IsAs Given Giveth RelPred .
  sort BoolList .

  subsort QidList < Rat .
  subsort IsA < IsAs .
  subsort Bool < BoolList .

  sort Datatype .
  op number : -> Datatype .
  op string : -> Datatype .
  op boolean : -> Datatype .

  --- ops _AND_ _OR_ : Bool Bool -> Bool [assoc comm] .
  --- sort AnyAll .
  --- ops ANY ALL : -> AnyAll .

  sort Qualifier AllQualifier .
  op all : -> AllQualifier .
  ops at`least`one exactly`one : -> Qualifier .
  op _ of the following are true • _ : AllQualifier BoolList -> Bool .
  op _ of the following is true • _ : Qualifier BoolList -> Bool .
  op _ • _ : BoolList BoolList -> BoolList [assoc prec 25] .

  --- op NOT _ : Bool -> Bool .

  --- op _ IS _ : Universal Universal -> Bool [poly (1 2)] .

  --- op in _ : Universal -> Bool [poly (1)] .
  --- op not in _ : Universal -> Bool [poly (1)] .

  sort As AsList FnApp .
  subsorts As < AsList .
  subsort Qid < As FnApp .
  op _ as _ : Qid Universal -> As [poly (2)] .
  op _ with _ : Qid AsList -> FnApp .
  op _ and  _ : AsList AsList -> AsList [assoc comm prec 25] .
  op _ is equal to _ : FnApp Universal -> Bool [poly (2)] .

  --- sort BulletList .
  --- op _ • _ : BulletList BulletList -> BulletList [assoc prec 25] .

  op _ is in the list given by • _ :
    FnApp Universal -> Bool [poly (2)] .
  op _ is in the list given by _ :
    FnApp Universal -> Bool [poly (2)] .
  op _ is not in the list given by • _ :
    FnApp Universal -> Bool [poly (2)] .
  op _ is not in the list given by _ :
    FnApp Universal -> Bool [poly (2)] .

  --- ops _is`less`than_ _is`greater`than_ :
  ---   Rat Rat -> Bool [prec 37].
  --- ops _is`less`than`or`equal`to_ _is`greater`than`or`equal`to_ :
  ---   Rat Rat -> Bool [prec 37] .

  sort WhichIs .
  op which is equal to : -> WhichIs .

  op _ _ _ • _ : Given IsA WhichIs DecideBodies -> Decide .
  op _ _ _ _ : Given IsA WhichIs DecideBody -> Decide .

  op _ _ _ _ : Given IsA WhichIs Rat -> Decide .
  op _ _ _ _ : Given IsA WhichIs String -> Decide .
  op _ _ _ _ : Given IsA WhichIs Bool -> Decide .

  sort TFAE .
  op the following are equivalent : -> TFAE .
  op TFAE : -> TFAE .
  op _ _ • _ : Given TFAE BoolList -> Decide .
  op _ _ : Given BoolList -> Decide .

  --- op _ THEN TFAE • _ : Given BoolList -> Decide .

  --- op _ THEN _ WHICH IS ALWAYS EQUAL TO _ :
  ---   Given IsA Universal -> Decide [poly (2)] .
  op Let _ be a _ which is equal to _ :
    Qid Datatype Universal -> Decide [poly (3)] .

  --- op ALWAYS _ : Universal -> DecideBody [poly (1)] .

  sort WhenIf .
  ops when if : -> WhenIf .

  sort Otherwise .
  op otherwise : -> Otherwise .

  sort DecideOwise .
  subsort DecideOwise < DecideBody .
  op _ _ _ : Universal WhenIf Bool -> DecideBody [poly (1)] .
  op _ _ : Universal Otherwise -> DecideOwise [poly (1)] . 

  subsort DecideBody < DecideBodies .
  op _ • _ : DecideBodies DecideBodies -> DecideBodies [assoc prec 25] .

  op _ is a  _ : Qid Datatype -> IsA .
  --- op _ IS _ : Qid Universal -> IsA [poly (2)] .
  op _ and _ : IsAs IsAs -> IsAs [assoc comm prec 25] .
  op _ • _ : IsAs IsAs -> IsAs [assoc comm prec 25] .

  --- §
  op Given that _ , : IsAs -> Given .
  op Given that • _ , : IsAs -> Given .
  --- op GIVETH _ : IsAs -> Giveth .

  subsort Decide < RelPred .
  op _ _ : Given Decide -> RelPred .
  --- op _ _ _ : Given Giveth Decide -> RelPred .

  sort RelPreds .
  subsort RelPred < RelPreds .
  op _. _ : RelPreds RelPreds -> RelPreds
    [assoc prec 121 format (d r os d)] .
  
  var relPreds : RelPreds .
  eq relPreds . relPreds = relPreds .

  sort Strings .
  subsort String < Strings .
  op _ • _ : Strings Strings -> Strings
    [assoc comm prec 25] .

  op the amount by which _ exceeds _ : Rat Rat -> Rat .

endfm

--- red
---   the length of (the concatenation of "a" and "b")
---   is greater than (the sum of 0 and 1) .

--- eof

--- view RelPred from TRIV to SYNTAX is
---   sort Elt to RelPred .
--- endv

fmod SYNTAX-EXAMPLES is
  pr SYNTAX .

  op eg0 : -> RelPreds .
  eq eg0
  = --- AnyAll trees normalize to a tree of nested and/or.
    --- Thereafter, Maude rewrites terms in all possible evaluation context
    --- to simplify the formula to full head normal form.
    Given that
      • ('x is a number)
      • ('y is a string),
    'z is a number which is equal to
      • (2 when ('x is greater than 10 or 'y is equal to "a"))
      • (3 when at least one of the following is true
          • (all of the following are true
              • (the length of (the concatenation of "a" and "b") is less than
                or equal to the amount by which 0 exceeds 2)
              • ('x is less than 5))
          • ('y is not in the list given by
              • "b"
              • "c"
              • "d"))
      • (0 otherwise) .

    --- Given that 'x is a number, 'b is a boolean which is equal to
    ---   • (true when all of the following are true
    ---       • ('x is greater than or equal to 0)
    ---       • ('z with 'x and ('y as "a") is equal to 1))
    ---   • (false otherwise) .

    --- Given that 'str is a string, 'const is a string which is equal to
    --- "constant" .

    --- Let 'one be a number which is equal to 1 .

    --- --- This should normalize into a round robin of implications.
    --- Given that 
    ---   • ('x is a number)
    ---   • ('y is a number),
    --- the following are equivalent
    ---   • ('x is equal to 'y)
    ---   • ('x is less than or equal to 'y and 'x is greater than or equal to 'y) .

    --- --- This should normalize into xor.
    --- Given that
    ---   • ('x is a number)
    ---   • ('y is a number),
    --- exactly one of the following is true
    ---   • ('x is less than 'y)
    ---   • ('x is equal to 'y)
    ---   • ('x is greater than 'y) .

  --- var qidList : QidList .
  --- var result : Rat .

  --- ceq qidList = result
  --- if

endfm

--- red eg1 .

--- parse
---  
--- .

--- mod TEST is
---   pr SYNTAX .

---   ceq 'z IS 2 if 0 < 'x and 'y IS "a" .
---   eq 'z IS 0 [owise] .

---   --- eq 'y IS "a" = true .
---   --- eq 0 < 'x = true .

--- endm

--- rew 'z .