sload syntax

--- mod TEST is
---   protecting SYNTAX .
---   op relPreds : -> RelPreds .
---   eq relPreds
---   = DECIDE 'z IS (0 WHEN 'x > 0) .
--- endm

fmod SEMANTICS is
  pr SYNTAX .
  pr SYNTAX-EXAMPLES .

  --- pr META-LEVEL .

  --- sorts Eqn EqnList .
  --- subsort Eqn < EqnList .

  --- op _ _ : EqnList EqnList -> EqnList [assoc comm prec 25] .

  --- op ceq _ = _ if _ . : QidList Universal Bool -> Eqn [ctor poly (2)] .
  --- op eq _ = _ [owise] . : QidList Universal -> Eqn [ctor poly (2)] .

  --- var decideHead : QidList .
  --- var decideBodies : DecideBodies .
  --- var bool : Bool .
  --- var relPreds : RelPreds .
  --- var result : Universal .

  --- op transform_ : RelPred -> EqnList .

  --- eq transform
  ---   (
  ---     DECIDE decideHead IS
  ---       (result WHEN bool)
  ---   )
  --- = (
  ---   ceq decideHead = result if bool .
  --- ) .

  var given : Given .
  var decideHead : IsA .
  var decideBody : DecideBody .
  var decideBodies : DecideBodies .

  eq
    given decideHead which is equal to
    • (decideBody • decideBodies)
  = given decideHead which is equal to • decideBody .
    given decideHead which is equal to • decideBodies .

  var bool : Bool .
  var bools : BoolList .

  eq all of the following are true • bool
  = bool .

  eq all of the following are true • (bool • bools)
  = bool and (all of the following are true • bools) .

  eq at least one of the following is true • bool 
  = bool .

  eq at least one of the following is true • (bool • bools)
  = bool or (at least one of the following is true • bools) .

  eq exactly one of the following is true • bool 
  = bool .

  eq exactly one of the following is true • (bool • bools)
  = bool xor (at least one of the following is true • bools) .

  vars x y : Rat .

  --- ceq x is equal to y
  --- = x == y
  --- if not (x :: Qid) /\ not (y :: Qid) .

  --- eq x is less than y
  --- = x < y .

  --- eq x is less than or equal to y
  --- = x <= y .

  --- eq x is greater than y
  --- = x > y .

  --- eq x is greater than or equal to y
  --- = x >= y .

  op _ :: _ : Qid Datatype -> IsA .
  --- op _ _ : IsAs IsAs -> IsAs [assoc prec 25] .

  --- sort Lambda .
  --- op λ _ :: _ ⇒ _ : IsAs Datatype Universal -> Lambda [poly (3)] .

  --- Homoiconicity go brrr
  op ceq _ _ = _ : Qid IsAs DecideBody -> RelPred .
  op eq _ _ = _ : Qid IsAs DecideBody -> RelPred .

  op [owise] : -> Otherwise .

  var identifier : Qid .
  var datatype : Datatype .
  
  eq identifier is a datatype = identifier :: datatype .

  var isAs : IsAs .

  eq Given that • isAs , = Given that isAs , .

  eq when = if .
  eq otherwise = [owise] .

  var decideOwise : DecideOwise .

  eq
    Given that isAs,
    identifier :: datatype which is equal to
    • decideOwise
  = (eq identifier isAs = decideOwise) .

  eq
    Given that isAs,
    identifier :: datatype which is equal to
    • decideBody
  = (ceq identifier isAs = decideBody) [owise] .

  --- Still figuring out what to do with this.
  sort Context Binding Judgment .
  subsort Binding < Context .
  subsort Judgment < RelPred .

  --- < Identifier, type, binding >
  --- Consider using http://maude.cs.uiuc.edu/tools/createcinni/
  --- to ease the pain of working with de bruijn indices and explicit
  --- substitutions.
  op < _, _, _ > : Qid Datatype Universal -> Binding [poly (2)] .
  op emptyContext : -> Context .
  op _ _ : Context Context -> Context [assoc comm id: emptyContext] .

  op _ ⊢ _ : Context Universal -> Judgment [poly (2)] .

  --- pr META-LEVEL .
  --- pr SYNTAX .

  --- op test : -> Module .
  --- eq test
  --- = (
  ---   mod 'TEST is
  ---     protecting 'SYNTAX .
  ---     sorts none .
  ---     none
  ---     op 'relPreds : nil -> 'RelPreds [none] .
  ---     none none
  ---     eq 'relPreds.RelPreds
  ---     = 'DECIDE_IS_[''z.Qid,'_WHEN_['0.Zero,'_>_[''x.Qid,'0.Zero]]] [none] .
  ---     none
  ---   endm
  --- ) .

  --- subsort Qid < Oid .

  --- sort BoolList .
  --- subsort Bool < BoolList .
  --- op nil : -> BoolList .
  --- op _, _ : BoolList BoolList -> BoolList [assoc id: nil prec 25] .

  --- class ProverState |
  ---   rules : RelPreds,
  ---   goals : BoolList .

  --- op < _ | _ > : Set{RelPred} List{Bool} -> Configuration .

  eq the amount by which x exceeds y
  = the larger of (x subtracted by y) and 0 .

endfm