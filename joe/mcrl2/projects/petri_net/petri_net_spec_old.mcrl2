% Names of places and transitions.
sort Place = struct p0 | p1 | p2 | p3 | p4 | p5;
sort Trans_name = struct t0 | t1 | t2 | t3;

% Transitions are represented as product/record types as below.
% They are identified with their incoming and outgoing arcs.
sort Trans = struct trans(
  trans_name : Trans_name,   % Name of the transition.
  guard : Bool,              % Guard condition.
  priority : Nat,            % Priority of the transition.
  from : List(PlaceTokens),  % Input places and their respective multiplicities.
  to : List(PlaceTokens)     % Output places and their respective multiplicities.
);

sort HistoryLogEntry = struct history_log_entry(
  fired_trans : Trans_name,
  old_marking : Marking,
  new_marking : Marking
);

% Note that while it would be nice to parameterize the guard condition over
% the marking here, mcrl2 doesn't like fields of type Marking -> Bool.
% So what we do instead is we parameterize the list of all transitions over
% the current marking, so that we have
%       transitions : Marking -> List(Trans)
% This allows us to evaluate the guared condition based on the current marking.

sort PlaceTokens = struct place_tokens(
  place' : Place,
  tokens' : FBag(Token)
);

sort MarkingTrans = struct marking_trans(
  marking' : Marking,
  trans_name' : Trans_name
);

% Type of (colored) tokens and markings.
sort Token = Nat;
sort Marking = Place -> FBag(Token);

map
  % Initial marking.
  initial_marking : Marking;

  % List of all transitions in the petri net.
  transitions : Marking -> List(Trans);

  % Determines if a transitions is enabled under a given marking.
  is_enabled : Marking # Trans -> Bool;

  % Determines if a transition has the highest priority of compared to all the
  % curently enabled transitions.
  has_highest_priority : Marking # Trans -> Bool;

  % Here we allow all transitions to be guarded based on the state (ie marking)
  % of the petri net.
  % guard : Marking -> Trans_name -> Bool;

  % Functions to move tokens around to update a marking when firing a transition.
  remove_tokens : Marking # List(PlaceTokens) -> Marking;
  add_tokens : Marking # List(PlaceTokens) -> Marking;

  fire_trans_fn : Marking # Trans -> Marking;

  has_token : Marking # Place -> Bool;

  % bounded : Nat # Marking -> Bool;

var
  marking : Marking,
  p : Place, t : Trans, tokens, tokens1 : FBag(Token), token : Token, token' : Token,
  tname : Trans_name;
  place_tokenss : List(PlaceTokens),
  M : Nat;

eqn
  % The initial marking assigns p0 2 tokens of value 0, and none to all the
  % other places.
  initial_marking =
    (lambda p : Place. {:})[p0 -> {0: 2}];

  % This defines a simple fork-join.
  % p0 - [0] -> t0 - [1] -> p1 - [1] -> t1 - [3] -> p3 - [3] -> t3 - [5] -> t5 
  %             t0 - [2] -> p2 - [2] -> t2 - [4] -> p4 - [4] -> t3
  % We also add an inhibitor arc from p2 to t1.
  transitions(marking) = [
    trans(
      % By default, all transitions have no guard and have a priority of 999.
      t0, true, 999,
      [place_tokens(p0, {0: 1})],
      [place_tokens(p1, {1: 1}), place_tokens(p2, {2: 1})]
    ),
    trans(
      t1,
      % This guard condition is equivalent to adding an inibitor arc from
      % p2 to t1.
      has_token(marking, p2),
      999,
      [place_tokens(p1, {1: 1})],
      [place_tokens(p3, {3: 1})]
    ),
    trans(
      t2, true, 999,
      [place_tokens(p2, {2: 1})],
      [place_tokens(p4, {4: 1})]
    ),
    trans(
      t3, true, 999,
      [place_tokens(p3, {3: 1}), place_tokens(p4, {4: 1})],
      [place_tokens(p5, {5: 1})]
    )
  ];

  % This says that a transition with the name tname is enabled given a marking
  % if there are enough tokens and the guard condition is met.
  is_enabled(marking, t) =
    forall p : Place, tokens : FBag(Token).
      ((place_tokens(p, tokens) in from(t)) => (tokens <= marking(p)))
      && guard(t);

  % This condition says that a transition t has the highest priority of all
  % enabled transitions.
  % More formally, for all other transitions t', if t' is enabled, then the
  % priority of t must be <= priority of t'.
  has_highest_priority(marking, t) =
    forall t' : Trans. t' in transitions(marking) =>
      is_enabled(marking, t') => (priority(t) <= priority(t'));

  % is_enabled(marking, tname) =
  %   is_enabled_unguarded(marking, tname);
    % && exists b : Bool, l1 : List(PlaceTokens), l2 : List(PlaceTokens).
    %     b && b(l1, l2) in transitions(marking);
    % is_enabled_unguarded(marking, t) && guard(marking)(trans_name(t));

  remove_tokens(marking, []) = marking;
  remove_tokens(marking, place_tokens(p, tokens) |> place_tokenss) =
    remove_tokens(marking, place_tokenss)[p -> marking(p) - tokens];

  add_tokens(marking, []) = marking;
  add_tokens(marking, place_tokens(p, tokens) |> place_tokenss) =
    add_tokens(marking, place_tokenss)[p -> marking(p) + tokens];

  fire_trans_fn(marking, t) =
    add_tokens(remove_tokens(marking, from(t)), to(t));

  has_token(marking, p) =
    exists token : Token. token in marking(p);

act
  % Atomic action representing the firing of a transition.
  fire_trans : Trans_name;
  get_tokens : Place # FBag(Token);

  add_to_log_s, add_to_log_r, add_to_log : Trans_name # Marking # Marking;

proc
  PetriNet(marking : Marking) =
    sum p : Place. get_tokens(p, marking(p))
    % For each transition in the list of all transitions, we check if it's enabled
    % and if it has the highest priority of all the enabled transitions.
    % If so, we perform an action indicating that the transition has been fired
    % and go to the next state.
    % Note here that we use add_tokens and remove_tokens accordingly to move the
    % tokens around the marking.
    + sum t : Trans.
        (t in transitions(marking)
        && is_enabled(marking, t)
        && has_highest_priority(marking, t)) -> (
          fire_trans(trans_name(t)) .
          % |add_to_log_s(trans_name(t), marking, fire_trans_fn(marking, t)) .
          PetriNet(fire_trans_fn(marking, t))
        );

  History(history : List(HistoryLogEntry)) =
    sum t : Trans_name, old_marking' : Marking, new_marking' : Marking.
      add_to_log_r(t, old_marking', new_marking') .
      History(history_log_entry(t, old_marking', new_marking') |> history);

init
  hide({
    add_to_log
  },
  block({
    add_to_log_r, add_to_log_s
  },
  comm({
    add_to_log_s|add_to_log_r -> add_to_log
  },
  PetriNet(initial_marking)
  % || History([])
  )));