#define INDEX_BOUND__ 724// These values are not used anymore.
#define ARITY_BOUND__ 9// These values are not used anymore.
#include "mcrl2/data/detail/rewrite/jittycpreamble.h"
namespace {
// Anonymous namespace so the compiler uses internal linkage for the generated
// rewrite code.

struct rewr_functions
{
  // A rewrite_term is a term that may or may not be in normal form. If the method
  // normal_form is invoked, it will calculate a normal form for itself as efficiently as possible.
  template <class REWRITE_TERM>
  static data_expression local_rewrite(const REWRITE_TERM& t, RewriterCompilingJitty* this_rewriter)
  {
    return t.normal_form();
  }

  static const data_expression& local_rewrite(const data_expression& t, RewriterCompilingJitty* )
  {
    return t;
  }

  template < class HEAD, class DATA_EXPR0 >
  class delayed_application1
  {
    protected:
      const HEAD& m_head;
      const DATA_EXPR0& m_arg0;
      RewriterCompilingJitty* this_rewriter;

    public:
      delayed_application1(const HEAD& head, const DATA_EXPR0& arg0, RewriterCompilingJitty* tr)
        : m_head(head), m_arg0(arg0), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(m_head,this_rewriter), local_rewrite(m_arg0,this_rewriter)), this_rewriter);
      }

  };
  template < class HEAD, class DATA_EXPR0, class DATA_EXPR1 >
  class delayed_application2
  {
    protected:
      const HEAD& m_head;
      const DATA_EXPR0& m_arg0;
      const DATA_EXPR1& m_arg1;
      RewriterCompilingJitty* this_rewriter;

    public:
      delayed_application2(const HEAD& head, const DATA_EXPR0& arg0, const DATA_EXPR1& arg1, RewriterCompilingJitty* tr)
        : m_head(head), m_arg0(arg0), m_arg1(arg1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(m_head,this_rewriter), local_rewrite(m_arg0,this_rewriter), local_rewrite(m_arg1,this_rewriter)), this_rewriter);
      }

  };
  template < class HEAD, class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2 >
  class delayed_application3
  {
    protected:
      const HEAD& m_head;
      const DATA_EXPR0& m_arg0;
      const DATA_EXPR1& m_arg1;
      const DATA_EXPR2& m_arg2;
      RewriterCompilingJitty* this_rewriter;

    public:
      delayed_application3(const HEAD& head, const DATA_EXPR0& arg0, const DATA_EXPR1& arg1, const DATA_EXPR2& arg2, RewriterCompilingJitty* tr)
        : m_head(head), m_arg0(arg0), m_arg1(arg1), m_arg2(arg2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(m_head,this_rewriter), local_rewrite(m_arg0,this_rewriter), local_rewrite(m_arg1,this_rewriter), local_rewrite(m_arg2,this_rewriter)), this_rewriter);
      }

  };
  // We're declaring static members in a struct rather than simple functions in
  // the global scope, so that we don't have to worry about forward declarations.
  // [38] latest_marking: List(HistoryLogEntry) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_38_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(new_marking(head(@var_0))(@var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_70_2(rewr_69_1(local_rewrite(var_0, this_rewriter),  this_rewriter), var_1,  this_rewriter); // R1 new_marking(head(@var_0))(@var_1)
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf916f50))), local_rewrite(arg_not_nf0,this_rewriter)), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_38_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_38_2(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_38_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_38_2(down_cast<application>(t.head())[0], t[0], this_rewriter); }


  // [38] latest_marking: List(HistoryLogEntry) -> Place -> List(Nat)
  template < class DATA_EXPR0>
  static inline data_expression rewr_38_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@R(new_marking(head(@var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      return rewr_70_1(rewr_69_1(local_rewrite(var_0, this_rewriter),  this_rewriter),  this_rewriter); // R1 new_marking(head(@var_0))
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf916f50))), local_rewrite(arg_not_nf0,this_rewriter));
  }

  static inline data_expression rewr_38_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_38_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_38_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_38_1(t[0], this_rewriter); }


  // [38] latest_marking: List(HistoryLogEntry) -> Place -> List(Nat)
  static inline const data_expression& rewr_38_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa67950);
  }

  static inline data_expression rewr_38_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_38_0(this_rewriter); }

  static inline data_expression rewr_38_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_38_0(this_rewriter); }


  // [68] tokens_eq: List(Nat) # List(Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_68_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@R(tokens_subset_of(@var_0, @var_1) && tokens_subset_of(@var_1, @var_0)))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      return rewr_49_2(rewr_45_2(var_0, var_1,  this_rewriter), delayed_rewr_45_2<data_expression, data_expression>(var_1, var_0,  this_rewriter),  this_rewriter); // R1 tokens_subset_of(@var_0, @var_1) && tokens_subset_of(@var_1, @var_0)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf917ee0))), arg0, arg1);
  }

  static inline data_expression rewr_68_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_68_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_68_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_68_2(t[0], t[1], this_rewriter); }


  // [45] tokens_subset_of: List(Nat) # List(Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_45_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_45_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_45_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [68] tokens_eq: List(Nat) # List(Nat) -> Bool
  static inline const data_expression& rewr_68_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa68270);
  }

  static inline data_expression rewr_68_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_68_0(this_rewriter); }

  static inline data_expression rewr_68_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_68_0(this_rewriter); }


  // [45] tokens_subset_of: List(Nat) # List(Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_45_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall token: Nat. token in @var_0 => token in @var_1))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(0), rewr_48_2(rewr_67_2(static_cast<const data_expression&>(this_rewriter->bound_variable_get(0)), local_rewrite(var_0, this_rewriter),  this_rewriter), delayed_rewr_67_2<data_expression, DATA_EXPR1>(static_cast<const data_expression&>(this_rewriter->bound_variable_get(0)), var_1,  this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall token: Nat. token in @var_0 => token in @var_1
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf917190))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_45_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_45_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_45_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_45_2(t[0], t[1], this_rewriter); }


  // [67] in: Nat # List(Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_67_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_67_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_67_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [45] tokens_subset_of: List(Nat) # List(Nat) -> Bool
  static inline const data_expression& rewr_45_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf9ce9f0);
  }

  static inline data_expression rewr_45_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_45_0(this_rewriter); }

  static inline data_expression rewr_45_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_45_0(this_rewriter); }


  // [57] remove_tokens_helper: List(Nat) # List(Nat) -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_57_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F([], @@D(@@N(@@S(@var_0, @@R(@var_0)))), @@X)
    {
      if (uint_address(arg0) == 0x55a6cf9167a0) // F1
      {
        const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
        return local_rewrite(var_0, this_rewriter); // R1 @var_0
      }
      else
      {
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(|>, @@S(@var_0, @@N(@@S(@var_1, @@D(@@N(@@S(@var_2, @@R(remove_tokens_helper(@var_1, remove_token(@var_0, @var_2))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917ac0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = arg1; // S1a
        return rewr_57_2(var_1, delayed_rewr_63_2<data_expression, data_expression>(var_0, var_2,  this_rewriter),  this_rewriter); // R1 remove_tokens_helper(@var_1, remove_token(@var_0, @var_2))
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9176d0))), arg0, arg1);
  }

  static inline data_expression rewr_57_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_57_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_57_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_57_2(t[0], t[1], this_rewriter); }


  // [63] remove_token: Nat # List(Nat) -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_63_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_63_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_63_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [57] remove_tokens_helper: List(Nat) # List(Nat) -> List(Nat)
  static inline const data_expression& rewr_57_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa682a0);
  }

  static inline data_expression rewr_57_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_57_0(this_rewriter); }

  static inline data_expression rewr_57_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_57_0(this_rewriter); }


  // [63] remove_token: Nat # List(Nat) -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_63_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@N(@@F([], @@R([]), @@X))
    {
      if (uint_address(arg1) == 0x55a6cf9167a0) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa67920); // R1 []
      }
      else
      {
      }
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@S(@var_0, @@N(@@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@C(@var_0 != @var_1, @@R(remove_token(@var_0, @var_2)), @@C(@var_0 == @var_1, @@R(@var_2), @@D(@@X)))))), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf917ac0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg1[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg1[2]); // S2
        if (rewr_66_2(var_0, var_1,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_63_2(var_0, var_2,  this_rewriter); // R1 remove_token(@var_0, @var_2)
        }
        else
        {
          if (rewr_65_2(var_0, var_1,  this_rewriter) == sort_bool::true_()) // C
          {
            return var_2; // R1 @var_2
          }
          else
          {
          }
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf917a30))), arg0, arg1);
  }

  static inline data_expression rewr_63_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_63_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_63_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_63_2(t[0], t[1], this_rewriter); }


  // [63] remove_token: Nat # List(Nat) -> List(Nat)
  static inline const data_expression& rewr_63_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa681e0);
  }

  static inline data_expression rewr_63_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_63_0(this_rewriter); }

  static inline data_expression rewr_63_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_63_0(this_rewriter); }


  // [62] add_and_remove_tokens: (Place -> List(Nat)) # Trans -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_62_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@R(add_tokens(remove_tokens(@var_0, from(@var_1)), to(@var_1))(@var_2)))))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const data_expression& var_1 = arg1; // S1a
      const DATA_EXPR2& var_2 = arg_not_nf2; // S1b
      return rewr_59_3(delayed_rewr_56_2<DATA_EXPR0, delayed_rewr_46_1<data_expression>>(var_0, delayed_rewr_46_1<data_expression>(var_1,  this_rewriter),  this_rewriter), rewr_61_1(var_1,  this_rewriter), var_2,  this_rewriter); // R1 add_tokens(remove_tokens(@var_0, from(@var_1)), to(@var_1))(@var_2)
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9179a0))), local_rewrite(arg_not_nf0,this_rewriter), arg1), local_rewrite(arg_not_nf2,this_rewriter));
  }

  static inline data_expression rewr_62_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_62_3(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_62_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_62_3(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], t[0], this_rewriter); }


  // [56] remove_tokens: (Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_56_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_56_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_56_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [46] from: Trans -> List(PlaceTokens)
  template < class DATA_EXPR0>
  class delayed_rewr_46_1
  {
    protected:
      const DATA_EXPR0& m_t0;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_46_1(const DATA_EXPR0& t0, RewriterCompilingJitty* tr)
        : m_t0(t0), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_46_1(m_t0, this_rewriter);
      }
  };
  
  // [62] add_and_remove_tokens: (Place -> List(Nat)) # Trans -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_62_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@R(add_tokens(remove_tokens(@var_0, from(@var_1)), to(@var_1))))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const data_expression& var_1 = arg1; // S1a
      return rewr_59_2(delayed_rewr_56_2<DATA_EXPR0, delayed_rewr_46_1<data_expression>>(var_0, delayed_rewr_46_1<data_expression>(var_1,  this_rewriter),  this_rewriter), rewr_61_1(var_1,  this_rewriter),  this_rewriter); // R1 add_tokens(remove_tokens(@var_0, from(@var_1)), to(@var_1))
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9179a0))), local_rewrite(arg_not_nf0,this_rewriter), arg1);
  }

  static inline data_expression rewr_62_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_62_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_62_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_62_2(t[0], t[1], this_rewriter); }


  // [62] add_and_remove_tokens: (Place -> List(Nat)) # Trans -> Place -> List(Nat)
  static inline const data_expression& rewr_62_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa67ec0);
  }

  static inline data_expression rewr_62_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_62_0(this_rewriter); }

  static inline data_expression rewr_62_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_62_0(this_rewriter); }


  // [59] add_tokens: (Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_59_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@F([], @@D(@@N(@@S(@var_1, @@R(@var_0(@var_1))))), @@X)))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      if (uint_address(arg1) == 0x55a6cf917640) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_1, this_rewriter)), this_rewriter); // R1 @var_0(@var_1)
      }
      else
      {
      }
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@S(@var_0, @@N(@@F(|>, @@F(place_tokens, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@R(add_tokens(@var_0, @var_3)[@var_1 -> @var_2 ++ @var_0(@var_1)](@var_4))))))))))), @@D(@@X)), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf917760) // F1
      {
        if (is_application_no_check(down_cast<data_expression>(arg1[1])) && uint_address(down_cast<data_expression>(arg1[1])[0]) == 0x55a6cf916b30) // F2b place_tokens
        {
          const data_expression& t1 = down_cast<data_expression>(arg1[1]);
          const data_expression& var_1 = down_cast<data_expression>(t1[1]); // S2
          const data_expression& var_2 = down_cast<data_expression>(t1[2]); // S2
          const data_expression& var_3 = down_cast<data_expression>(arg1[2]); // S2
          const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
          return rewr_16_4(rewr_59_2(var_0, var_3,  this_rewriter), var_1, delayed_rewr_60_2<data_expression, delayed_application1<data_expression,data_expression>>(var_2, delayed_application1<data_expression,data_expression>(var_0,var_1, this_rewriter),  this_rewriter), var_4,  this_rewriter); // R1 add_tokens(@var_0, @var_3)[@var_1 -> @var_2 ++ @var_0(@var_1)](@var_4)
        }
        else
        {
        }
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9177f0))), arg0, arg1), local_rewrite(arg_not_nf2,this_rewriter));
  }

  static inline data_expression rewr_59_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_59_3(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_59_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_59_3(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], t[0], this_rewriter); }


  // [60] ++: List(Nat) # List(Nat) -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_60_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_60_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_60_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [59] add_tokens: (Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_59_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@F([], @@R(@var_0), @@X)))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      if (uint_address(arg1) == 0x55a6cf917640) // F1
      {
        return local_rewrite(var_0, this_rewriter); // R1 @var_0
      }
      else
      {
      }
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@S(@var_0, @@N(@@F(|>, @@F(place_tokens, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@R(add_tokens(@var_0, @var_3)[@var_1 -> @var_2 ++ @var_0(@var_1)]))))))), @@D(@@X)), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf917760) // F1
      {
        if (is_application_no_check(down_cast<data_expression>(arg1[1])) && uint_address(down_cast<data_expression>(arg1[1])[0]) == 0x55a6cf916b30) // F2b place_tokens
        {
          const data_expression& t1 = down_cast<data_expression>(arg1[1]);
          const data_expression& var_1 = down_cast<data_expression>(t1[1]); // S2
          const data_expression& var_2 = down_cast<data_expression>(t1[2]); // S2
          const data_expression& var_3 = down_cast<data_expression>(arg1[2]); // S2
          return rewr_16_3(rewr_59_2(var_0, var_3,  this_rewriter), var_1, delayed_rewr_60_2<data_expression, delayed_application1<data_expression,data_expression>>(var_2, delayed_application1<data_expression,data_expression>(var_0,var_1, this_rewriter),  this_rewriter),  this_rewriter); // R1 add_tokens(@var_0, @var_3)[@var_1 -> @var_2 ++ @var_0(@var_1)]
        }
        else
        {
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9177f0))), arg0, arg1);
  }

  static inline data_expression rewr_59_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_59_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_59_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_59_2(t[0], t[1], this_rewriter); }


  // [59] add_tokens: (Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)
  static inline const data_expression& rewr_59_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa69210);
  }

  static inline data_expression rewr_59_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_59_0(this_rewriter); }

  static inline data_expression rewr_59_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_59_0(this_rewriter); }


  // [56] remove_tokens: (Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_56_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@F([], @@D(@@N(@@S(@var_1, @@R(@var_0(@var_1))))), @@X)))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      if (uint_address(arg1) == 0x55a6cf917640) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_1, this_rewriter)), this_rewriter); // R1 @var_0(@var_1)
      }
      else
      {
      }
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@S(@var_0, @@N(@@F(|>, @@F(place_tokens, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@R(remove_tokens(@var_0, @var_3)[@var_1 -> remove_tokens_helper(@var_2, @var_0(@var_1))](@var_4))))))))))), @@D(@@X)), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf917760) // F1
      {
        if (is_application_no_check(down_cast<data_expression>(arg1[1])) && uint_address(down_cast<data_expression>(arg1[1])[0]) == 0x55a6cf916b30) // F2b place_tokens
        {
          const data_expression& t1 = down_cast<data_expression>(arg1[1]);
          const data_expression& var_1 = down_cast<data_expression>(t1[1]); // S2
          const data_expression& var_2 = down_cast<data_expression>(t1[2]); // S2
          const data_expression& var_3 = down_cast<data_expression>(arg1[2]); // S2
          const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
          return rewr_16_4(rewr_56_2(var_0, var_3,  this_rewriter), var_1, delayed_rewr_57_2<data_expression, delayed_application1<data_expression,data_expression>>(var_2, delayed_application1<data_expression,data_expression>(var_0,var_1, this_rewriter),  this_rewriter), var_4,  this_rewriter); // R1 remove_tokens(@var_0, @var_3)[@var_1 -> remove_tokens_helper(@var_2, @var_0(@var_1))](@var_4)
        }
        else
        {
        }
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf917670))), arg0, arg1), local_rewrite(arg_not_nf2,this_rewriter));
  }

  static inline data_expression rewr_56_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_56_3(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_56_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_56_3(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], t[0], this_rewriter); }


  // [57] remove_tokens_helper: List(Nat) # List(Nat) -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_57_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_57_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_57_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [56] remove_tokens: (Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_56_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@F([], @@R(@var_0), @@X)))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      if (uint_address(arg1) == 0x55a6cf917640) // F1
      {
        return local_rewrite(var_0, this_rewriter); // R1 @var_0
      }
      else
      {
      }
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@S(@var_0, @@N(@@F(|>, @@F(place_tokens, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@R(remove_tokens(@var_0, @var_3)[@var_1 -> remove_tokens_helper(@var_2, @var_0(@var_1))]))))))), @@D(@@X)), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf917760) // F1
      {
        if (is_application_no_check(down_cast<data_expression>(arg1[1])) && uint_address(down_cast<data_expression>(arg1[1])[0]) == 0x55a6cf916b30) // F2b place_tokens
        {
          const data_expression& t1 = down_cast<data_expression>(arg1[1]);
          const data_expression& var_1 = down_cast<data_expression>(t1[1]); // S2
          const data_expression& var_2 = down_cast<data_expression>(t1[2]); // S2
          const data_expression& var_3 = down_cast<data_expression>(arg1[2]); // S2
          return rewr_16_3(rewr_56_2(var_0, var_3,  this_rewriter), var_1, delayed_rewr_57_2<data_expression, delayed_application1<data_expression,data_expression>>(var_2, delayed_application1<data_expression,data_expression>(var_0,var_1, this_rewriter),  this_rewriter),  this_rewriter); // R1 remove_tokens(@var_0, @var_3)[@var_1 -> remove_tokens_helper(@var_2, @var_0(@var_1))]
        }
        else
        {
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf917670))), arg0, arg1);
  }

  static inline data_expression rewr_56_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_56_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_56_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_56_2(t[0], t[1], this_rewriter); }


  // [56] remove_tokens: (Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)
  static inline const data_expression& rewr_56_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa68fd0);
  }

  static inline data_expression rewr_56_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_56_0(this_rewriter); }

  static inline data_expression rewr_56_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_56_0(this_rewriter); }


  // [54] has_highest_priority: List(HistoryLogEntry) # Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_54_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall t': Trans. t' in petri_net_statics(@var_0) => is_enabled(@var_0, t') => priority(@var_1) <= priority(t')))))
    {
      const data_expression& var_0 = arg0; // S1a
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(1), rewr_48_2(rewr_53_2(static_cast<const data_expression&>(this_rewriter->bound_variable_get(1)), rewr_43_1(var_0,  this_rewriter),  this_rewriter), delayed_rewr_48_2<delayed_rewr_50_2<data_expression, data_expression>, delayed_rewr_52_2<delayed_rewr_51_1<DATA_EXPR1>, delayed_rewr_51_1<data_expression>>>(delayed_rewr_50_2<data_expression, data_expression>(var_0, static_cast<const data_expression&>(this_rewriter->bound_variable_get(1)),  this_rewriter), delayed_rewr_52_2<delayed_rewr_51_1<DATA_EXPR1>, delayed_rewr_51_1<data_expression>>(delayed_rewr_51_1<DATA_EXPR1>(var_1,  this_rewriter), delayed_rewr_51_1<data_expression>(static_cast<const data_expression&>(this_rewriter->bound_variable_get(1)),  this_rewriter),  this_rewriter),  this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall t': Trans. t' in petri_net_statics(@var_0) => is_enabled(@var_0, t') => priority(@var_1) <= priority(t')
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9175e0))), arg0, local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_54_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_54_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_54_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_54_2(t[0], t[1], this_rewriter); }


  // [48] =>: Bool # Bool -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_48_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_48_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_48_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [52] <=: Nat # Nat -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_52_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_52_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_52_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [51] priority: Trans -> Nat
  template < class DATA_EXPR0>
  class delayed_rewr_51_1
  {
    protected:
      const DATA_EXPR0& m_t0;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_51_1(const DATA_EXPR0& t0, RewriterCompilingJitty* tr)
        : m_t0(t0), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_51_1(m_t0, this_rewriter);
      }
  };
  
  // [50] is_enabled: List(HistoryLogEntry) # Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_50_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_50_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_50_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [54] has_highest_priority: List(HistoryLogEntry) # Trans -> Bool
  static inline const data_expression& rewr_54_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6a330);
  }

  static inline data_expression rewr_54_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_54_0(this_rewriter); }

  static inline data_expression rewr_54_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_54_0(this_rewriter); }


  // [50] is_enabled: List(HistoryLogEntry) # Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_50_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall p: Place, tokens: List(Nat). (place_tokens(p, tokens) in from(@var_1) => tokens_subset_of(tokens, marking(p))) && guard(@var_1) whr marking = latest_marking(@var_0) end))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const data_expression& var_1 = arg1; // S1a
      return this_rewriter->rewrite_where(where_clause(static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(2), rewr_49_2(rewr_48_2(rewr_47_2(delayed_rewr_23_2<data_expression, data_expression>(static_cast<const data_expression&>(this_rewriter->bound_variable_get(2)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(3)),  this_rewriter), rewr_46_1(var_1,  this_rewriter),  this_rewriter), delayed_rewr_45_2<data_expression, delayed_application1<data_expression,data_expression>>(static_cast<const data_expression&>(this_rewriter->bound_variable_get(3)), delayed_application1<data_expression,data_expression>(static_cast<const data_expression&>(this_rewriter->bound_variable_get(4)),static_cast<const data_expression&>(this_rewriter->bound_variable_get(2)), this_rewriter),  this_rewriter),  this_rewriter), delayed_rewr_44_1<data_expression>(var_1,  this_rewriter),  this_rewriter), true, sigma(this_rewriter))),jittyc_local_push_front(assignment_expression_list(), assignment(this_rewriter->bound_variable_get(4), rewr_38_1(var_0,  this_rewriter)))), sigma(this_rewriter)); // R1 forall p: Place, tokens: List(Nat). (place_tokens(p, tokens) in from(@var_1) => tokens_subset_of(tokens, marking(p))) && guard(@var_1) whr marking = latest_marking(@var_0) end
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9173a0))), local_rewrite(arg_not_nf0,this_rewriter), arg1);
  }

  static inline data_expression rewr_50_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_50_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_50_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_50_2(t[0], t[1], this_rewriter); }


  // [44] guard: Trans -> Bool
  template < class DATA_EXPR0>
  class delayed_rewr_44_1
  {
    protected:
      const DATA_EXPR0& m_t0;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_44_1(const DATA_EXPR0& t0, RewriterCompilingJitty* tr)
        : m_t0(t0), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_44_1(m_t0, this_rewriter);
      }
  };
  
  // [23] place_tokens: Place # List(Nat) -> PlaceTokens
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_23_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_23_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_23_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [50] is_enabled: List(HistoryLogEntry) # Trans -> Bool
  static inline const data_expression& rewr_50_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa68ea0);
  }

  static inline data_expression rewr_50_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_50_0(this_rewriter); }

  static inline data_expression rewr_50_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_50_0(this_rewriter); }


  // [43] petri_net_statics: List(HistoryLogEntry) -> List(Trans)
  template < class DATA_EXPR0>
  static inline data_expression rewr_43_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@R([trans(t0, true, 999, [place_tokens(p0, [0])], [place_tokens(p1, [1]), place_tokens(p2, [2])]), trans(t1, latest_marking(@var_0)(p2) == [], 999, [place_tokens(p1, [1])], [place_tokens(p3, [3])]), trans(t2, true, 999, [place_tokens(p2, [2])], [place_tokens(p4, [4])]), trans(t3, true, 999, [place_tokens(p3, [3]), place_tokens(p4, [4])], [place_tokens(p5, [5])])]))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      return rewr_140_2(*reinterpret_cast<const data_expression*>(0x55a6cfa6a450), rewr_140_2(rewr_32_5(*reinterpret_cast<const data_expression*>(0x55a6cf960e40), rewr_39_2(rewr_38_2(var_0, *reinterpret_cast<const data_expression*>(0x55a6cfa6a3f0),  this_rewriter), *reinterpret_cast<const data_expression*>(0x55a6cfa67920),  this_rewriter), *reinterpret_cast<const data_expression*>(0x55a6cfa690f0), *reinterpret_cast<const data_expression*>(0x55a6cfa683e0), *reinterpret_cast<const data_expression*>(0x55a6cf962140),  this_rewriter), *reinterpret_cast<const data_expression*>(0x55a6cf962200),  this_rewriter),  this_rewriter); // R1 [trans(t0, true, 999, [place_tokens(p0, [0])], [place_tokens(p1, [1]), place_tokens(p2, [2])]), trans(t1, latest_marking(@var_0)(p2) == [], 999, [place_tokens(p1, [1])], [place_tokens(p3, [3])]), trans(t2, true, 999, [place_tokens(p2, [2])], [place_tokens(p4, [4])]), trans(t3, true, 999, [place_tokens(p3, [3]), place_tokens(p4, [4])], [place_tokens(p5, [5])])]
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9170d0))), local_rewrite(arg_not_nf0,this_rewriter));
  }

  static inline data_expression rewr_43_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_43_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_43_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_43_1(t[0], this_rewriter); }


  // [43] petri_net_statics: List(HistoryLogEntry) -> List(Trans)
  static inline const data_expression& rewr_43_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa68480);
  }

  static inline data_expression rewr_43_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_43_0(this_rewriter); }

  static inline data_expression rewr_43_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_43_0(this_rewriter); }


  // [17] initial_marking: Place -> List(Nat)
  template < class DATA_EXPR0>
  static inline data_expression rewr_17_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@R((lambda p1: Place. [])[p0 -> [0, 0, 0]](@var_0)))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      return rewr_16_4(*reinterpret_cast<const data_expression*>(0x55a6cf903460), *reinterpret_cast<const data_expression*>(0x55a6cf903590), *reinterpret_cast<const data_expression*>(0x55a6cf962080), var_0,  this_rewriter); // R1 (lambda p1: Place. [])[p0 -> [0, 0, 0]](@var_0)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf916860))), local_rewrite(arg_not_nf0,this_rewriter));
  }

  static inline data_expression rewr_17_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_17_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_17_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_17_1(t[0], this_rewriter); }


  // [17] initial_marking: Place -> List(Nat)
  static inline const data_expression& rewr_17_0(RewriterCompilingJitty* this_rewriter)

  {
    // @@R((lambda p: Place. [])[p0 -> [0, 0, 0]])
    {
      static data_expression static_term(local_rewrite(*reinterpret_cast<const data_expression*>(0x55a6cfa6a7e0), this_rewriter));
      return static_term; // R2a
    }
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6a7e0);
  }

  static inline data_expression rewr_17_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_17_0(this_rewriter); }

  static inline data_expression rewr_17_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_17_0(this_rewriter); }


  // [712] @less_equal_arguments: MarkingTrans # MarkingTrans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_712_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(marking_trans, @@S(@var_0, @@N(@@S(@var_1, @@D(@@N(@@F(marking_trans, @@S(@var_2, @@N(@@S(@var_3, @@R(@var_0 < @var_2 || @var_0 == @var_2 && @var_1 <= @var_3)))), @@X)))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9ac460) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf9ac460) // F1
        {
          const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
          const data_expression& var_3 = down_cast<data_expression>(arg1[2]); // S2
          return rewr_93_2(rewr_185_2(var_0, var_2,  this_rewriter), delayed_rewr_49_2<delayed_rewr_182_2<data_expression, data_expression>, delayed_rewr_548_2<data_expression, data_expression>>(delayed_rewr_182_2<data_expression, data_expression>(var_0, var_2,  this_rewriter), delayed_rewr_548_2<data_expression, data_expression>(var_1, var_3,  this_rewriter),  this_rewriter),  this_rewriter); // R1 @var_0 < @var_2 || @var_0 == @var_2 && @var_1 <= @var_3
        }
        else
        {
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9ac580))), arg0, arg1);
  }

  static inline data_expression rewr_712_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_712_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_712_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_712_2(t[0], t[1], this_rewriter); }


  // [49] &&: Bool # Bool -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_49_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_49_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_49_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [548] <=: Trans_name # Trans_name -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_548_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_548_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_548_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [182] ==: (Place -> List(Nat)) # (Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_182_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_182_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_182_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [712] @less_equal_arguments: MarkingTrans # MarkingTrans -> Bool
  static inline const data_expression& rewr_712_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa67fb0);
  }

  static inline data_expression rewr_712_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_712_0(this_rewriter); }

  static inline data_expression rewr_712_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_712_0(this_rewriter); }


  // [711] @less_arguments: MarkingTrans # MarkingTrans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_711_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(marking_trans, @@S(@var_0, @@N(@@S(@var_1, @@D(@@N(@@F(marking_trans, @@S(@var_2, @@N(@@S(@var_3, @@R(@var_0 < @var_2 || @var_0 == @var_2 && @var_1 < @var_3)))), @@X)))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9ac460) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf9ac460) // F1
        {
          const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
          const data_expression& var_3 = down_cast<data_expression>(arg1[2]); // S2
          return rewr_93_2(rewr_185_2(var_0, var_2,  this_rewriter), delayed_rewr_49_2<delayed_rewr_182_2<data_expression, data_expression>, delayed_rewr_456_2<data_expression, data_expression>>(delayed_rewr_182_2<data_expression, data_expression>(var_0, var_2,  this_rewriter), delayed_rewr_456_2<data_expression, data_expression>(var_1, var_3,  this_rewriter),  this_rewriter),  this_rewriter); // R1 @var_0 < @var_2 || @var_0 == @var_2 && @var_1 < @var_3
        }
        else
        {
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9ac550))), arg0, arg1);
  }

  static inline data_expression rewr_711_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_711_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_711_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_711_2(t[0], t[1], this_rewriter); }


  // [456] <: Trans_name # Trans_name -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_456_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_456_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_456_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [711] @less_arguments: MarkingTrans # MarkingTrans -> Bool
  static inline const data_expression& rewr_711_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf962230);
  }

  static inline data_expression rewr_711_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_711_0(this_rewriter); }

  static inline data_expression rewr_711_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_711_0(this_rewriter); }


  // [710] @equal_arguments: MarkingTrans # MarkingTrans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_710_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(marking_trans, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(true), @@F(marking_trans, @@S(@var_3, @@N(@@S(@var_4, @@R(@var_1 == @var_3 && @var_2 == @var_4)))), @@X))))))), @@N(@@M(@var_0, @@R(true), @@X))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9ac460) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf9ac460) // F1
          {
            const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
            const data_expression& var_4 = down_cast<data_expression>(arg1[2]); // S2
            return rewr_49_2(rewr_182_2(var_1, var_3,  this_rewriter), delayed_rewr_443_2<data_expression, data_expression>(var_2, var_4,  this_rewriter),  this_rewriter); // R1 @var_1 == @var_3 && @var_2 == @var_4
          }
          else
          {
          }
        }
      }
      else
      {
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9ac520))), arg0, arg1);
  }

  static inline data_expression rewr_710_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_710_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_710_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_710_2(t[0], t[1], this_rewriter); }


  // [443] ==: Trans_name # Trans_name -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_443_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_443_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_443_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [710] @equal_arguments: MarkingTrans # MarkingTrans -> Bool
  static inline const data_expression& rewr_710_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6cf10);
  }

  static inline data_expression rewr_710_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_710_0(this_rewriter); }

  static inline data_expression rewr_710_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_710_0(this_rewriter); }


  // [709] @to_pos: MarkingTrans -> Pos
  template < class DATA_EXPR0>
  static inline data_expression rewr_709_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(marking_trans, @@N(@@R(1)), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9ac460) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6ce80); // R1 1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9ac4f0))), arg0);
  }

  static inline data_expression rewr_709_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_709_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_709_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_709_1(t[0], this_rewriter); }


  // [709] @to_pos: MarkingTrans -> Pos
  static inline const data_expression& rewr_709_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6cf40);
  }

  static inline data_expression rewr_709_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_709_0(this_rewriter); }

  static inline data_expression rewr_709_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_709_0(this_rewriter); }


  // [708] trans_name': MarkingTrans -> Trans_name
  template < class DATA_EXPR0>
  static inline data_expression rewr_708_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(marking_trans, @@N(@@S(@var_1, @@R(@var_1))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9ac460) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9ac4c0))), arg0);
  }

  static inline data_expression rewr_708_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_708_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_708_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_708_1(t[0], this_rewriter); }


  // [708] trans_name': MarkingTrans -> Trans_name
  static inline const data_expression& rewr_708_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6a300);
  }

  static inline data_expression rewr_708_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_708_0(this_rewriter); }

  static inline data_expression rewr_708_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_708_0(this_rewriter); }


  // [707] marking': MarkingTrans -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_707_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(marking_trans, @@S(@var_0, @@N(@@D(@@N(@@S(@var_2, @@R(@var_0(@var_2))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9ac460) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const DATA_EXPR1& var_2 = arg_not_nf1; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_0, local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_0(@var_2)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9ac490))), arg0), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_707_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_707_2(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_707_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_707_2(down_cast<application>(t.head())[0], t[0], this_rewriter); }


  // [707] marking': MarkingTrans -> Place -> List(Nat)
  template < class DATA_EXPR0>
  static inline data_expression rewr_707_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(marking_trans, @@S(@var_0, @@N(@@R(@var_0))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9ac460) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        return var_0; // R1 @var_0
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9ac490))), arg0);
  }

  static inline data_expression rewr_707_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_707_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_707_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_707_1(t[0], this_rewriter); }


  // [707] marking': MarkingTrans -> Place -> List(Nat)
  static inline const data_expression& rewr_707_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf903560);
  }

  static inline data_expression rewr_707_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_707_0(this_rewriter); }

  static inline data_expression rewr_707_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_707_0(this_rewriter); }


  // [692] @less_equal_arguments: PlaceTokens # PlaceTokens -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_692_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(place_tokens, @@S(@var_0, @@N(@@S(@var_1, @@D(@@N(@@F(place_tokens, @@S(@var_2, @@N(@@S(@var_3, @@R(@var_0 < @var_2 || @var_0 == @var_2 && @var_1 <= @var_3)))), @@X)))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916b30) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916b30) // F1
        {
          const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
          const data_expression& var_3 = down_cast<data_expression>(arg1[2]); // S2
          return rewr_93_2(rewr_180_2(var_0, var_2,  this_rewriter), delayed_rewr_49_2<delayed_rewr_542_2<data_expression, data_expression>, delayed_rewr_166_2<data_expression, data_expression>>(delayed_rewr_542_2<data_expression, data_expression>(var_0, var_2,  this_rewriter), delayed_rewr_166_2<data_expression, data_expression>(var_1, var_3,  this_rewriter),  this_rewriter),  this_rewriter); // R1 @var_0 < @var_2 || @var_0 == @var_2 && @var_1 <= @var_3
        }
        else
        {
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9ab560))), arg0, arg1);
  }

  static inline data_expression rewr_692_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_692_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_692_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_692_2(t[0], t[1], this_rewriter); }


  // [166] <=: List(Nat) # List(Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_166_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_166_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_166_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [542] ==: Place # Place -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_542_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_542_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_542_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [692] @less_equal_arguments: PlaceTokens # PlaceTokens -> Bool
  static inline const data_expression& rewr_692_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa69090);
  }

  static inline data_expression rewr_692_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_692_0(this_rewriter); }

  static inline data_expression rewr_692_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_692_0(this_rewriter); }


  // [691] @less_arguments: PlaceTokens # PlaceTokens -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_691_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(place_tokens, @@S(@var_0, @@N(@@S(@var_1, @@D(@@N(@@F(place_tokens, @@S(@var_2, @@N(@@S(@var_3, @@R(@var_0 < @var_2 || @var_0 == @var_2 && @var_1 < @var_3)))), @@X)))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916b30) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916b30) // F1
        {
          const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
          const data_expression& var_3 = down_cast<data_expression>(arg1[2]); // S2
          return rewr_93_2(rewr_180_2(var_0, var_2,  this_rewriter), delayed_rewr_49_2<delayed_rewr_542_2<data_expression, data_expression>, delayed_rewr_164_2<data_expression, data_expression>>(delayed_rewr_542_2<data_expression, data_expression>(var_0, var_2,  this_rewriter), delayed_rewr_164_2<data_expression, data_expression>(var_1, var_3,  this_rewriter),  this_rewriter),  this_rewriter); // R1 @var_0 < @var_2 || @var_0 == @var_2 && @var_1 < @var_3
        }
        else
        {
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9ab530))), arg0, arg1);
  }

  static inline data_expression rewr_691_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_691_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_691_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_691_2(t[0], t[1], this_rewriter); }


  // [164] <: List(Nat) # List(Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_164_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_164_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_164_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [691] @less_arguments: PlaceTokens # PlaceTokens -> Bool
  static inline const data_expression& rewr_691_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf960d00);
  }

  static inline data_expression rewr_691_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_691_0(this_rewriter); }

  static inline data_expression rewr_691_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_691_0(this_rewriter); }


  // [690] @equal_arguments: PlaceTokens # PlaceTokens -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_690_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(place_tokens, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(true), @@F(place_tokens, @@S(@var_3, @@N(@@S(@var_4, @@R(@var_1 == @var_3 && @var_2 == @var_4)))), @@X))))))), @@N(@@M(@var_0, @@R(true), @@X))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916b30) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916b30) // F1
          {
            const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
            const data_expression& var_4 = down_cast<data_expression>(arg1[2]); // S2
            return rewr_49_2(rewr_542_2(var_1, var_3,  this_rewriter), delayed_rewr_39_2<data_expression, data_expression>(var_2, var_4,  this_rewriter),  this_rewriter); // R1 @var_1 == @var_3 && @var_2 == @var_4
          }
          else
          {
          }
        }
      }
      else
      {
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9ab500))), arg0, arg1);
  }

  static inline data_expression rewr_690_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_690_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_690_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_690_2(t[0], t[1], this_rewriter); }


  // [39] ==: List(Nat) # List(Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_39_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_39_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_39_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [690] @equal_arguments: PlaceTokens # PlaceTokens -> Bool
  static inline const data_expression& rewr_690_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6a850);
  }

  static inline data_expression rewr_690_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_690_0(this_rewriter); }

  static inline data_expression rewr_690_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_690_0(this_rewriter); }


  // [689] @to_pos: PlaceTokens -> Pos
  template < class DATA_EXPR0>
  static inline data_expression rewr_689_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(place_tokens, @@N(@@R(1)), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916b30) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6ce80); // R1 1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9ab4d0))), arg0);
  }

  static inline data_expression rewr_689_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_689_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_689_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_689_1(t[0], this_rewriter); }


  // [689] @to_pos: PlaceTokens -> Pos
  static inline const data_expression& rewr_689_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf9620b0);
  }

  static inline data_expression rewr_689_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_689_0(this_rewriter); }

  static inline data_expression rewr_689_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_689_0(this_rewriter); }


  // [688] tokens': PlaceTokens -> List(Nat)
  template < class DATA_EXPR0>
  static inline data_expression rewr_688_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(place_tokens, @@N(@@S(@var_1, @@R(@var_1))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916b30) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9ab4a0))), arg0);
  }

  static inline data_expression rewr_688_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_688_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_688_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_688_1(t[0], this_rewriter); }


  // [688] tokens': PlaceTokens -> List(Nat)
  static inline const data_expression& rewr_688_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa690c0);
  }

  static inline data_expression rewr_688_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_688_0(this_rewriter); }

  static inline data_expression rewr_688_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_688_0(this_rewriter); }


  // [687] place': PlaceTokens -> Place
  template < class DATA_EXPR0>
  static inline data_expression rewr_687_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(place_tokens, @@S(@var_0, @@N(@@R(@var_0))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916b30) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        return var_0; // R1 @var_0
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9ab470))), arg0);
  }

  static inline data_expression rewr_687_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_687_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_687_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_687_1(t[0], this_rewriter); }


  // [687] place': PlaceTokens -> Place
  static inline const data_expression& rewr_687_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6a8b0);
  }

  static inline data_expression rewr_687_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_687_0(this_rewriter); }

  static inline data_expression rewr_687_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_687_0(this_rewriter); }


  // [670] @less_equal_arguments: HistoryLogEntry # HistoryLogEntry -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_670_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(history_log_entry, @@S(@var_0, @@N(@@S(@var_1, @@D(@@N(@@F(history_log_entry, @@S(@var_2, @@N(@@S(@var_3, @@R(@var_0 < @var_2 || @var_0 == @var_2 && @var_1 <= @var_3)))), @@X)))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9191a0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf9191a0) // F1
        {
          const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
          const data_expression& var_3 = down_cast<data_expression>(arg1[2]); // S2
          return rewr_93_2(rewr_561_2(var_0, var_2,  this_rewriter), delayed_rewr_49_2<delayed_rewr_455_2<data_expression, data_expression>, delayed_rewr_186_2<data_expression, data_expression>>(delayed_rewr_455_2<data_expression, data_expression>(var_0, var_2,  this_rewriter), delayed_rewr_186_2<data_expression, data_expression>(var_1, var_3,  this_rewriter),  this_rewriter),  this_rewriter); // R1 @var_0 < @var_2 || @var_0 == @var_2 && @var_1 <= @var_3
        }
        else
        {
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9aa540))), arg0, arg1);
  }

  static inline data_expression rewr_670_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_670_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_670_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_670_2(t[0], t[1], this_rewriter); }


  // [186] <=: (Place -> List(Nat)) # (Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_186_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_186_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_186_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [455] ==: Maybe_trans_name # Maybe_trans_name -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_455_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_455_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_455_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [670] @less_equal_arguments: HistoryLogEntry # HistoryLogEntry -> Bool
  static inline const data_expression& rewr_670_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6a720);
  }

  static inline data_expression rewr_670_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_670_0(this_rewriter); }

  static inline data_expression rewr_670_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_670_0(this_rewriter); }


  // [669] @less_arguments: HistoryLogEntry # HistoryLogEntry -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_669_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(history_log_entry, @@S(@var_0, @@N(@@S(@var_1, @@D(@@N(@@F(history_log_entry, @@S(@var_2, @@N(@@S(@var_3, @@R(@var_0 < @var_2 || @var_0 == @var_2 && @var_1 < @var_3)))), @@X)))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9191a0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf9191a0) // F1
        {
          const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
          const data_expression& var_3 = down_cast<data_expression>(arg1[2]); // S2
          return rewr_93_2(rewr_561_2(var_0, var_2,  this_rewriter), delayed_rewr_49_2<delayed_rewr_455_2<data_expression, data_expression>, delayed_rewr_185_2<data_expression, data_expression>>(delayed_rewr_455_2<data_expression, data_expression>(var_0, var_2,  this_rewriter), delayed_rewr_185_2<data_expression, data_expression>(var_1, var_3,  this_rewriter),  this_rewriter),  this_rewriter); // R1 @var_0 < @var_2 || @var_0 == @var_2 && @var_1 < @var_3
        }
        else
        {
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9aa510))), arg0, arg1);
  }

  static inline data_expression rewr_669_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_669_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_669_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_669_2(t[0], t[1], this_rewriter); }


  // [185] <: (Place -> List(Nat)) # (Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_185_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_185_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_185_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [669] @less_arguments: HistoryLogEntry # HistoryLogEntry -> Bool
  static inline const data_expression& rewr_669_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6a5d0);
  }

  static inline data_expression rewr_669_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_669_0(this_rewriter); }

  static inline data_expression rewr_669_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_669_0(this_rewriter); }


  // [668] @equal_arguments: HistoryLogEntry # HistoryLogEntry -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_668_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(history_log_entry, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(true), @@F(history_log_entry, @@S(@var_3, @@N(@@S(@var_4, @@R(@var_1 == @var_3 && @var_2 == @var_4)))), @@X))))))), @@N(@@M(@var_0, @@R(true), @@X))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9191a0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf9191a0) // F1
          {
            const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
            const data_expression& var_4 = down_cast<data_expression>(arg1[2]); // S2
            return rewr_49_2(rewr_455_2(var_1, var_3,  this_rewriter), delayed_rewr_182_2<data_expression, data_expression>(var_2, var_4,  this_rewriter),  this_rewriter); // R1 @var_1 == @var_3 && @var_2 == @var_4
          }
          else
          {
          }
        }
      }
      else
      {
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9aa4e0))), arg0, arg1);
  }

  static inline data_expression rewr_668_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_668_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_668_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_668_2(t[0], t[1], this_rewriter); }


  // [668] @equal_arguments: HistoryLogEntry # HistoryLogEntry -> Bool
  static inline const data_expression& rewr_668_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa67f20);
  }

  static inline data_expression rewr_668_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_668_0(this_rewriter); }

  static inline data_expression rewr_668_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_668_0(this_rewriter); }


  // [667] @to_pos: HistoryLogEntry -> Pos
  template < class DATA_EXPR0>
  static inline data_expression rewr_667_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(history_log_entry, @@N(@@R(1)), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9191a0) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6ce80); // R1 1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9aa4b0))), arg0);
  }

  static inline data_expression rewr_667_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_667_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_667_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_667_1(t[0], this_rewriter); }


  // [667] @to_pos: HistoryLogEntry -> Pos
  static inline const data_expression& rewr_667_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf9620e0);
  }

  static inline data_expression rewr_667_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_667_0(this_rewriter); }

  static inline data_expression rewr_667_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_667_0(this_rewriter); }


  // [70] new_marking: HistoryLogEntry -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_70_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(history_log_entry, @@N(@@S(@var_1, @@D(@@N(@@S(@var_2, @@R(@var_1(@var_2))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9191a0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const DATA_EXPR1& var_2 = arg_not_nf1; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf917f70))), arg0), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_70_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_70_2(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_70_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_70_2(down_cast<application>(t.head())[0], t[0], this_rewriter); }


  // [70] new_marking: HistoryLogEntry -> Place -> List(Nat)
  template < class DATA_EXPR0>
  static inline data_expression rewr_70_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(history_log_entry, @@N(@@S(@var_1, @@R(@var_1))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9191a0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf917f70))), arg0);
  }

  static inline data_expression rewr_70_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_70_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_70_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_70_1(t[0], this_rewriter); }


  // [70] new_marking: HistoryLogEntry -> Place -> List(Nat)
  static inline const data_expression& rewr_70_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6a6c0);
  }

  static inline data_expression rewr_70_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_70_0(this_rewriter); }

  static inline data_expression rewr_70_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_70_0(this_rewriter); }


  // [666] fired_trans: HistoryLogEntry -> Maybe_trans_name
  template < class DATA_EXPR0>
  static inline data_expression rewr_666_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(history_log_entry, @@S(@var_0, @@N(@@R(@var_0))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9191a0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        return var_0; // R1 @var_0
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9aa480))), arg0);
  }

  static inline data_expression rewr_666_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_666_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_666_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_666_1(t[0], this_rewriter); }


  // [666] fired_trans: HistoryLogEntry -> Maybe_trans_name
  static inline const data_expression& rewr_666_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6ce50);
  }

  static inline data_expression rewr_666_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_666_0(this_rewriter); }

  static inline data_expression rewr_666_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_666_0(this_rewriter); }


  // [649] @less_equal_arguments: Maybe_trans_name # Maybe_trans_name -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_649_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(nothing, @@D(@@N(@@F(nothing, @@R(true), @@X))), @@F(just, @@S(@var_0, @@D(@@N(@@F(just, @@S(@var_1, @@R(@var_0 <= @var_1)), @@X)))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf919350) // F1
      {
        if (uint_address(arg1) == 0x55a6cf919350) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
        }
      }
      else
      {
        if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf919170) // F1
        {
          const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf919170) // F1
          {
            const data_expression& var_1 = down_cast<data_expression>(arg1[1]); // S2
            return rewr_548_2(var_0, var_1,  this_rewriter); // R1 @var_0 <= @var_1
          }
          else
          {
          }
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9a9700))), arg0, arg1);
  }

  static inline data_expression rewr_649_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_649_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_649_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_649_2(t[0], t[1], this_rewriter); }


  // [649] @less_equal_arguments: Maybe_trans_name # Maybe_trans_name -> Bool
  static inline const data_expression& rewr_649_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa68d50);
  }

  static inline data_expression rewr_649_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_649_0(this_rewriter); }

  static inline data_expression rewr_649_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_649_0(this_rewriter); }


  // [648] @less_arguments: Maybe_trans_name # Maybe_trans_name -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_648_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(nothing, @@D(@@N(@@F(nothing, @@R(false), @@X))), @@F(just, @@S(@var_0, @@D(@@N(@@F(just, @@S(@var_1, @@R(@var_0 < @var_1)), @@X)))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf919350) // F1
      {
        if (uint_address(arg1) == 0x55a6cf919350) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
        }
        else
        {
        }
      }
      else
      {
        if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf919170) // F1
        {
          const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf919170) // F1
          {
            const data_expression& var_1 = down_cast<data_expression>(arg1[1]); // S2
            return rewr_456_2(var_0, var_1,  this_rewriter); // R1 @var_0 < @var_1
          }
          else
          {
          }
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9a96d0))), arg0, arg1);
  }

  static inline data_expression rewr_648_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_648_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_648_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_648_2(t[0], t[1], this_rewriter); }


  // [648] @less_arguments: Maybe_trans_name # Maybe_trans_name -> Bool
  static inline const data_expression& rewr_648_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf9035c0);
  }

  static inline data_expression rewr_648_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_648_0(this_rewriter); }

  static inline data_expression rewr_648_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_648_0(this_rewriter); }


  // [647] @equal_arguments: Maybe_trans_name # Maybe_trans_name -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_647_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(nothing, @@D(@@N(@@M(@var_0, @@R(true), @@F(nothing, @@R(true), @@X)))), @@F(just, @@S(@var_1, @@D(@@N(@@M(@var_0, @@R(true), @@F(just, @@S(@var_2, @@R(@var_1 == @var_2)), @@X))))), @@N(@@M(@var_0, @@R(true), @@X)))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address(arg0) == 0x55a6cf919350) // F1
      {
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
          if (uint_address(arg1) == 0x55a6cf919350) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
      else
      {
        if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf919170) // F1
        {
          const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf919170) // F1
            {
              const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
              return rewr_443_2(var_1, var_2,  this_rewriter); // R1 @var_1 == @var_2
            }
            else
            {
            }
          }
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9a96a0))), arg0, arg1);
  }

  static inline data_expression rewr_647_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_647_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_647_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_647_2(t[0], t[1], this_rewriter); }


  // [647] @equal_arguments: Maybe_trans_name # Maybe_trans_name -> Bool
  static inline const data_expression& rewr_647_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6a660);
  }

  static inline data_expression rewr_647_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_647_0(this_rewriter); }

  static inline data_expression rewr_647_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_647_0(this_rewriter); }


  // [646] @to_pos: Maybe_trans_name -> Pos
  template < class DATA_EXPR0>
  static inline data_expression rewr_646_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(nothing, @@R(2), @@F(just, @@S(@var_0, @@R(1)), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf919350) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa67ef0); // R1 2
      }
      else
      {
        if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf919170) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6ce80); // R1 1
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9a9670))), arg0);
  }

  static inline data_expression rewr_646_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_646_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_646_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_646_1(t[0], this_rewriter); }


  // [646] @to_pos: Maybe_trans_name -> Pos
  static inline const data_expression& rewr_646_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf960d30);
  }

  static inline data_expression rewr_646_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_646_0(this_rewriter); }

  static inline data_expression rewr_646_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_646_0(this_rewriter); }


  // [645] is_nothing: Maybe_trans_name -> Bool
  template < class DATA_EXPR0>
  static inline data_expression rewr_645_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(nothing, @@R(true), @@F(just, @@S(@var_0, @@R(false)), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf919350) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
        if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf919170) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9a9640))), arg0);
  }

  static inline data_expression rewr_645_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_645_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_645_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_645_1(t[0], this_rewriter); }


  // [645] is_nothing: Maybe_trans_name -> Bool
  static inline const data_expression& rewr_645_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa68040);
  }

  static inline data_expression rewr_645_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_645_0(this_rewriter); }

  static inline data_expression rewr_645_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_645_0(this_rewriter); }


  // [644] is_just: Maybe_trans_name -> Bool
  template < class DATA_EXPR0>
  static inline data_expression rewr_644_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(nothing, @@R(false), @@F(just, @@S(@var_0, @@R(true)), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf919350) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf919170) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9a9610))), arg0);
  }

  static inline data_expression rewr_644_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_644_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_644_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_644_1(t[0], this_rewriter); }


  // [644] is_just: Maybe_trans_name -> Bool
  static inline const data_expression& rewr_644_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6ce20);
  }

  static inline data_expression rewr_644_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_644_0(this_rewriter); }

  static inline data_expression rewr_644_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_644_0(this_rewriter); }


  // [643] just_trans_name: Maybe_trans_name -> Trans_name
  template < class DATA_EXPR0>
  static inline data_expression rewr_643_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(just, @@S(@var_0, @@R(@var_0)), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf919170) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        return var_0; // R1 @var_0
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9a95e0))), arg0);
  }

  static inline data_expression rewr_643_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_643_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_643_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_643_1(t[0], this_rewriter); }


  // [643] just_trans_name: Maybe_trans_name -> Trans_name
  static inline const data_expression& rewr_643_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa67f80);
  }

  static inline data_expression rewr_643_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_643_0(this_rewriter); }

  static inline data_expression rewr_643_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_643_0(this_rewriter); }


  // [628] @less_equal_arguments: Trans # Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_628_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(trans, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@D(@@N(@@F(trans, @@S(@var_5, @@N(@@S(@var_6, @@N(@@S(@var_7, @@N(@@S(@var_8, @@N(@@S(@var_9, @@R(@var_0 < @var_5 || @var_0 == @var_5 && (@var_1 < @var_6 || @var_1 == @var_6 && (@var_2 < @var_7 || @var_2 == @var_7 && (@var_3 < @var_8 || @var_3 == @var_8 && @var_4 <= @var_9))))))))))))), @@X)))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916da0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[4]); // S2
        const data_expression& var_4 = down_cast<data_expression>(arg0[5]); // S2
        if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916da0) // F1
        {
          const data_expression& var_5 = down_cast<data_expression>(arg1[1]); // S2
          const data_expression& var_6 = down_cast<data_expression>(arg1[2]); // S2
          const data_expression& var_7 = down_cast<data_expression>(arg1[3]); // S2
          const data_expression& var_8 = down_cast<data_expression>(arg1[4]); // S2
          const data_expression& var_9 = down_cast<data_expression>(arg1[5]); // S2
          return rewr_93_2(rewr_456_2(var_0, var_5,  this_rewriter), delayed_rewr_49_2<delayed_rewr_443_2<data_expression, data_expression>, delayed_rewr_93_2<delayed_rewr_487_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_271_2<data_expression, data_expression>, delayed_rewr_93_2<delayed_rewr_165_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_65_2<data_expression, data_expression>, delayed_rewr_93_2<delayed_rewr_112_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_110_2<data_expression, data_expression>, delayed_rewr_114_2<data_expression, data_expression>>>>>>>>(delayed_rewr_443_2<data_expression, data_expression>(var_0, var_5,  this_rewriter), delayed_rewr_93_2<delayed_rewr_487_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_271_2<data_expression, data_expression>, delayed_rewr_93_2<delayed_rewr_165_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_65_2<data_expression, data_expression>, delayed_rewr_93_2<delayed_rewr_112_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_110_2<data_expression, data_expression>, delayed_rewr_114_2<data_expression, data_expression>>>>>>>(delayed_rewr_487_2<data_expression, data_expression>(var_1, var_6,  this_rewriter), delayed_rewr_49_2<delayed_rewr_271_2<data_expression, data_expression>, delayed_rewr_93_2<delayed_rewr_165_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_65_2<data_expression, data_expression>, delayed_rewr_93_2<delayed_rewr_112_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_110_2<data_expression, data_expression>, delayed_rewr_114_2<data_expression, data_expression>>>>>>(delayed_rewr_271_2<data_expression, data_expression>(var_1, var_6,  this_rewriter), delayed_rewr_93_2<delayed_rewr_165_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_65_2<data_expression, data_expression>, delayed_rewr_93_2<delayed_rewr_112_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_110_2<data_expression, data_expression>, delayed_rewr_114_2<data_expression, data_expression>>>>>(delayed_rewr_165_2<data_expression, data_expression>(var_2, var_7,  this_rewriter), delayed_rewr_49_2<delayed_rewr_65_2<data_expression, data_expression>, delayed_rewr_93_2<delayed_rewr_112_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_110_2<data_expression, data_expression>, delayed_rewr_114_2<data_expression, data_expression>>>>(delayed_rewr_65_2<data_expression, data_expression>(var_2, var_7,  this_rewriter), delayed_rewr_93_2<delayed_rewr_112_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_110_2<data_expression, data_expression>, delayed_rewr_114_2<data_expression, data_expression>>>(delayed_rewr_112_2<data_expression, data_expression>(var_3, var_8,  this_rewriter), delayed_rewr_49_2<delayed_rewr_110_2<data_expression, data_expression>, delayed_rewr_114_2<data_expression, data_expression>>(delayed_rewr_110_2<data_expression, data_expression>(var_3, var_8,  this_rewriter), delayed_rewr_114_2<data_expression, data_expression>(var_4, var_9,  this_rewriter),  this_rewriter),  this_rewriter),  this_rewriter),  this_rewriter),  this_rewriter),  this_rewriter),  this_rewriter),  this_rewriter); // R1 @var_0 < @var_5 || @var_0 == @var_5 && (@var_1 < @var_6 || @var_1 == @var_6 && (@var_2 < @var_7 || @var_2 == @var_7 && (@var_3 < @var_8 || @var_3 == @var_8 && @var_4 <= @var_9)))
        }
        else
        {
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9a8b30))), arg0, arg1);
  }

  static inline data_expression rewr_628_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_628_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_628_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_628_2(t[0], t[1], this_rewriter); }


  // [93] ||: Bool # Bool -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_93_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_93_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_93_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [114] <=: List(PlaceTokens) # List(PlaceTokens) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_114_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_114_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_114_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [110] ==: List(PlaceTokens) # List(PlaceTokens) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_110_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_110_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_110_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [112] <: List(PlaceTokens) # List(PlaceTokens) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_112_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_112_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_112_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [65] ==: Nat # Nat -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_65_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_65_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_65_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [165] <: Nat # Nat -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_165_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_165_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_165_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [271] ==: Bool # Bool -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_271_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_271_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_271_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [487] <: Bool # Bool -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_487_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_487_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_487_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [628] @less_equal_arguments: Trans # Trans -> Bool
  static inline const data_expression& rewr_628_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6b290);
  }

  static inline data_expression rewr_628_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_628_0(this_rewriter); }

  static inline data_expression rewr_628_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_628_0(this_rewriter); }


  // [627] @less_arguments: Trans # Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_627_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(trans, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@D(@@N(@@F(trans, @@S(@var_5, @@N(@@S(@var_6, @@N(@@S(@var_7, @@N(@@S(@var_8, @@N(@@S(@var_9, @@R(@var_0 < @var_5 || @var_0 == @var_5 && (@var_1 < @var_6 || @var_1 == @var_6 && (@var_2 < @var_7 || @var_2 == @var_7 && (@var_3 < @var_8 || @var_3 == @var_8 && @var_4 < @var_9))))))))))))), @@X)))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916da0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[4]); // S2
        const data_expression& var_4 = down_cast<data_expression>(arg0[5]); // S2
        if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916da0) // F1
        {
          const data_expression& var_5 = down_cast<data_expression>(arg1[1]); // S2
          const data_expression& var_6 = down_cast<data_expression>(arg1[2]); // S2
          const data_expression& var_7 = down_cast<data_expression>(arg1[3]); // S2
          const data_expression& var_8 = down_cast<data_expression>(arg1[4]); // S2
          const data_expression& var_9 = down_cast<data_expression>(arg1[5]); // S2
          return rewr_93_2(rewr_456_2(var_0, var_5,  this_rewriter), delayed_rewr_49_2<delayed_rewr_443_2<data_expression, data_expression>, delayed_rewr_93_2<delayed_rewr_487_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_271_2<data_expression, data_expression>, delayed_rewr_93_2<delayed_rewr_165_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_65_2<data_expression, data_expression>, delayed_rewr_93_2<delayed_rewr_112_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_110_2<data_expression, data_expression>, delayed_rewr_112_2<data_expression, data_expression>>>>>>>>(delayed_rewr_443_2<data_expression, data_expression>(var_0, var_5,  this_rewriter), delayed_rewr_93_2<delayed_rewr_487_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_271_2<data_expression, data_expression>, delayed_rewr_93_2<delayed_rewr_165_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_65_2<data_expression, data_expression>, delayed_rewr_93_2<delayed_rewr_112_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_110_2<data_expression, data_expression>, delayed_rewr_112_2<data_expression, data_expression>>>>>>>(delayed_rewr_487_2<data_expression, data_expression>(var_1, var_6,  this_rewriter), delayed_rewr_49_2<delayed_rewr_271_2<data_expression, data_expression>, delayed_rewr_93_2<delayed_rewr_165_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_65_2<data_expression, data_expression>, delayed_rewr_93_2<delayed_rewr_112_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_110_2<data_expression, data_expression>, delayed_rewr_112_2<data_expression, data_expression>>>>>>(delayed_rewr_271_2<data_expression, data_expression>(var_1, var_6,  this_rewriter), delayed_rewr_93_2<delayed_rewr_165_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_65_2<data_expression, data_expression>, delayed_rewr_93_2<delayed_rewr_112_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_110_2<data_expression, data_expression>, delayed_rewr_112_2<data_expression, data_expression>>>>>(delayed_rewr_165_2<data_expression, data_expression>(var_2, var_7,  this_rewriter), delayed_rewr_49_2<delayed_rewr_65_2<data_expression, data_expression>, delayed_rewr_93_2<delayed_rewr_112_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_110_2<data_expression, data_expression>, delayed_rewr_112_2<data_expression, data_expression>>>>(delayed_rewr_65_2<data_expression, data_expression>(var_2, var_7,  this_rewriter), delayed_rewr_93_2<delayed_rewr_112_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_110_2<data_expression, data_expression>, delayed_rewr_112_2<data_expression, data_expression>>>(delayed_rewr_112_2<data_expression, data_expression>(var_3, var_8,  this_rewriter), delayed_rewr_49_2<delayed_rewr_110_2<data_expression, data_expression>, delayed_rewr_112_2<data_expression, data_expression>>(delayed_rewr_110_2<data_expression, data_expression>(var_3, var_8,  this_rewriter), delayed_rewr_112_2<data_expression, data_expression>(var_4, var_9,  this_rewriter),  this_rewriter),  this_rewriter),  this_rewriter),  this_rewriter),  this_rewriter),  this_rewriter),  this_rewriter),  this_rewriter); // R1 @var_0 < @var_5 || @var_0 == @var_5 && (@var_1 < @var_6 || @var_1 == @var_6 && (@var_2 < @var_7 || @var_2 == @var_7 && (@var_3 < @var_8 || @var_3 == @var_8 && @var_4 < @var_9)))
        }
        else
        {
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9a8b00))), arg0, arg1);
  }

  static inline data_expression rewr_627_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_627_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_627_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_627_2(t[0], t[1], this_rewriter); }


  // [627] @less_arguments: Trans # Trans -> Bool
  static inline const data_expression& rewr_627_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6cad0);
  }

  static inline data_expression rewr_627_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_627_0(this_rewriter); }

  static inline data_expression rewr_627_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_627_0(this_rewriter); }


  // [626] @equal_arguments: Trans # Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_626_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(trans, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@D(@@N(@@M(@var_0, @@R(true), @@F(trans, @@S(@var_6, @@N(@@S(@var_7, @@N(@@S(@var_8, @@N(@@S(@var_9, @@N(@@S(@var_10, @@R(@var_1 == @var_6 && @var_2 == @var_7 && @var_3 == @var_8 && @var_4 == @var_9 && @var_5 == @var_10)))))))))), @@X))))))))))))), @@N(@@M(@var_0, @@R(true), @@X))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916da0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = down_cast<data_expression>(arg0[4]); // S2
        const data_expression& var_5 = down_cast<data_expression>(arg0[5]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916da0) // F1
          {
            const data_expression& var_6 = down_cast<data_expression>(arg1[1]); // S2
            const data_expression& var_7 = down_cast<data_expression>(arg1[2]); // S2
            const data_expression& var_8 = down_cast<data_expression>(arg1[3]); // S2
            const data_expression& var_9 = down_cast<data_expression>(arg1[4]); // S2
            const data_expression& var_10 = down_cast<data_expression>(arg1[5]); // S2
            return rewr_49_2(rewr_443_2(var_1, var_6,  this_rewriter), delayed_rewr_49_2<delayed_rewr_271_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_65_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_110_2<data_expression, data_expression>, delayed_rewr_110_2<data_expression, data_expression>>>>(delayed_rewr_271_2<data_expression, data_expression>(var_2, var_7,  this_rewriter), delayed_rewr_49_2<delayed_rewr_65_2<data_expression, data_expression>, delayed_rewr_49_2<delayed_rewr_110_2<data_expression, data_expression>, delayed_rewr_110_2<data_expression, data_expression>>>(delayed_rewr_65_2<data_expression, data_expression>(var_3, var_8,  this_rewriter), delayed_rewr_49_2<delayed_rewr_110_2<data_expression, data_expression>, delayed_rewr_110_2<data_expression, data_expression>>(delayed_rewr_110_2<data_expression, data_expression>(var_4, var_9,  this_rewriter), delayed_rewr_110_2<data_expression, data_expression>(var_5, var_10,  this_rewriter),  this_rewriter),  this_rewriter),  this_rewriter),  this_rewriter); // R1 @var_1 == @var_6 && @var_2 == @var_7 && @var_3 == @var_8 && @var_4 == @var_9 && @var_5 == @var_10
          }
          else
          {
          }
        }
      }
      else
      {
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9a8ad0))), arg0, arg1);
  }

  static inline data_expression rewr_626_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_626_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_626_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_626_2(t[0], t[1], this_rewriter); }


  // [626] @equal_arguments: Trans # Trans -> Bool
  static inline const data_expression& rewr_626_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf960b80);
  }

  static inline data_expression rewr_626_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_626_0(this_rewriter); }

  static inline data_expression rewr_626_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_626_0(this_rewriter); }


  // [625] @to_pos: Trans -> Pos
  template < class DATA_EXPR0>
  static inline data_expression rewr_625_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(trans, @@N(@@N(@@N(@@N(@@R(1))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916da0) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6ce80); // R1 1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9a8aa0))), arg0);
  }

  static inline data_expression rewr_625_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_625_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_625_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_625_1(t[0], this_rewriter); }


  // [625] @to_pos: Trans -> Pos
  static inline const data_expression& rewr_625_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6d4b0);
  }

  static inline data_expression rewr_625_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_625_0(this_rewriter); }

  static inline data_expression rewr_625_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_625_0(this_rewriter); }


  // [61] to: Trans -> List(PlaceTokens)
  template < class DATA_EXPR0>
  static inline data_expression rewr_61_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(trans, @@N(@@N(@@N(@@N(@@S(@var_4, @@R(@var_4)))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916da0) // F1
      {
        const data_expression& var_4 = down_cast<data_expression>(arg0[5]); // S2
        return var_4; // R1 @var_4
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf917910))), arg0);
  }

  static inline data_expression rewr_61_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_61_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_61_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_61_1(t[0], this_rewriter); }


  // [61] to: Trans -> List(PlaceTokens)
  static inline const data_expression& rewr_61_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa2240);
  }

  static inline data_expression rewr_61_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_61_0(this_rewriter); }

  static inline data_expression rewr_61_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_61_0(this_rewriter); }


  // [46] from: Trans -> List(PlaceTokens)
  template < class DATA_EXPR0>
  static inline data_expression rewr_46_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(trans, @@N(@@N(@@N(@@S(@var_3, @@N(@@R(@var_3)))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916da0) // F1
      {
        const data_expression& var_3 = down_cast<data_expression>(arg0[4]); // S2
        return var_3; // R1 @var_3
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9171f0))), arg0);
  }

  static inline data_expression rewr_46_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_46_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_46_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_46_1(t[0], this_rewriter); }


  // [46] from: Trans -> List(PlaceTokens)
  static inline const data_expression& rewr_46_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6ecd0);
  }

  static inline data_expression rewr_46_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_46_0(this_rewriter); }

  static inline data_expression rewr_46_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_46_0(this_rewriter); }


  // [51] priority: Trans -> Nat
  template < class DATA_EXPR0>
  static inline data_expression rewr_51_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(trans, @@N(@@N(@@S(@var_2, @@N(@@N(@@R(@var_2)))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916da0) // F1
      {
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        return var_2; // R1 @var_2
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf917430))), arg0);
  }

  static inline data_expression rewr_51_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_51_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_51_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_51_1(t[0], this_rewriter); }


  // [51] priority: Trans -> Nat
  static inline const data_expression& rewr_51_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf901360);
  }

  static inline data_expression rewr_51_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_51_0(this_rewriter); }

  static inline data_expression rewr_51_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_51_0(this_rewriter); }


  // [44] guard: Trans -> Bool
  template < class DATA_EXPR0>
  static inline data_expression rewr_44_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(trans, @@N(@@S(@var_1, @@N(@@N(@@N(@@R(@var_1)))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916da0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf917130))), arg0);
  }

  static inline data_expression rewr_44_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_44_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_44_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_44_1(t[0], this_rewriter); }


  // [44] guard: Trans -> Bool
  static inline const data_expression& rewr_44_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6ed00);
  }

  static inline data_expression rewr_44_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_44_0(this_rewriter); }

  static inline data_expression rewr_44_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_44_0(this_rewriter); }


  // [95] trans_name: Trans -> Trans_name
  template < class DATA_EXPR0>
  static inline data_expression rewr_95_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(trans, @@S(@var_0, @@N(@@N(@@N(@@N(@@R(@var_0)))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916da0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        return var_0; // R1 @var_0
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9190e0))), arg0);
  }

  static inline data_expression rewr_95_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_95_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_95_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_95_1(t[0], this_rewriter); }


  // [95] trans_name: Trans -> Trans_name
  static inline const data_expression& rewr_95_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa22a0);
  }

  static inline data_expression rewr_95_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_95_0(this_rewriter); }

  static inline data_expression rewr_95_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_95_0(this_rewriter); }


  // [608] @less_equal_arguments: Trans_name # Trans_name -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_608_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(t3, @@D(@@N(@@F(t3, @@R(true), @@X))), @@F(t0, @@D(@@N(@@F(t0, @@R(true), @@X))), @@F(t2, @@D(@@N(@@F(t2, @@R(true), @@X))), @@F(t1, @@D(@@N(@@F(t1, @@R(true), @@X))), @@X))))
    {
      if (uint_address(arg0) == 0x55a6cf916d70) // F1
      {
        if (uint_address(arg1) == 0x55a6cf916d70) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf917070) // F1
        {
          if (uint_address(arg1) == 0x55a6cf917070) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
        else
        {
          if (uint_address(arg0) == 0x55a6cf916e60) // F1
          {
            if (uint_address(arg1) == 0x55a6cf916e60) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
            }
          }
          else
          {
            if (uint_address(arg0) == 0x55a6cf916fe0) // F1
            {
              if (uint_address(arg1) == 0x55a6cf916fe0) // F1
              {
                return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
              }
              else
              {
              }
            }
            else
            {
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9a7780))), arg0, arg1);
  }

  static inline data_expression rewr_608_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_608_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_608_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_608_2(t[0], t[1], this_rewriter); }


  // [608] @less_equal_arguments: Trans_name # Trans_name -> Bool
  static inline const data_expression& rewr_608_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6a600);
  }

  static inline data_expression rewr_608_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_608_0(this_rewriter); }

  static inline data_expression rewr_608_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_608_0(this_rewriter); }


  // [607] @less_arguments: Trans_name # Trans_name -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_607_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(t3, @@D(@@N(@@F(t3, @@R(false), @@X))), @@F(t0, @@D(@@N(@@F(t0, @@R(false), @@X))), @@F(t2, @@D(@@N(@@F(t2, @@R(false), @@X))), @@F(t1, @@D(@@N(@@F(t1, @@R(false), @@X))), @@X))))
    {
      if (uint_address(arg0) == 0x55a6cf916d70) // F1
      {
        if (uint_address(arg1) == 0x55a6cf916d70) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
        }
        else
        {
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf917070) // F1
        {
          if (uint_address(arg1) == 0x55a6cf917070) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
          }
        }
        else
        {
          if (uint_address(arg0) == 0x55a6cf916e60) // F1
          {
            if (uint_address(arg1) == 0x55a6cf916e60) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
            }
            else
            {
            }
          }
          else
          {
            if (uint_address(arg0) == 0x55a6cf916fe0) // F1
            {
              if (uint_address(arg1) == 0x55a6cf916fe0) // F1
              {
                return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
              }
              else
              {
              }
            }
            else
            {
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9a7750))), arg0, arg1);
  }

  static inline data_expression rewr_607_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_607_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_607_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_607_2(t[0], t[1], this_rewriter); }


  // [607] @less_arguments: Trans_name # Trans_name -> Bool
  static inline const data_expression& rewr_607_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6eb50);
  }

  static inline data_expression rewr_607_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_607_0(this_rewriter); }

  static inline data_expression rewr_607_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_607_0(this_rewriter); }


  // [606] @equal_arguments: Trans_name # Trans_name -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_606_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(t3, @@D(@@N(@@M(@var_0, @@R(true), @@F(t3, @@R(true), @@X)))), @@F(t0, @@D(@@N(@@M(@var_0, @@R(true), @@F(t0, @@R(true), @@X)))), @@F(t2, @@D(@@N(@@M(@var_0, @@R(true), @@F(t2, @@R(true), @@X)))), @@F(t1, @@D(@@N(@@M(@var_0, @@R(true), @@F(t1, @@R(true), @@X)))), @@N(@@M(@var_0, @@R(true), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address(arg0) == 0x55a6cf916d70) // F1
      {
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
          if (uint_address(arg1) == 0x55a6cf916d70) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf917070) // F1
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (uint_address(arg1) == 0x55a6cf917070) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
            }
          }
        }
        else
        {
          if (uint_address(arg0) == 0x55a6cf916e60) // F1
          {
            if (var_0 == arg1) // M
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
              if (uint_address(arg1) == 0x55a6cf916e60) // F1
              {
                return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
              }
              else
              {
              }
            }
          }
          else
          {
            if (uint_address(arg0) == 0x55a6cf916fe0) // F1
            {
              if (var_0 == arg1) // M
              {
                return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
              }
              else
              {
                if (uint_address(arg1) == 0x55a6cf916fe0) // F1
                {
                  return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
                }
                else
                {
                }
              }
            }
            else
            {
              if (var_0 == arg1) // M
              {
                return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
              }
              else
              {
              }
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9a7720))), arg0, arg1);
  }

  static inline data_expression rewr_606_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_606_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_606_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_606_2(t[0], t[1], this_rewriter); }


  // [606] @equal_arguments: Trans_name # Trans_name -> Bool
  static inline const data_expression& rewr_606_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6a9a0);
  }

  static inline data_expression rewr_606_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_606_0(this_rewriter); }

  static inline data_expression rewr_606_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_606_0(this_rewriter); }


  // [605] @to_pos: Trans_name -> Pos
  template < class DATA_EXPR0>
  static inline data_expression rewr_605_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(t3, @@R(4), @@F(t0, @@R(1), @@F(t2, @@R(3), @@F(t1, @@R(2), @@X))))
    {
      if (uint_address(arg0) == 0x55a6cf916d70) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfaa0970); // R1 4
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf917070) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6ce80); // R1 1
        }
        else
        {
          if (uint_address(arg0) == 0x55a6cf916e60) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa68070); // R1 3
          }
          else
          {
            if (uint_address(arg0) == 0x55a6cf916fe0) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa67ef0); // R1 2
            }
            else
            {
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9a76f0))), arg0);
  }

  static inline data_expression rewr_605_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_605_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_605_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_605_1(t[0], this_rewriter); }


  // [605] @to_pos: Trans_name -> Pos
  static inline const data_expression& rewr_605_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa67f50);
  }

  static inline data_expression rewr_605_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_605_0(this_rewriter); }

  static inline data_expression rewr_605_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_605_0(this_rewriter); }


  // [593] @less_equal_arguments: Place # Place -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_593_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(p5, @@D(@@N(@@F(p5, @@R(true), @@X))), @@F(p0, @@D(@@N(@@F(p0, @@R(true), @@X))), @@F(p4, @@D(@@N(@@F(p4, @@R(true), @@X))), @@F(p1, @@D(@@N(@@F(p1, @@R(true), @@X))), @@F(p3, @@D(@@N(@@F(p3, @@R(true), @@X))), @@F(p2, @@D(@@N(@@F(p2, @@R(true), @@X))), @@X))))))
    {
      if (uint_address(arg0) == 0x55a6cf916b00) // F1
      {
        if (uint_address(arg1) == 0x55a6cf916b00) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916770) // F1
        {
          if (uint_address(arg1) == 0x55a6cf916770) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
        else
        {
          if (uint_address(arg0) == 0x55a6cf916bf0) // F1
          {
            if (uint_address(arg1) == 0x55a6cf916bf0) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
            }
          }
          else
          {
            if (uint_address(arg0) == 0x55a6cf916ec0) // F1
            {
              if (uint_address(arg1) == 0x55a6cf916ec0) // F1
              {
                return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
              }
              else
              {
              }
            }
            else
            {
              if (uint_address(arg0) == 0x55a6cf916c80) // F1
              {
                if (uint_address(arg1) == 0x55a6cf916c80) // F1
                {
                  return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
                }
                else
                {
                }
              }
              else
              {
                if (uint_address(arg0) == 0x55a6cf916e00) // F1
                {
                  if (uint_address(arg1) == 0x55a6cf916e00) // F1
                  {
                    return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
                  }
                  else
                  {
                  }
                }
                else
                {
                }
              }
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9a6910))), arg0, arg1);
  }

  static inline data_expression rewr_593_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_593_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_593_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_593_2(t[0], t[1], this_rewriter); }


  // [593] @less_equal_arguments: Place # Place -> Bool
  static inline const data_expression& rewr_593_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa1230);
  }

  static inline data_expression rewr_593_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_593_0(this_rewriter); }

  static inline data_expression rewr_593_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_593_0(this_rewriter); }


  // [592] @less_arguments: Place # Place -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_592_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(p5, @@D(@@N(@@F(p5, @@R(false), @@X))), @@F(p0, @@D(@@N(@@F(p0, @@R(false), @@X))), @@F(p4, @@D(@@N(@@F(p4, @@R(false), @@X))), @@F(p1, @@D(@@N(@@F(p1, @@R(false), @@X))), @@F(p3, @@D(@@N(@@F(p3, @@R(false), @@X))), @@F(p2, @@D(@@N(@@F(p2, @@R(false), @@X))), @@X))))))
    {
      if (uint_address(arg0) == 0x55a6cf916b00) // F1
      {
        if (uint_address(arg1) == 0x55a6cf916b00) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
        }
        else
        {
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916770) // F1
        {
          if (uint_address(arg1) == 0x55a6cf916770) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
          }
        }
        else
        {
          if (uint_address(arg0) == 0x55a6cf916bf0) // F1
          {
            if (uint_address(arg1) == 0x55a6cf916bf0) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
            }
            else
            {
            }
          }
          else
          {
            if (uint_address(arg0) == 0x55a6cf916ec0) // F1
            {
              if (uint_address(arg1) == 0x55a6cf916ec0) // F1
              {
                return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
              }
              else
              {
              }
            }
            else
            {
              if (uint_address(arg0) == 0x55a6cf916c80) // F1
              {
                if (uint_address(arg1) == 0x55a6cf916c80) // F1
                {
                  return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
                }
                else
                {
                }
              }
              else
              {
                if (uint_address(arg0) == 0x55a6cf916e00) // F1
                {
                  if (uint_address(arg1) == 0x55a6cf916e00) // F1
                  {
                    return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
                  }
                  else
                  {
                  }
                }
                else
                {
                }
              }
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9a68e0))), arg0, arg1);
  }

  static inline data_expression rewr_592_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_592_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_592_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_592_2(t[0], t[1], this_rewriter); }


  // [592] @less_arguments: Place # Place -> Bool
  static inline const data_expression& rewr_592_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa2210);
  }

  static inline data_expression rewr_592_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_592_0(this_rewriter); }

  static inline data_expression rewr_592_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_592_0(this_rewriter); }


  // [591] @equal_arguments: Place # Place -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_591_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(p5, @@D(@@N(@@M(@var_0, @@R(true), @@F(p5, @@R(true), @@X)))), @@F(p0, @@D(@@N(@@M(@var_0, @@R(true), @@F(p0, @@R(true), @@X)))), @@F(p4, @@D(@@N(@@M(@var_0, @@R(true), @@F(p4, @@R(true), @@X)))), @@F(p1, @@D(@@N(@@M(@var_0, @@R(true), @@F(p1, @@R(true), @@X)))), @@F(p3, @@D(@@N(@@M(@var_0, @@R(true), @@F(p3, @@R(true), @@X)))), @@F(p2, @@D(@@N(@@M(@var_0, @@R(true), @@F(p2, @@R(true), @@X)))), @@N(@@M(@var_0, @@R(true), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address(arg0) == 0x55a6cf916b00) // F1
      {
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
          if (uint_address(arg1) == 0x55a6cf916b00) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916770) // F1
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (uint_address(arg1) == 0x55a6cf916770) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
            }
          }
        }
        else
        {
          if (uint_address(arg0) == 0x55a6cf916bf0) // F1
          {
            if (var_0 == arg1) // M
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
              if (uint_address(arg1) == 0x55a6cf916bf0) // F1
              {
                return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
              }
              else
              {
              }
            }
          }
          else
          {
            if (uint_address(arg0) == 0x55a6cf916ec0) // F1
            {
              if (var_0 == arg1) // M
              {
                return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
              }
              else
              {
                if (uint_address(arg1) == 0x55a6cf916ec0) // F1
                {
                  return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
                }
                else
                {
                }
              }
            }
            else
            {
              if (uint_address(arg0) == 0x55a6cf916c80) // F1
              {
                if (var_0 == arg1) // M
                {
                  return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
                }
                else
                {
                  if (uint_address(arg1) == 0x55a6cf916c80) // F1
                  {
                    return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
                  }
                  else
                  {
                  }
                }
              }
              else
              {
                if (uint_address(arg0) == 0x55a6cf916e00) // F1
                {
                  if (var_0 == arg1) // M
                  {
                    return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
                  }
                  else
                  {
                    if (uint_address(arg1) == 0x55a6cf916e00) // F1
                    {
                      return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
                    }
                    else
                    {
                    }
                  }
                }
                else
                {
                  if (var_0 == arg1) // M
                  {
                    return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
                  }
                  else
                  {
                  }
                }
              }
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9a68b0))), arg0, arg1);
  }

  static inline data_expression rewr_591_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_591_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_591_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_591_2(t[0], t[1], this_rewriter); }


  // [591] @equal_arguments: Place # Place -> Bool
  static inline const data_expression& rewr_591_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa09a0);
  }

  static inline data_expression rewr_591_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_591_0(this_rewriter); }

  static inline data_expression rewr_591_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_591_0(this_rewriter); }


  // [590] @to_pos: Place -> Pos
  template < class DATA_EXPR0>
  static inline data_expression rewr_590_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(p5, @@R(6), @@F(p0, @@R(1), @@F(p4, @@R(5), @@F(p1, @@R(2), @@F(p3, @@R(4), @@F(p2, @@R(3), @@X))))))
    {
      if (uint_address(arg0) == 0x55a6cf916b00) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cf960ff0); // R1 6
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916770) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6ce80); // R1 1
        }
        else
        {
          if (uint_address(arg0) == 0x55a6cf916bf0) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa67d80); // R1 5
          }
          else
          {
            if (uint_address(arg0) == 0x55a6cf916ec0) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa67ef0); // R1 2
            }
            else
            {
              if (uint_address(arg0) == 0x55a6cf916c80) // F1
              {
                return *reinterpret_cast<const data_expression*>(0x55a6cfaa0970); // R1 4
              }
              else
              {
                if (uint_address(arg0) == 0x55a6cf916e00) // F1
                {
                  return *reinterpret_cast<const data_expression*>(0x55a6cfa68070); // R1 3
                }
                else
                {
                }
              }
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9a6880))), arg0);
  }

  static inline data_expression rewr_590_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_590_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_590_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_590_1(t[0], this_rewriter); }


  // [590] @to_pos: Place -> Pos
  static inline const data_expression& rewr_590_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6ec10);
  }

  static inline data_expression rewr_590_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_590_0(this_rewriter); }

  static inline data_expression rewr_590_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_590_0(this_rewriter); }


  // [578] >: @NatPair # @NatPair -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_578_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_533_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf989350))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_578_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_578_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_578_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_578_2(t[0], t[1], this_rewriter); }


  // [578] >: @NatPair # @NatPair -> Bool
  static inline const data_expression& rewr_578_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6b320);
  }

  static inline data_expression rewr_578_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_578_0(this_rewriter); }

  static inline data_expression rewr_578_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_578_0(this_rewriter); }


  // [577] >=: @NatPair # @NatPair -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_577_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_534_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf989320))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_577_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_577_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_577_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_577_2(t[0], t[1], this_rewriter); }


  // [577] >=: @NatPair # @NatPair -> Bool
  static inline const data_expression& rewr_577_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6ec70);
  }

  static inline data_expression rewr_577_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_577_0(this_rewriter); }

  static inline data_expression rewr_577_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_577_0(this_rewriter); }


  // [576] if: Bool # @NatPair # @NatPair -> @NatPair
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_576_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9892f0))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_576_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_576_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_576_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_576_3(t[0], t[1], t[2], this_rewriter); }


  // [576] if: Bool # @NatPair # @NatPair -> @NatPair
  static inline const data_expression& rewr_576_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6ebb0);
  }

  static inline data_expression rewr_576_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_576_0(this_rewriter); }

  static inline data_expression rewr_576_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_576_0(this_rewriter); }


  // [575] !=: @NatPair # @NatPair -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_575_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_532_2(local_rewrite(var_0, this_rewriter), local_rewrite(var_1, this_rewriter),  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9892c0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_575_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_575_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_575_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_575_2(t[0], t[1], this_rewriter); }


  // [575] !=: @NatPair # @NatPair -> Bool
  static inline const data_expression& rewr_575_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf960bb0);
  }

  static inline data_expression rewr_575_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_575_0(this_rewriter); }

  static inline data_expression rewr_575_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_575_0(this_rewriter); }


  // [534] <=: @NatPair # @NatPair -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_534_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(@cPair, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(true), @@F(@cPair, @@S(@var_3, @@N(@@S(@var_4, @@R(@var_1 < @var_3 || @var_1 == @var_3 && @var_2 <= @var_4)))), @@X))))))), @@N(@@M(@var_0, @@R(true), @@X))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9854e0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf9854e0) // F1
          {
            const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
            const data_expression& var_4 = down_cast<data_expression>(arg1[2]); // S2
            return rewr_93_2(rewr_165_2(var_1, var_3,  this_rewriter), delayed_rewr_49_2<delayed_rewr_65_2<data_expression, data_expression>, delayed_rewr_52_2<data_expression, data_expression>>(delayed_rewr_65_2<data_expression, data_expression>(var_1, var_3,  this_rewriter), delayed_rewr_52_2<data_expression, data_expression>(var_2, var_4,  this_rewriter),  this_rewriter),  this_rewriter); // R1 @var_1 < @var_3 || @var_1 == @var_3 && @var_2 <= @var_4
          }
          else
          {
          }
        }
      }
      else
      {
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf987220))), arg0, arg1);
  }

  static inline data_expression rewr_534_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_534_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_534_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_534_2(t[0], t[1], this_rewriter); }


  // [534] <=: @NatPair # @NatPair -> Bool
  static inline const data_expression& rewr_534_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6edc0);
  }

  static inline data_expression rewr_534_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_534_0(this_rewriter); }

  static inline data_expression rewr_534_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_534_0(this_rewriter); }


  // [533] <: @NatPair # @NatPair -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_533_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(@cPair, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(false), @@F(@cPair, @@S(@var_3, @@N(@@S(@var_4, @@R(@var_1 < @var_3 || @var_1 == @var_3 && @var_2 < @var_4)))), @@X))))))), @@N(@@M(@var_0, @@R(false), @@X))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9854e0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
        }
        else
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf9854e0) // F1
          {
            const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
            const data_expression& var_4 = down_cast<data_expression>(arg1[2]); // S2
            return rewr_93_2(rewr_165_2(var_1, var_3,  this_rewriter), delayed_rewr_49_2<delayed_rewr_65_2<data_expression, data_expression>, delayed_rewr_165_2<data_expression, data_expression>>(delayed_rewr_65_2<data_expression, data_expression>(var_1, var_3,  this_rewriter), delayed_rewr_165_2<data_expression, data_expression>(var_2, var_4,  this_rewriter),  this_rewriter),  this_rewriter); // R1 @var_1 < @var_3 || @var_1 == @var_3 && @var_2 < @var_4
          }
          else
          {
          }
        }
      }
      else
      {
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf987130))), arg0, arg1);
  }

  static inline data_expression rewr_533_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_533_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_533_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_533_2(t[0], t[1], this_rewriter); }


  // [533] <: @NatPair # @NatPair -> Bool
  static inline const data_expression& rewr_533_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6ed60);
  }

  static inline data_expression rewr_533_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_533_0(this_rewriter); }

  static inline data_expression rewr_533_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_533_0(this_rewriter); }


  // [532] ==: @NatPair # @NatPair -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_532_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(@cPair, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(true), @@F(@cPair, @@S(@var_3, @@N(@@S(@var_4, @@R(@var_1 == @var_3 && @var_2 == @var_4)))), @@X))))))), @@N(@@M(@var_0, @@R(true), @@X))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9854e0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf9854e0) // F1
          {
            const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
            const data_expression& var_4 = down_cast<data_expression>(arg1[2]); // S2
            return rewr_49_2(rewr_65_2(var_1, var_3,  this_rewriter), delayed_rewr_65_2<data_expression, data_expression>(var_2, var_4,  this_rewriter),  this_rewriter); // R1 @var_1 == @var_3 && @var_2 == @var_4
          }
          else
          {
          }
        }
      }
      else
      {
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf987010))), arg0, arg1);
  }

  static inline data_expression rewr_532_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_532_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_532_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_532_2(t[0], t[1], this_rewriter); }


  // [532] ==: @NatPair # @NatPair -> Bool
  static inline const data_expression& rewr_532_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6b4d0);
  }

  static inline data_expression rewr_532_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_532_0(this_rewriter); }

  static inline data_expression rewr_532_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_532_0(this_rewriter); }


  // [574] >: MarkingTrans # MarkingTrans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_574_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_571_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf989080))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_574_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_574_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_574_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_574_2(t[0], t[1], this_rewriter); }


  // [574] >: MarkingTrans # MarkingTrans -> Bool
  static inline const data_expression& rewr_574_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6f0a0);
  }

  static inline data_expression rewr_574_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_574_0(this_rewriter); }

  static inline data_expression rewr_574_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_574_0(this_rewriter); }


  // [573] >=: MarkingTrans # MarkingTrans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_573_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_572_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf989050))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_573_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_573_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_573_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_573_2(t[0], t[1], this_rewriter); }


  // [573] >=: MarkingTrans # MarkingTrans -> Bool
  static inline const data_expression& rewr_573_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf961770);
  }

  static inline data_expression rewr_573_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_573_0(this_rewriter); }

  static inline data_expression rewr_573_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_573_0(this_rewriter); }


  // [572] <=: MarkingTrans # MarkingTrans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_572_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@C(@to_pos(@var_0) > @to_pos(@var_1), @@R(false), @@C(@to_pos(@var_0) == @to_pos(@var_1), @@R(@less_equal_arguments(@var_0, @var_1)), @@C(@to_pos(@var_0) < @to_pos(@var_1), @@R(true), @@M(@var_0, @@R(true), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      if (rewr_541_2(delayed_rewr_709_1<data_expression>(var_0,  this_rewriter), delayed_rewr_709_1<data_expression>(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (rewr_431_2(rewr_709_1(var_0,  this_rewriter), rewr_709_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_712_2(var_0, var_1,  this_rewriter); // R1 @less_equal_arguments(@var_0, @var_1)
        }
        else
        {
          if (rewr_200_2(delayed_rewr_709_1<data_expression>(var_0,  this_rewriter), rewr_709_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (var_0 == arg1) // M
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf989020))), arg0, arg1);
  }

  static inline data_expression rewr_572_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_572_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_572_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_572_2(t[0], t[1], this_rewriter); }


  // [709] @to_pos: MarkingTrans -> Pos
  template < class DATA_EXPR0>
  class delayed_rewr_709_1
  {
    protected:
      const DATA_EXPR0& m_t0;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_709_1(const DATA_EXPR0& t0, RewriterCompilingJitty* tr)
        : m_t0(t0), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_709_1(m_t0, this_rewriter);
      }
  };
  
  // [572] <=: MarkingTrans # MarkingTrans -> Bool
  static inline const data_expression& rewr_572_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa0ee0);
  }

  static inline data_expression rewr_572_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_572_0(this_rewriter); }

  static inline data_expression rewr_572_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_572_0(this_rewriter); }


  // [571] <: MarkingTrans # MarkingTrans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_571_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@C(@to_pos(@var_0) > @to_pos(@var_1), @@R(false), @@C(@to_pos(@var_0) == @to_pos(@var_1), @@R(@less_arguments(@var_0, @var_1)), @@C(@to_pos(@var_0) < @to_pos(@var_1), @@R(true), @@M(@var_0, @@R(false), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      if (rewr_541_2(delayed_rewr_709_1<data_expression>(var_0,  this_rewriter), delayed_rewr_709_1<data_expression>(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (rewr_431_2(rewr_709_1(var_0,  this_rewriter), rewr_709_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_711_2(var_0, var_1,  this_rewriter); // R1 @less_arguments(@var_0, @var_1)
        }
        else
        {
          if (rewr_200_2(delayed_rewr_709_1<data_expression>(var_0,  this_rewriter), rewr_709_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (var_0 == arg1) // M
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
            }
            else
            {
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988ff0))), arg0, arg1);
  }

  static inline data_expression rewr_571_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_571_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_571_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_571_2(t[0], t[1], this_rewriter); }


  // [571] <: MarkingTrans # MarkingTrans -> Bool
  static inline const data_expression& rewr_571_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6eb80);
  }

  static inline data_expression rewr_571_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_571_0(this_rewriter); }

  static inline data_expression rewr_571_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_571_0(this_rewriter); }


  // [570] if: Bool # MarkingTrans # MarkingTrans -> MarkingTrans
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_570_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988fc0))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_570_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_570_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_570_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_570_3(t[0], t[1], t[2], this_rewriter); }


  // [570] if: Bool # MarkingTrans # MarkingTrans -> MarkingTrans
  static inline const data_expression& rewr_570_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6b470);
  }

  static inline data_expression rewr_570_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_570_0(this_rewriter); }

  static inline data_expression rewr_570_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_570_0(this_rewriter); }


  // [569] !=: MarkingTrans # MarkingTrans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_569_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_486_2(local_rewrite(var_0, this_rewriter), local_rewrite(var_1, this_rewriter),  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988f90))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_569_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_569_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_569_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_569_2(t[0], t[1], this_rewriter); }


  // [569] !=: MarkingTrans # MarkingTrans -> Bool
  static inline const data_expression& rewr_569_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6b770);
  }

  static inline data_expression rewr_569_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_569_0(this_rewriter); }

  static inline data_expression rewr_569_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_569_0(this_rewriter); }


  // [486] ==: MarkingTrans # MarkingTrans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_486_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@C(@to_pos(@var_0) != @to_pos(@var_1), @@R(false), @@C(@to_pos(@var_0) == @to_pos(@var_1), @@R(@equal_arguments(@var_0, @var_1)), @@M(@var_0, @@R(true), @@X))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      if (rewr_201_2(delayed_rewr_709_1<data_expression>(var_0,  this_rewriter), delayed_rewr_709_1<data_expression>(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (rewr_431_2(rewr_709_1(var_0,  this_rewriter), rewr_709_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_710_2(var_0, var_1,  this_rewriter); // R1 @equal_arguments(@var_0, @var_1)
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf984c70))), arg0, arg1);
  }

  static inline data_expression rewr_486_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_486_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_486_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_486_2(t[0], t[1], this_rewriter); }


  // [486] ==: MarkingTrans # MarkingTrans -> Bool
  static inline const data_expression& rewr_486_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6b2f0);
  }

  static inline data_expression rewr_486_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_486_0(this_rewriter); }

  static inline data_expression rewr_486_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_486_0(this_rewriter); }


  // [568] >: HistoryLogEntry # HistoryLogEntry -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_568_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_133_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988e10))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_568_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_568_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_568_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_568_2(t[0], t[1], this_rewriter); }


  // [568] >: HistoryLogEntry # HistoryLogEntry -> Bool
  static inline const data_expression& rewr_568_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf963e20);
  }

  static inline data_expression rewr_568_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_568_0(this_rewriter); }

  static inline data_expression rewr_568_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_568_0(this_rewriter); }


  // [567] >=: HistoryLogEntry # HistoryLogEntry -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_567_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_566_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988de0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_567_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_567_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_567_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_567_2(t[0], t[1], this_rewriter); }


  // [567] >=: HistoryLogEntry # HistoryLogEntry -> Bool
  static inline const data_expression& rewr_567_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa1fa0);
  }

  static inline data_expression rewr_567_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_567_0(this_rewriter); }

  static inline data_expression rewr_567_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_567_0(this_rewriter); }


  // [566] <=: HistoryLogEntry # HistoryLogEntry -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_566_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@C(@to_pos(@var_0) > @to_pos(@var_1), @@R(false), @@C(@to_pos(@var_0) == @to_pos(@var_1), @@R(@less_equal_arguments(@var_0, @var_1)), @@C(@to_pos(@var_0) < @to_pos(@var_1), @@R(true), @@M(@var_0, @@R(true), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      if (rewr_541_2(delayed_rewr_667_1<data_expression>(var_0,  this_rewriter), delayed_rewr_667_1<data_expression>(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (rewr_431_2(rewr_667_1(var_0,  this_rewriter), rewr_667_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_670_2(var_0, var_1,  this_rewriter); // R1 @less_equal_arguments(@var_0, @var_1)
        }
        else
        {
          if (rewr_200_2(delayed_rewr_667_1<data_expression>(var_0,  this_rewriter), rewr_667_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (var_0 == arg1) // M
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988db0))), arg0, arg1);
  }

  static inline data_expression rewr_566_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_566_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_566_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_566_2(t[0], t[1], this_rewriter); }


  // [667] @to_pos: HistoryLogEntry -> Pos
  template < class DATA_EXPR0>
  class delayed_rewr_667_1
  {
    protected:
      const DATA_EXPR0& m_t0;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_667_1(const DATA_EXPR0& t0, RewriterCompilingJitty* tr)
        : m_t0(t0), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_667_1(m_t0, this_rewriter);
      }
  };
  
  // [566] <=: HistoryLogEntry # HistoryLogEntry -> Bool
  static inline const data_expression& rewr_566_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa2030);
  }

  static inline data_expression rewr_566_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_566_0(this_rewriter); }

  static inline data_expression rewr_566_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_566_0(this_rewriter); }


  // [565] if: Bool # HistoryLogEntry # HistoryLogEntry -> HistoryLogEntry
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_565_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988d80))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_565_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_565_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_565_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_565_3(t[0], t[1], t[2], this_rewriter); }


  // [565] if: Bool # HistoryLogEntry # HistoryLogEntry -> HistoryLogEntry
  static inline const data_expression& rewr_565_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6af60);
  }

  static inline data_expression rewr_565_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_565_0(this_rewriter); }

  static inline data_expression rewr_565_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_565_0(this_rewriter); }


  // [416] !=: HistoryLogEntry # HistoryLogEntry -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_416_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_131_2(local_rewrite(var_0, this_rewriter), local_rewrite(var_1, this_rewriter),  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9822d0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_416_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_416_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_416_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_416_2(t[0], t[1], this_rewriter); }


  // [416] !=: HistoryLogEntry # HistoryLogEntry -> Bool
  static inline const data_expression& rewr_416_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6aea0);
  }

  static inline data_expression rewr_416_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_416_0(this_rewriter); }

  static inline data_expression rewr_416_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_416_0(this_rewriter); }


  // [133] <: HistoryLogEntry # HistoryLogEntry -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_133_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@C(@to_pos(@var_0) > @to_pos(@var_1), @@R(false), @@C(@to_pos(@var_0) == @to_pos(@var_1), @@R(@less_arguments(@var_0, @var_1)), @@C(@to_pos(@var_0) < @to_pos(@var_1), @@R(true), @@M(@var_0, @@R(false), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      if (rewr_541_2(delayed_rewr_667_1<data_expression>(var_0,  this_rewriter), delayed_rewr_667_1<data_expression>(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (rewr_431_2(rewr_667_1(var_0,  this_rewriter), rewr_667_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_669_2(var_0, var_1,  this_rewriter); // R1 @less_arguments(@var_0, @var_1)
        }
        else
        {
          if (rewr_200_2(delayed_rewr_667_1<data_expression>(var_0,  this_rewriter), rewr_667_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (var_0 == arg1) // M
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
            }
            else
            {
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91a820))), arg0, arg1);
  }

  static inline data_expression rewr_133_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_133_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_133_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_133_2(t[0], t[1], this_rewriter); }


  // [133] <: HistoryLogEntry # HistoryLogEntry -> Bool
  static inline const data_expression& rewr_133_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6b740);
  }

  static inline data_expression rewr_133_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_133_0(this_rewriter); }

  static inline data_expression rewr_133_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_133_0(this_rewriter); }


  // [131] ==: HistoryLogEntry # HistoryLogEntry -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_131_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@C(@to_pos(@var_0) != @to_pos(@var_1), @@R(false), @@C(@to_pos(@var_0) == @to_pos(@var_1), @@R(@equal_arguments(@var_0, @var_1)), @@M(@var_0, @@R(true), @@X))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      if (rewr_201_2(delayed_rewr_667_1<data_expression>(var_0,  this_rewriter), delayed_rewr_667_1<data_expression>(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (rewr_431_2(rewr_667_1(var_0,  this_rewriter), rewr_667_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_668_2(var_0, var_1,  this_rewriter); // R1 @equal_arguments(@var_0, @var_1)
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91a6a0))), arg0, arg1);
  }

  static inline data_expression rewr_131_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_131_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_131_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_131_2(t[0], t[1], this_rewriter); }


  // [131] ==: HistoryLogEntry # HistoryLogEntry -> Bool
  static inline const data_expression& rewr_131_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa1fd0);
  }

  static inline data_expression rewr_131_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_131_0(this_rewriter); }

  static inline data_expression rewr_131_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_131_0(this_rewriter); }


  // [564] >: Maybe_trans_name # Maybe_trans_name -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_564_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_561_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988b40))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_564_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_564_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_564_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_564_2(t[0], t[1], this_rewriter); }


  // [564] >: Maybe_trans_name # Maybe_trans_name -> Bool
  static inline const data_expression& rewr_564_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6af90);
  }

  static inline data_expression rewr_564_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_564_0(this_rewriter); }

  static inline data_expression rewr_564_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_564_0(this_rewriter); }


  // [563] >=: Maybe_trans_name # Maybe_trans_name -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_563_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_562_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988b10))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_563_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_563_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_563_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_563_2(t[0], t[1], this_rewriter); }


  // [563] >=: Maybe_trans_name # Maybe_trans_name -> Bool
  static inline const data_expression& rewr_563_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa0f10);
  }

  static inline data_expression rewr_563_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_563_0(this_rewriter); }

  static inline data_expression rewr_563_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_563_0(this_rewriter); }


  // [562] <=: Maybe_trans_name # Maybe_trans_name -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_562_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@C(@to_pos(@var_0) > @to_pos(@var_1), @@R(false), @@C(@to_pos(@var_0) == @to_pos(@var_1), @@R(@less_equal_arguments(@var_0, @var_1)), @@C(@to_pos(@var_0) < @to_pos(@var_1), @@R(true), @@M(@var_0, @@R(true), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      if (rewr_541_2(delayed_rewr_646_1<data_expression>(var_0,  this_rewriter), delayed_rewr_646_1<data_expression>(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (rewr_431_2(rewr_646_1(var_0,  this_rewriter), rewr_646_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_649_2(var_0, var_1,  this_rewriter); // R1 @less_equal_arguments(@var_0, @var_1)
        }
        else
        {
          if (rewr_200_2(delayed_rewr_646_1<data_expression>(var_0,  this_rewriter), rewr_646_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (var_0 == arg1) // M
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988ae0))), arg0, arg1);
  }

  static inline data_expression rewr_562_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_562_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_562_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_562_2(t[0], t[1], this_rewriter); }


  // [646] @to_pos: Maybe_trans_name -> Pos
  template < class DATA_EXPR0>
  class delayed_rewr_646_1
  {
    protected:
      const DATA_EXPR0& m_t0;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_646_1(const DATA_EXPR0& t0, RewriterCompilingJitty* tr)
        : m_t0(t0), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_646_1(m_t0, this_rewriter);
      }
  };
  
  // [562] <=: Maybe_trans_name # Maybe_trans_name -> Bool
  static inline const data_expression& rewr_562_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf960b50);
  }

  static inline data_expression rewr_562_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_562_0(this_rewriter); }

  static inline data_expression rewr_562_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_562_0(this_rewriter); }


  // [561] <: Maybe_trans_name # Maybe_trans_name -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_561_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@C(@to_pos(@var_0) > @to_pos(@var_1), @@R(false), @@C(@to_pos(@var_0) == @to_pos(@var_1), @@R(@less_arguments(@var_0, @var_1)), @@C(@to_pos(@var_0) < @to_pos(@var_1), @@R(true), @@M(@var_0, @@R(false), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      if (rewr_541_2(delayed_rewr_646_1<data_expression>(var_0,  this_rewriter), delayed_rewr_646_1<data_expression>(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (rewr_431_2(rewr_646_1(var_0,  this_rewriter), rewr_646_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_648_2(var_0, var_1,  this_rewriter); // R1 @less_arguments(@var_0, @var_1)
        }
        else
        {
          if (rewr_200_2(delayed_rewr_646_1<data_expression>(var_0,  this_rewriter), rewr_646_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (var_0 == arg1) // M
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
            }
            else
            {
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988ab0))), arg0, arg1);
  }

  static inline data_expression rewr_561_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_561_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_561_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_561_2(t[0], t[1], this_rewriter); }


  // [561] <: Maybe_trans_name # Maybe_trans_name -> Bool
  static inline const data_expression& rewr_561_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6b1a0);
  }

  static inline data_expression rewr_561_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_561_0(this_rewriter); }

  static inline data_expression rewr_561_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_561_0(this_rewriter); }


  // [560] if: Bool # Maybe_trans_name # Maybe_trans_name -> Maybe_trans_name
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_560_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988a80))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_560_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_560_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_560_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_560_3(t[0], t[1], t[2], this_rewriter); }


  // [560] if: Bool # Maybe_trans_name # Maybe_trans_name -> Maybe_trans_name
  static inline const data_expression& rewr_560_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6ed90);
  }

  static inline data_expression rewr_560_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_560_0(this_rewriter); }

  static inline data_expression rewr_560_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_560_0(this_rewriter); }


  // [559] !=: Maybe_trans_name # Maybe_trans_name -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_559_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_455_2(local_rewrite(var_0, this_rewriter), local_rewrite(var_1, this_rewriter),  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988a50))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_559_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_559_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_559_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_559_2(t[0], t[1], this_rewriter); }


  // [559] !=: Maybe_trans_name # Maybe_trans_name -> Bool
  static inline const data_expression& rewr_559_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa677e0);
  }

  static inline data_expression rewr_559_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_559_0(this_rewriter); }

  static inline data_expression rewr_559_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_559_0(this_rewriter); }


  // [455] ==: Maybe_trans_name # Maybe_trans_name -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_455_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@C(@to_pos(@var_0) != @to_pos(@var_1), @@R(false), @@C(@to_pos(@var_0) == @to_pos(@var_1), @@R(@equal_arguments(@var_0, @var_1)), @@M(@var_0, @@R(true), @@X))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      if (rewr_201_2(delayed_rewr_646_1<data_expression>(var_0,  this_rewriter), delayed_rewr_646_1<data_expression>(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (rewr_431_2(rewr_646_1(var_0,  this_rewriter), rewr_646_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_647_2(var_0, var_1,  this_rewriter); // R1 @equal_arguments(@var_0, @var_1)
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9838c0))), arg0, arg1);
  }

  static inline data_expression rewr_455_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_455_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_455_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_455_2(t[0], t[1], this_rewriter); }


  // [455] ==: Maybe_trans_name # Maybe_trans_name -> Bool
  static inline const data_expression& rewr_455_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6afc0);
  }

  static inline data_expression rewr_455_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_455_0(this_rewriter); }

  static inline data_expression rewr_455_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_455_0(this_rewriter); }


  // [558] >: Trans # Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_558_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_151_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9888d0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_558_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_558_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_558_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_558_2(t[0], t[1], this_rewriter); }


  // [558] >: Trans # Trans -> Bool
  static inline const data_expression& rewr_558_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6ee40);
  }

  static inline data_expression rewr_558_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_558_0(this_rewriter); }

  static inline data_expression rewr_558_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_558_0(this_rewriter); }


  // [557] >=: Trans # Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_557_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_556_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9888a0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_557_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_557_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_557_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_557_2(t[0], t[1], this_rewriter); }


  // [557] >=: Trans # Trans -> Bool
  static inline const data_expression& rewr_557_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa0fa0);
  }

  static inline data_expression rewr_557_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_557_0(this_rewriter); }

  static inline data_expression rewr_557_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_557_0(this_rewriter); }


  // [556] <=: Trans # Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_556_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@C(@to_pos(@var_0) > @to_pos(@var_1), @@R(false), @@C(@to_pos(@var_0) == @to_pos(@var_1), @@R(@less_equal_arguments(@var_0, @var_1)), @@C(@to_pos(@var_0) < @to_pos(@var_1), @@R(true), @@M(@var_0, @@R(true), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      if (rewr_541_2(delayed_rewr_625_1<data_expression>(var_0,  this_rewriter), delayed_rewr_625_1<data_expression>(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (rewr_431_2(rewr_625_1(var_0,  this_rewriter), rewr_625_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_628_2(var_0, var_1,  this_rewriter); // R1 @less_equal_arguments(@var_0, @var_1)
        }
        else
        {
          if (rewr_200_2(delayed_rewr_625_1<data_expression>(var_0,  this_rewriter), rewr_625_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (var_0 == arg1) // M
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988870))), arg0, arg1);
  }

  static inline data_expression rewr_556_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_556_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_556_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_556_2(t[0], t[1], this_rewriter); }


  // [625] @to_pos: Trans -> Pos
  template < class DATA_EXPR0>
  class delayed_rewr_625_1
  {
    protected:
      const DATA_EXPR0& m_t0;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_625_1(const DATA_EXPR0& t0, RewriterCompilingJitty* tr)
        : m_t0(t0), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_625_1(m_t0, this_rewriter);
      }
  };
  
  // [556] <=: Trans # Trans -> Bool
  static inline const data_expression& rewr_556_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa0770);
  }

  static inline data_expression rewr_556_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_556_0(this_rewriter); }

  static inline data_expression rewr_556_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_556_0(this_rewriter); }


  // [555] if: Bool # Trans # Trans -> Trans
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_555_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988840))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_555_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_555_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_555_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_555_3(t[0], t[1], t[2], this_rewriter); }


  // [555] if: Bool # Trans # Trans -> Trans
  static inline const data_expression& rewr_555_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa495d0);
  }

  static inline data_expression rewr_555_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_555_0(this_rewriter); }

  static inline data_expression rewr_555_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_555_0(this_rewriter); }


  // [294] !=: Trans # Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_294_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_92_2(local_rewrite(var_0, this_rewriter), local_rewrite(var_1, this_rewriter),  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9217b0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_294_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_294_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_294_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_294_2(t[0], t[1], this_rewriter); }


  // [294] !=: Trans # Trans -> Bool
  static inline const data_expression& rewr_294_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa49540);
  }

  static inline data_expression rewr_294_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_294_0(this_rewriter); }

  static inline data_expression rewr_294_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_294_0(this_rewriter); }


  // [151] <: Trans # Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_151_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@C(@to_pos(@var_0) > @to_pos(@var_1), @@R(false), @@C(@to_pos(@var_0) == @to_pos(@var_1), @@R(@less_arguments(@var_0, @var_1)), @@C(@to_pos(@var_0) < @to_pos(@var_1), @@R(true), @@M(@var_0, @@R(false), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      if (rewr_541_2(delayed_rewr_625_1<data_expression>(var_0,  this_rewriter), delayed_rewr_625_1<data_expression>(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (rewr_431_2(rewr_625_1(var_0,  this_rewriter), rewr_625_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_627_2(var_0, var_1,  this_rewriter); // R1 @less_arguments(@var_0, @var_1)
        }
        else
        {
          if (rewr_200_2(delayed_rewr_625_1<data_expression>(var_0,  this_rewriter), rewr_625_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (var_0 == arg1) // M
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
            }
            else
            {
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91b600))), arg0, arg1);
  }

  static inline data_expression rewr_151_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_151_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_151_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_151_2(t[0], t[1], this_rewriter); }


  // [151] <: Trans # Trans -> Bool
  static inline const data_expression& rewr_151_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa1840);
  }

  static inline data_expression rewr_151_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_151_0(this_rewriter); }

  static inline data_expression rewr_151_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_151_0(this_rewriter); }


  // [92] ==: Trans # Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_92_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@C(@to_pos(@var_0) != @to_pos(@var_1), @@R(false), @@C(@to_pos(@var_0) == @to_pos(@var_1), @@R(@equal_arguments(@var_0, @var_1)), @@M(@var_0, @@R(true), @@X))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      if (rewr_201_2(delayed_rewr_625_1<data_expression>(var_0,  this_rewriter), delayed_rewr_625_1<data_expression>(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (rewr_431_2(rewr_625_1(var_0,  this_rewriter), rewr_625_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_626_2(var_0, var_1,  this_rewriter); // R1 @equal_arguments(@var_0, @var_1)
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf918840))), arg0, arg1);
  }

  static inline data_expression rewr_92_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_92_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_92_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_92_2(t[0], t[1], this_rewriter); }


  // [92] ==: Trans # Trans -> Bool
  static inline const data_expression& rewr_92_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa49d70);
  }

  static inline data_expression rewr_92_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_92_0(this_rewriter); }

  static inline data_expression rewr_92_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_92_0(this_rewriter); }


  // [554] >: PlaceTokens # PlaceTokens -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_554_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_113_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9886c0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_554_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_554_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_554_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_554_2(t[0], t[1], this_rewriter); }


  // [554] >: PlaceTokens # PlaceTokens -> Bool
  static inline const data_expression& rewr_554_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6b240);
  }

  static inline data_expression rewr_554_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_554_0(this_rewriter); }

  static inline data_expression rewr_554_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_554_0(this_rewriter); }


  // [553] >=: PlaceTokens # PlaceTokens -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_553_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_552_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988690))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_553_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_553_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_553_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_553_2(t[0], t[1], this_rewriter); }


  // [553] >=: PlaceTokens # PlaceTokens -> Bool
  static inline const data_expression& rewr_553_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa1f70);
  }

  static inline data_expression rewr_553_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_553_0(this_rewriter); }

  static inline data_expression rewr_553_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_553_0(this_rewriter); }


  // [552] <=: PlaceTokens # PlaceTokens -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_552_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@C(@to_pos(@var_0) > @to_pos(@var_1), @@R(false), @@C(@to_pos(@var_0) == @to_pos(@var_1), @@R(@less_equal_arguments(@var_0, @var_1)), @@C(@to_pos(@var_0) < @to_pos(@var_1), @@R(true), @@M(@var_0, @@R(true), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      if (rewr_541_2(delayed_rewr_689_1<data_expression>(var_0,  this_rewriter), delayed_rewr_689_1<data_expression>(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (rewr_431_2(rewr_689_1(var_0,  this_rewriter), rewr_689_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_692_2(var_0, var_1,  this_rewriter); // R1 @less_equal_arguments(@var_0, @var_1)
        }
        else
        {
          if (rewr_200_2(delayed_rewr_689_1<data_expression>(var_0,  this_rewriter), rewr_689_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (var_0 == arg1) // M
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988660))), arg0, arg1);
  }

  static inline data_expression rewr_552_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_552_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_552_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_552_2(t[0], t[1], this_rewriter); }


  // [689] @to_pos: PlaceTokens -> Pos
  template < class DATA_EXPR0>
  class delayed_rewr_689_1
  {
    protected:
      const DATA_EXPR0& m_t0;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_689_1(const DATA_EXPR0& t0, RewriterCompilingJitty* tr)
        : m_t0(t0), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_689_1(m_t0, this_rewriter);
      }
  };
  
  // [552] <=: PlaceTokens # PlaceTokens -> Bool
  static inline const data_expression& rewr_552_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6b420);
  }

  static inline data_expression rewr_552_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_552_0(this_rewriter); }

  static inline data_expression rewr_552_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_552_0(this_rewriter); }


  // [551] if: Bool # PlaceTokens # PlaceTokens -> PlaceTokens
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_551_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988630))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_551_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_551_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_551_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_551_3(t[0], t[1], t[2], this_rewriter); }


  // [551] if: Bool # PlaceTokens # PlaceTokens -> PlaceTokens
  static inline const data_expression& rewr_551_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6af30);
  }

  static inline data_expression rewr_551_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_551_0(this_rewriter); }

  static inline data_expression rewr_551_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_551_0(this_rewriter); }


  // [231] !=: PlaceTokens # PlaceTokens -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_231_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_111_2(local_rewrite(var_0, this_rewriter), local_rewrite(var_1, this_rewriter),  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91f110))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_231_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_231_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_231_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_231_2(t[0], t[1], this_rewriter); }


  // [231] !=: PlaceTokens # PlaceTokens -> Bool
  static inline const data_expression& rewr_231_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa0f40);
  }

  static inline data_expression rewr_231_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_231_0(this_rewriter); }

  static inline data_expression rewr_231_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_231_0(this_rewriter); }


  // [113] <: PlaceTokens # PlaceTokens -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_113_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@C(@to_pos(@var_0) > @to_pos(@var_1), @@R(false), @@C(@to_pos(@var_0) == @to_pos(@var_1), @@R(@less_arguments(@var_0, @var_1)), @@C(@to_pos(@var_0) < @to_pos(@var_1), @@R(true), @@M(@var_0, @@R(false), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      if (rewr_541_2(delayed_rewr_689_1<data_expression>(var_0,  this_rewriter), delayed_rewr_689_1<data_expression>(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (rewr_431_2(rewr_689_1(var_0,  this_rewriter), rewr_689_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_691_2(var_0, var_1,  this_rewriter); // R1 @less_arguments(@var_0, @var_1)
        }
        else
        {
          if (rewr_200_2(delayed_rewr_689_1<data_expression>(var_0,  this_rewriter), rewr_689_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (var_0 == arg1) // M
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
            }
            else
            {
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9199b0))), arg0, arg1);
  }

  static inline data_expression rewr_113_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_113_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_113_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_113_2(t[0], t[1], this_rewriter); }


  // [113] <: PlaceTokens # PlaceTokens -> Bool
  static inline const data_expression& rewr_113_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa49660);
  }

  static inline data_expression rewr_113_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_113_0(this_rewriter); }

  static inline data_expression rewr_113_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_113_0(this_rewriter); }


  // [111] ==: PlaceTokens # PlaceTokens -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_111_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@C(@to_pos(@var_0) != @to_pos(@var_1), @@R(false), @@C(@to_pos(@var_0) == @to_pos(@var_1), @@R(@equal_arguments(@var_0, @var_1)), @@M(@var_0, @@R(true), @@X))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      if (rewr_201_2(delayed_rewr_689_1<data_expression>(var_0,  this_rewriter), delayed_rewr_689_1<data_expression>(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (rewr_431_2(rewr_689_1(var_0,  this_rewriter), rewr_689_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_690_2(var_0, var_1,  this_rewriter); // R1 @equal_arguments(@var_0, @var_1)
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf919830))), arg0, arg1);
  }

  static inline data_expression rewr_111_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_111_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_111_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_111_2(t[0], t[1], this_rewriter); }


  // [111] ==: PlaceTokens # PlaceTokens -> Bool
  static inline const data_expression& rewr_111_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa0300);
  }

  static inline data_expression rewr_111_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_111_0(this_rewriter); }

  static inline data_expression rewr_111_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_111_0(this_rewriter); }


  // [550] >: Trans_name # Trans_name -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_550_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_456_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9884b0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_550_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_550_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_550_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_550_2(t[0], t[1], this_rewriter); }


  // [550] >: Trans_name # Trans_name -> Bool
  static inline const data_expression& rewr_550_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa0f70);
  }

  static inline data_expression rewr_550_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_550_0(this_rewriter); }

  static inline data_expression rewr_550_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_550_0(this_rewriter); }


  // [549] >=: Trans_name # Trans_name -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_549_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_548_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988480))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_549_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_549_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_549_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_549_2(t[0], t[1], this_rewriter); }


  // [549] >=: Trans_name # Trans_name -> Bool
  static inline const data_expression& rewr_549_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6af00);
  }

  static inline data_expression rewr_549_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_549_0(this_rewriter); }

  static inline data_expression rewr_549_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_549_0(this_rewriter); }


  // [548] <=: Trans_name # Trans_name -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_548_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@C(@to_pos(@var_0) > @to_pos(@var_1), @@R(false), @@C(@to_pos(@var_0) == @to_pos(@var_1), @@R(@less_equal_arguments(@var_0, @var_1)), @@C(@to_pos(@var_0) < @to_pos(@var_1), @@R(true), @@M(@var_0, @@R(true), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      if (rewr_541_2(delayed_rewr_605_1<data_expression>(var_0,  this_rewriter), delayed_rewr_605_1<data_expression>(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (rewr_431_2(rewr_605_1(var_0,  this_rewriter), rewr_605_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_608_2(var_0, var_1,  this_rewriter); // R1 @less_equal_arguments(@var_0, @var_1)
        }
        else
        {
          if (rewr_200_2(delayed_rewr_605_1<data_expression>(var_0,  this_rewriter), rewr_605_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (var_0 == arg1) // M
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988450))), arg0, arg1);
  }

  static inline data_expression rewr_548_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_548_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_548_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_548_2(t[0], t[1], this_rewriter); }


  // [605] @to_pos: Trans_name -> Pos
  template < class DATA_EXPR0>
  class delayed_rewr_605_1
  {
    protected:
      const DATA_EXPR0& m_t0;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_605_1(const DATA_EXPR0& t0, RewriterCompilingJitty* tr)
        : m_t0(t0), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_605_1(m_t0, this_rewriter);
      }
  };
  
  // [548] <=: Trans_name # Trans_name -> Bool
  static inline const data_expression& rewr_548_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa49e50);
  }

  static inline data_expression rewr_548_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_548_0(this_rewriter); }

  static inline data_expression rewr_548_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_548_0(this_rewriter); }


  // [547] if: Bool # Trans_name # Trans_name -> Trans_name
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_547_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988420))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_547_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_547_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_547_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_547_3(t[0], t[1], t[2], this_rewriter); }


  // [547] if: Bool # Trans_name # Trans_name -> Trans_name
  static inline const data_expression& rewr_547_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6b390);
  }

  static inline data_expression rewr_547_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_547_0(this_rewriter); }

  static inline data_expression rewr_547_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_547_0(this_rewriter); }


  // [457] !=: Trans_name # Trans_name -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_457_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_443_2(local_rewrite(var_0, this_rewriter), local_rewrite(var_1, this_rewriter),  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9839b0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_457_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_457_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_457_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_457_2(t[0], t[1], this_rewriter); }


  // [457] !=: Trans_name # Trans_name -> Bool
  static inline const data_expression& rewr_457_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa0fd0);
  }

  static inline data_expression rewr_457_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_457_0(this_rewriter); }

  static inline data_expression rewr_457_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_457_0(this_rewriter); }


  // [456] <: Trans_name # Trans_name -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_456_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@C(@to_pos(@var_0) > @to_pos(@var_1), @@R(false), @@C(@to_pos(@var_0) == @to_pos(@var_1), @@R(@less_arguments(@var_0, @var_1)), @@C(@to_pos(@var_0) < @to_pos(@var_1), @@R(true), @@M(@var_0, @@R(false), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      if (rewr_541_2(delayed_rewr_605_1<data_expression>(var_0,  this_rewriter), delayed_rewr_605_1<data_expression>(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (rewr_431_2(rewr_605_1(var_0,  this_rewriter), rewr_605_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_607_2(var_0, var_1,  this_rewriter); // R1 @less_arguments(@var_0, @var_1)
        }
        else
        {
          if (rewr_200_2(delayed_rewr_605_1<data_expression>(var_0,  this_rewriter), rewr_605_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (var_0 == arg1) // M
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
            }
            else
            {
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983920))), arg0, arg1);
  }

  static inline data_expression rewr_456_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_456_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_456_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_456_2(t[0], t[1], this_rewriter); }


  // [456] <: Trans_name # Trans_name -> Bool
  static inline const data_expression& rewr_456_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6aed0);
  }

  static inline data_expression rewr_456_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_456_0(this_rewriter); }

  static inline data_expression rewr_456_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_456_0(this_rewriter); }


  // [443] ==: Trans_name # Trans_name -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_443_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@C(@to_pos(@var_0) != @to_pos(@var_1), @@R(false), @@C(@to_pos(@var_0) == @to_pos(@var_1), @@R(@equal_arguments(@var_0, @var_1)), @@M(@var_0, @@R(true), @@X))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      if (rewr_201_2(delayed_rewr_605_1<data_expression>(var_0,  this_rewriter), delayed_rewr_605_1<data_expression>(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (rewr_431_2(rewr_605_1(var_0,  this_rewriter), rewr_605_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_606_2(var_0, var_1,  this_rewriter); // R1 @equal_arguments(@var_0, @var_1)
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983290))), arg0, arg1);
  }

  static inline data_expression rewr_443_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_443_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_443_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_443_2(t[0], t[1], this_rewriter); }


  // [443] ==: Trans_name # Trans_name -> Bool
  static inline const data_expression& rewr_443_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa49ce0);
  }

  static inline data_expression rewr_443_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_443_0(this_rewriter); }

  static inline data_expression rewr_443_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_443_0(this_rewriter); }


  // [546] >: Place # Place -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_546_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_180_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9882a0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_546_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_546_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_546_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_546_2(t[0], t[1], this_rewriter); }


  // [546] >: Place # Place -> Bool
  static inline const data_expression& rewr_546_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6b090);
  }

  static inline data_expression rewr_546_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_546_0(this_rewriter); }

  static inline data_expression rewr_546_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_546_0(this_rewriter); }


  // [545] >=: Place # Place -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_545_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_544_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988270))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_545_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_545_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_545_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_545_2(t[0], t[1], this_rewriter); }


  // [545] >=: Place # Place -> Bool
  static inline const data_expression& rewr_545_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa49c80);
  }

  static inline data_expression rewr_545_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_545_0(this_rewriter); }

  static inline data_expression rewr_545_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_545_0(this_rewriter); }


  // [544] <=: Place # Place -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_544_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@C(@to_pos(@var_0) > @to_pos(@var_1), @@R(false), @@C(@to_pos(@var_0) == @to_pos(@var_1), @@R(@less_equal_arguments(@var_0, @var_1)), @@C(@to_pos(@var_0) < @to_pos(@var_1), @@R(true), @@M(@var_0, @@R(true), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      if (rewr_541_2(delayed_rewr_590_1<data_expression>(var_0,  this_rewriter), delayed_rewr_590_1<data_expression>(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (rewr_431_2(rewr_590_1(var_0,  this_rewriter), rewr_590_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_593_2(var_0, var_1,  this_rewriter); // R1 @less_equal_arguments(@var_0, @var_1)
        }
        else
        {
          if (rewr_200_2(delayed_rewr_590_1<data_expression>(var_0,  this_rewriter), rewr_590_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (var_0 == arg1) // M
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988240))), arg0, arg1);
  }

  static inline data_expression rewr_544_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_544_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_544_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_544_2(t[0], t[1], this_rewriter); }


  // [590] @to_pos: Place -> Pos
  template < class DATA_EXPR0>
  class delayed_rewr_590_1
  {
    protected:
      const DATA_EXPR0& m_t0;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_590_1(const DATA_EXPR0& t0, RewriterCompilingJitty* tr)
        : m_t0(t0), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_590_1(m_t0, this_rewriter);
      }
  };
  
  // [544] <=: Place # Place -> Bool
  static inline const data_expression& rewr_544_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa68510);
  }

  static inline data_expression rewr_544_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_544_0(this_rewriter); }

  static inline data_expression rewr_544_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_544_0(this_rewriter); }


  // [543] if: Bool # Place # Place -> Place
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_543_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988210))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_543_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_543_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_543_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_543_3(t[0], t[1], t[2], this_rewriter); }


  // [543] if: Bool # Place # Place -> Place
  static inline const data_expression& rewr_543_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa48ec0);
  }

  static inline data_expression rewr_543_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_543_0(this_rewriter); }

  static inline data_expression rewr_543_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_543_0(this_rewriter); }


  // [542] ==: Place # Place -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_542_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@C(@to_pos(@var_0) != @to_pos(@var_1), @@R(false), @@C(@to_pos(@var_0) == @to_pos(@var_1), @@R(@equal_arguments(@var_0, @var_1)), @@M(@var_0, @@R(true), @@X))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      if (rewr_201_2(delayed_rewr_590_1<data_expression>(var_0,  this_rewriter), delayed_rewr_590_1<data_expression>(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (rewr_431_2(rewr_590_1(var_0,  this_rewriter), rewr_590_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_591_2(var_0, var_1,  this_rewriter); // R1 @equal_arguments(@var_0, @var_1)
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9881e0))), arg0, arg1);
  }

  static inline data_expression rewr_542_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_542_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_542_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_542_2(t[0], t[1], this_rewriter); }


  // [542] ==: Place # Place -> Bool
  static inline const data_expression& rewr_542_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa49630);
  }

  static inline data_expression rewr_542_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_542_0(this_rewriter); }

  static inline data_expression rewr_542_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_542_0(this_rewriter); }


  // [181] !=: Place # Place -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_181_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_542_2(local_rewrite(var_0, this_rewriter), local_rewrite(var_1, this_rewriter),  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91d310))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_181_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_181_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_181_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_181_2(t[0], t[1], this_rewriter); }


  // [181] !=: Place # Place -> Bool
  static inline const data_expression& rewr_181_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa49690);
  }

  static inline data_expression rewr_181_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_181_0(this_rewriter); }

  static inline data_expression rewr_181_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_181_0(this_rewriter); }


  // [180] <: Place # Place -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_180_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@C(@to_pos(@var_0) > @to_pos(@var_1), @@R(false), @@C(@to_pos(@var_0) == @to_pos(@var_1), @@R(@less_arguments(@var_0, @var_1)), @@C(@to_pos(@var_0) < @to_pos(@var_1), @@R(true), @@M(@var_0, @@R(false), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      if (rewr_541_2(delayed_rewr_590_1<data_expression>(var_0,  this_rewriter), delayed_rewr_590_1<data_expression>(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (rewr_431_2(rewr_590_1(var_0,  this_rewriter), rewr_590_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_592_2(var_0, var_1,  this_rewriter); // R1 @less_arguments(@var_0, @var_1)
        }
        else
        {
          if (rewr_200_2(delayed_rewr_590_1<data_expression>(var_0,  this_rewriter), rewr_590_1(var_1,  this_rewriter),  this_rewriter) == sort_bool::true_()) // C
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (var_0 == arg1) // M
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
            }
            else
            {
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91d280))), arg0, arg1);
  }

  static inline data_expression rewr_180_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_180_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_180_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_180_2(t[0], t[1], this_rewriter); }


  // [180] <: Place # Place -> Bool
  static inline const data_expression& rewr_180_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa49d10);
  }

  static inline data_expression rewr_180_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_180_0(this_rewriter); }

  static inline data_expression rewr_180_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_180_0(this_rewriter); }


  // [541] >: Pos # Pos -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_541_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_200_2(var_1, local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988060))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_541_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_541_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_541_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_541_2(t[0], t[1], this_rewriter); }


  // [541] >: Pos # Pos -> Bool
  static inline const data_expression& rewr_541_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa48720);
  }

  static inline data_expression rewr_541_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_541_0(this_rewriter); }

  static inline data_expression rewr_541_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_541_0(this_rewriter); }


  // [540] >=: Pos # Pos -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_540_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_524_2(local_rewrite(var_1, this_rewriter), var_0,  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf988030))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_540_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_540_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_540_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_540_2(t[0], t[1], this_rewriter); }


  // [540] >=: Pos # Pos -> Bool
  static inline const data_expression& rewr_540_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf960aa0);
  }

  static inline data_expression rewr_540_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_540_0(this_rewriter); }

  static inline data_expression rewr_540_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_540_0(this_rewriter); }


  // [539] +: Pos # Pos -> Pos
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_539_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_0 + @var_1))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_528_3(*reinterpret_cast<const data_expression*>(0x55a6cfa6a690), local_rewrite(var_0, this_rewriter), var_1,  this_rewriter); // R1 @var_0 + @var_1
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9876d0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_539_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_539_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_539_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_539_2(t[0], t[1], this_rewriter); }


  // [539] +: Pos # Pos -> Pos
  static inline const data_expression& rewr_539_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa49cb0);
  }

  static inline data_expression rewr_539_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_539_0(this_rewriter); }

  static inline data_expression rewr_539_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_539_0(this_rewriter); }


  // [538] @pospred: Pos -> Pos
  template < class DATA_EXPR0>
  static inline data_expression rewr_538_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@cDub, @@F(true, @@D(@@N(@@S(@var_0, @@R(2 * @var_0)))), @@F(false, @@D(@@N(@@F(@cDub, @@S(@var_0, @@N(@@S(@var_1, @@R(2 * @pospred(2 * @var_1 + if(@var_0, 1, 0)) + 1)))), @@F(1, @@R(1), @@D(@@X))))), @@D(@@X))), @@F(1, @@R(1), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf918420) // F1
      {
        if (uint_address(arg0[1]) == 0x55a6cf916890) // F2a true
        {
          const data_expression& t1 = down_cast<data_expression>(arg0[1]);
          const data_expression& var_0 = down_cast<data_expression>(arg0[2]); // S2
          return rewr_91_2(*reinterpret_cast<const data_expression*>(0x55a6cfa6a690), var_0,  this_rewriter); // R1 2 * @var_0
        }
        else
        {
          if (uint_address(arg0[1]) == 0x55a6cf9183f0) // F2a false
          {
            const data_expression& t1 = down_cast<data_expression>(arg0[1]);
            if (is_application_no_check(down_cast<data_expression>(arg0[2])) && uint_address(down_cast<data_expression>(arg0[2])[0]) == 0x55a6cf918420) // F2b @cDub
            {
              const data_expression& t2 = down_cast<data_expression>(arg0[2]);
              const data_expression& var_0 = down_cast<data_expression>(t2[1]); // S2
              const data_expression& var_1 = down_cast<data_expression>(t2[2]); // S2
              return rewr_91_2(*reinterpret_cast<const data_expression*>(0x55a6cfa6d030), rewr_538_1(rewr_91_2(var_0, var_1,  this_rewriter),  this_rewriter),  this_rewriter); // R1 2 * @pospred(2 * @var_1 + if(@var_0, 1, 0)) + 1
            }
            else
            {
              if (uint_address(arg0[2]) == 0x55a6cf918300) // F2a @c1
              {
                const data_expression& t2 = down_cast<data_expression>(arg0[2]);
                return *reinterpret_cast<const data_expression*>(0x55a6cfa6ce80); // R1 1
              }
              else
              {
              }
            }
          }
          else
          {
          }
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf918300) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6ce80); // R1 1
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9876a0))), arg0);
  }

  static inline data_expression rewr_538_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_538_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_538_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_538_1(t[0], this_rewriter); }


  // [538] @pospred: Pos -> Pos
  static inline const data_expression& rewr_538_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa495a0);
  }

  static inline data_expression rewr_538_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_538_0(this_rewriter); }

  static inline data_expression rewr_538_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_538_0(this_rewriter); }


  // [537] min: Pos # Pos -> Pos
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_537_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@R(if(@var_0 <= @var_1, @var_0, @var_1)))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      return rewr_525_3(rewr_524_2(var_0, var_1,  this_rewriter), var_0, var_1,  this_rewriter); // R1 if(@var_0 <= @var_1, @var_0, @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf987670))), arg0, arg1);
  }

  static inline data_expression rewr_537_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_537_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_537_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_537_2(t[0], t[1], this_rewriter); }


  // [537] min: Pos # Pos -> Pos
  static inline const data_expression& rewr_537_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa49d40);
  }

  static inline data_expression rewr_537_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_537_0(this_rewriter); }

  static inline data_expression rewr_537_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_537_0(this_rewriter); }


  // [536] max: Pos # Pos -> Pos
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_536_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@R(if(@var_0 <= @var_1, @var_1, @var_0)))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      return rewr_525_3(rewr_524_2(var_0, var_1,  this_rewriter), var_1, var_0,  this_rewriter); // R1 if(@var_0 <= @var_1, @var_1, @var_0)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf987640))), arg0, arg1);
  }

  static inline data_expression rewr_536_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_536_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_536_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_536_2(t[0], t[1], this_rewriter); }


  // [536] max: Pos # Pos -> Pos
  static inline const data_expression& rewr_536_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa49600);
  }

  static inline data_expression rewr_536_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_536_0(this_rewriter); }

  static inline data_expression rewr_536_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_536_0(this_rewriter); }


  // [530] @powerlog2: Pos -> Pos
  template < class DATA_EXPR0>
  static inline data_expression rewr_530_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@cDub, @@N(@@F(1, @@R(1), @@F(@cDub, @@N(@@S(@var_2, @@R(2 * @powerlog2(@var_2)))), @@D(@@X)))), @@F(1, @@R(1), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf918420) // F1
      {
        if (uint_address(arg0[2]) == 0x55a6cf918300) // F2a @c1
        {
          const data_expression& t1 = down_cast<data_expression>(arg0[2]);
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6ce80); // R1 1
        }
        else
        {
          if (is_application_no_check(down_cast<data_expression>(arg0[2])) && uint_address(down_cast<data_expression>(arg0[2])[0]) == 0x55a6cf918420) // F2b @cDub
          {
            const data_expression& t1 = down_cast<data_expression>(arg0[2]);
            const data_expression& var_2 = down_cast<data_expression>(t1[2]); // S2
            return rewr_91_2(*reinterpret_cast<const data_expression*>(0x55a6cfa6a690), rewr_530_1(var_2,  this_rewriter),  this_rewriter); // R1 2 * @powerlog2(@var_2)
          }
          else
          {
          }
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf918300) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6ce80); // R1 1
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf986d40))), arg0);
  }

  static inline data_expression rewr_530_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_530_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_530_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_530_1(t[0], this_rewriter); }


  // [530] @powerlog2: Pos -> Pos
  static inline const data_expression& rewr_530_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa48750);
  }

  static inline data_expression rewr_530_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_530_0(this_rewriter); }

  static inline data_expression rewr_530_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_530_0(this_rewriter); }


  // [529] *: Pos # Pos -> Pos
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_529_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@cDub, @@F(false, @@D(@@N(@@S(@var_0, @@D(@@N(@@S(@var_1, @@R(2 * @var_0 * @var_1))))))), @@D(@@X)), @@F(1, @@D(@@N(@@S(@var_0, @@R(@var_0)))), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf918420) // F1
      {
        if (uint_address(arg0[1]) == 0x55a6cf9183f0) // F2a false
        {
          const data_expression& t1 = down_cast<data_expression>(arg0[1]);
          const data_expression& var_0 = down_cast<data_expression>(arg0[2]); // S2
          const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
          return rewr_91_2(*reinterpret_cast<const data_expression*>(0x55a6cfa6a690), rewr_529_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 2 * @var_0 * @var_1
        }
        else
        {
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf918300) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(@cDub, @@F(true, @@D(@@N(@@S(@var_1, @@D(@@N(@@F(1, @@R(@var_0), @@F(@cDub, @@F(true, @@D(@@N(@@S(@var_2, @@R(2 * @var_1 + @var_2 + 2 * @var_1 * @var_2 + 1)))), @@F(false, @@D(@@N(@@S(@var_2, @@R(2 * @var_0 * @var_2)))), @@D(@@X))), @@X))))))), @@D(@@N(@@F(1, @@R(@var_0), @@F(@cDub, @@F(false, @@D(@@N(@@S(@var_1, @@R(2 * @var_0 * @var_1)))), @@D(@@X)), @@X))))), @@N(@@F(1, @@R(@var_0), @@F(@cDub, @@F(false, @@D(@@N(@@S(@var_1, @@R(2 * @var_0 * @var_1)))), @@D(@@X)), @@X)))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf918420) // F1
      {
        if (uint_address(arg0[1]) == 0x55a6cf916890) // F2a true
        {
          const data_expression& t1 = down_cast<data_expression>(arg0[1]);
          const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
          if (uint_address(arg1) == 0x55a6cf918300) // F1
          {
            return var_0; // R1 @var_0
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf918420) // F1
            {
              if (uint_address(arg1[1]) == 0x55a6cf916890) // F2a true
              {
                const data_expression& t3 = down_cast<data_expression>(arg1[1]);
                const data_expression& var_2 = down_cast<data_expression>(arg1[2]); // S2
                return rewr_91_2(*reinterpret_cast<const data_expression*>(0x55a6cfa6d030), rewr_528_3(*reinterpret_cast<const data_expression*>(0x55a6cfa6a690), var_1, delayed_rewr_528_3<data_expression, data_expression, delayed_rewr_91_2<data_expression, delayed_rewr_529_2<data_expression, data_expression>>>(*reinterpret_cast<const data_expression*>(0x55a6cfa6a690), var_2, delayed_rewr_91_2<data_expression, delayed_rewr_529_2<data_expression, data_expression>>(*reinterpret_cast<const data_expression*>(0x55a6cfa6a690), delayed_rewr_529_2<data_expression, data_expression>(var_1, var_2,  this_rewriter),  this_rewriter),  this_rewriter),  this_rewriter),  this_rewriter); // R1 2 * @var_1 + @var_2 + 2 * @var_1 * @var_2 + 1
              }
              else
              {
                if (uint_address(arg1[1]) == 0x55a6cf9183f0) // F2a false
                {
                  const data_expression& t3 = down_cast<data_expression>(arg1[1]);
                  const data_expression& var_2 = down_cast<data_expression>(arg1[2]); // S2
                  return rewr_91_2(*reinterpret_cast<const data_expression*>(0x55a6cfa6a690), rewr_529_2(var_0, var_2,  this_rewriter),  this_rewriter); // R1 2 * @var_0 * @var_2
                }
                else
                {
                }
              }
            }
            else
            {
            }
          }
        }
        else
        {
          if (uint_address(arg1) == 0x55a6cf918300) // F1
          {
            return var_0; // R1 @var_0
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf918420) // F1
            {
              if (uint_address(arg1[1]) == 0x55a6cf9183f0) // F2a false
              {
                const data_expression& t2 = down_cast<data_expression>(arg1[1]);
                const data_expression& var_1 = down_cast<data_expression>(arg1[2]); // S2
                return rewr_91_2(*reinterpret_cast<const data_expression*>(0x55a6cfa6a690), rewr_529_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 2 * @var_0 * @var_1
              }
              else
              {
              }
            }
            else
            {
            }
          }
        }
      }
      else
      {
        if (uint_address(arg1) == 0x55a6cf918300) // F1
        {
          return var_0; // R1 @var_0
        }
        else
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf918420) // F1
          {
            if (uint_address(arg1[1]) == 0x55a6cf9183f0) // F2a false
            {
              const data_expression& t1 = down_cast<data_expression>(arg1[1]);
              const data_expression& var_1 = down_cast<data_expression>(arg1[2]); // S2
              return rewr_91_2(*reinterpret_cast<const data_expression*>(0x55a6cfa6a690), rewr_529_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 2 * @var_0 * @var_1
            }
            else
            {
            }
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf986440))), arg0, arg1);
  }

  static inline data_expression rewr_529_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_529_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_529_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_529_2(t[0], t[1], this_rewriter); }


  // [528] @addc: Bool # Pos # Pos -> Pos
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_528_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_528_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_528_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [91] @cDub: Bool # Pos -> Pos
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_91_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_91_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_91_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [529] *: Pos # Pos -> Pos
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_529_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_529_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_529_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [529] *: Pos # Pos -> Pos
  static inline const data_expression& rewr_529_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa48e90);
  }

  static inline data_expression rewr_529_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_529_0(this_rewriter); }

  static inline data_expression rewr_529_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_529_0(this_rewriter); }


  // [528] @addc: Bool # Pos # Pos -> Pos
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_528_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(true, @@D(@@N(@@F(1, @@D(@@N(@@S(@var_0, @@R(succ(succ(@var_0)))))), @@X))), @@F(false, @@D(@@N(@@F(1, @@D(@@N(@@S(@var_0, @@R(succ(@var_0))))), @@X))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf916890) // F1
      {
        if (uint_address(arg1) == 0x55a6cf918300) // F1
        {
          const DATA_EXPR2& var_0 = arg_not_nf2; // S1b
          return rewr_527_1(rewr_527_1(local_rewrite(var_0, this_rewriter),  this_rewriter),  this_rewriter); // R1 succ(succ(@var_0))
        }
        else
        {
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf9183f0) // F1
        {
          if (uint_address(arg1) == 0x55a6cf918300) // F1
          {
            const DATA_EXPR2& var_0 = arg_not_nf2; // S1b
            return rewr_527_1(local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 succ(@var_0)
          }
          else
          {
          }
        }
        else
        {
        }
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(true, @@D(@@N(@@S(@var_1, @@F(@cDub, @@S(@var_2, @@F(false, @@D(@@N(@@S(@var_3, @@D(@@N(@@F(1, @@R(succ(succ(@var_1))), @@F(@cDub, @@M(@var_2, @@F(true, @@D(@@N(@@S(@var_4, @@R(2 * if(@var_0, @var_3, @var_4) + if(!@var_0, 1, 0))))), @@N(@@S(@var_4, @@R(2 * if(@var_2, @var_3, @var_4) + if(@var_0, 1, 0))))), @@F(true, @@D(@@N(@@S(@var_4, @@R(2 * if(@var_0, @var_3, @var_4) + if(!@var_0, 1, 0))))), @@D(@@X))), @@X))))))), @@F(true, @@D(@@N(@@S(@var_3, @@D(@@N(@@F(1, @@R(succ(succ(@var_1))), @@F(@cDub, @@M(@var_2, @@F(false, @@D(@@N(@@S(@var_4, @@R(2 * if(@var_0, @var_3, @var_4) + if(!@var_0, 1, 0))))), @@N(@@S(@var_4, @@R(2 * if(@var_2, @var_3, @var_4) + if(@var_0, 1, 0))))), @@F(false, @@D(@@N(@@S(@var_4, @@R(2 * if(@var_0, @var_3, @var_4) + if(!@var_0, 1, 0))))), @@D(@@X))), @@X))))))), @@N(@@S(@var_3, @@D(@@N(@@F(1, @@R(succ(succ(@var_1))), @@F(@cDub, @@M(@var_2, @@N(@@S(@var_4, @@R(2 * if(@var_2, @var_3, @var_4) + if(@var_0, 1, 0)))), @@D(@@X)), @@X))))))))), @@N(@@F(1, @@R(succ(succ(@var_1))), @@X)))))), @@F(false, @@D(@@N(@@S(@var_1, @@F(@cDub, @@S(@var_2, @@F(false, @@D(@@N(@@S(@var_3, @@D(@@N(@@F(1, @@R(succ(@var_1)), @@F(@cDub, @@M(@var_2, @@F(true, @@D(@@N(@@S(@var_4, @@R(2 * if(@var_0, @var_3, @var_4) + if(!@var_0, 1, 0))))), @@N(@@S(@var_4, @@R(2 * if(@var_2, @var_3, @var_4) + if(@var_0, 1, 0))))), @@F(true, @@D(@@N(@@S(@var_4, @@R(2 * if(@var_0, @var_3, @var_4) + if(!@var_0, 1, 0))))), @@D(@@X))), @@X))))))), @@F(true, @@D(@@N(@@S(@var_3, @@D(@@N(@@F(1, @@R(succ(@var_1)), @@F(@cDub, @@M(@var_2, @@F(false, @@D(@@N(@@S(@var_4, @@R(2 * if(@var_0, @var_3, @var_4) + if(!@var_0, 1, 0))))), @@N(@@S(@var_4, @@R(2 * if(@var_2, @var_3, @var_4) + if(@var_0, 1, 0))))), @@F(false, @@D(@@N(@@S(@var_4, @@R(2 * if(@var_0, @var_3, @var_4) + if(!@var_0, 1, 0))))), @@D(@@X))), @@X))))))), @@N(@@S(@var_3, @@D(@@N(@@F(1, @@R(succ(@var_1)), @@F(@cDub, @@M(@var_2, @@N(@@S(@var_4, @@R(2 * if(@var_2, @var_3, @var_4) + if(@var_0, 1, 0)))), @@D(@@X)), @@X))))))))), @@N(@@F(1, @@R(succ(@var_1)), @@X)))))), @@N(@@F(@cDub, @@S(@var_1, @@F(false, @@D(@@N(@@S(@var_2, @@D(@@N(@@F(@cDub, @@M(@var_1, @@F(true, @@D(@@N(@@S(@var_3, @@R(2 * if(@var_0, @var_2, @var_3) + if(!@var_0, 1, 0))))), @@N(@@S(@var_3, @@R(2 * if(@var_1, @var_2, @var_3) + if(@var_0, 1, 0))))), @@F(true, @@D(@@N(@@S(@var_3, @@R(2 * if(@var_0, @var_2, @var_3) + if(!@var_0, 1, 0))))), @@D(@@X))), @@X)))))), @@F(true, @@D(@@N(@@S(@var_2, @@D(@@N(@@F(@cDub, @@M(@var_1, @@F(false, @@D(@@N(@@S(@var_3, @@R(2 * if(@var_0, @var_2, @var_3) + if(!@var_0, 1, 0))))), @@N(@@S(@var_3, @@R(2 * if(@var_1, @var_2, @var_3) + if(@var_0, 1, 0))))), @@F(false, @@D(@@N(@@S(@var_3, @@R(2 * if(@var_0, @var_2, @var_3) + if(!@var_0, 1, 0))))), @@D(@@X))), @@X)))))), @@N(@@S(@var_2, @@D(@@N(@@F(@cDub, @@M(@var_1, @@N(@@S(@var_3, @@R(2 * if(@var_1, @var_2, @var_3) + if(@var_0, 1, 0)))), @@D(@@X)), @@X)))))))), @@X)))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address(arg0) == 0x55a6cf916890) // F1
      {
        const data_expression& var_1 = arg1; // S1a
        if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf918420) // F1
        {
          const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
          if (uint_address(arg1[1]) == 0x55a6cf9183f0) // F2a false
          {
            const data_expression& t2 = down_cast<data_expression>(arg1[1]);
            const data_expression& var_3 = down_cast<data_expression>(arg1[2]); // S2
            if (uint_address(arg2) == 0x55a6cf918300) // F1
            {
              return rewr_527_1(rewr_527_1(var_1,  this_rewriter),  this_rewriter); // R1 succ(succ(@var_1))
            }
            else
            {
              if (uint_address((is_function_symbol(arg2) ? arg2 : arg2[0])) == 0x55a6cf918420) // F1
              {
                if (var_2 == arg2[1]) // M
                {
                  if (uint_address(arg2[1]) == 0x55a6cf916890) // F2a true
                  {
                    const data_expression& t4 = down_cast<data_expression>(arg2[1]);
                    const data_expression& var_4 = down_cast<data_expression>(arg2[2]); // S2
                    return rewr_91_2(rewr_121_1(var_0,  this_rewriter), rewr_528_3(var_0, var_3, var_4,  this_rewriter),  this_rewriter); // R1 2 * if(@var_0, @var_3, @var_4) + if(!@var_0, 1, 0)
                  }
                  else
                  {
                    const data_expression& var_4 = down_cast<data_expression>(arg2[2]); // S2
                    return rewr_91_2(var_0, rewr_528_3(var_2, var_3, var_4,  this_rewriter),  this_rewriter); // R1 2 * if(@var_2, @var_3, @var_4) + if(@var_0, 1, 0)
                  }
                }
                else
                {
                  if (uint_address(arg2[1]) == 0x55a6cf916890) // F2a true
                  {
                    const data_expression& t4 = down_cast<data_expression>(arg2[1]);
                    const data_expression& var_4 = down_cast<data_expression>(arg2[2]); // S2
                    return rewr_91_2(rewr_121_1(var_0,  this_rewriter), rewr_528_3(var_0, var_3, var_4,  this_rewriter),  this_rewriter); // R1 2 * if(@var_0, @var_3, @var_4) + if(!@var_0, 1, 0)
                  }
                  else
                  {
                  }
                }
              }
              else
              {
              }
            }
          }
          else
          {
            if (uint_address(arg1[1]) == 0x55a6cf916890) // F2a true
            {
              const data_expression& t2 = down_cast<data_expression>(arg1[1]);
              const data_expression& var_3 = down_cast<data_expression>(arg1[2]); // S2
              if (uint_address(arg2) == 0x55a6cf918300) // F1
              {
                return rewr_527_1(rewr_527_1(var_1,  this_rewriter),  this_rewriter); // R1 succ(succ(@var_1))
              }
              else
              {
                if (uint_address((is_function_symbol(arg2) ? arg2 : arg2[0])) == 0x55a6cf918420) // F1
                {
                  if (var_2 == arg2[1]) // M
                  {
                    if (uint_address(arg2[1]) == 0x55a6cf9183f0) // F2a false
                    {
                      const data_expression& t4 = down_cast<data_expression>(arg2[1]);
                      const data_expression& var_4 = down_cast<data_expression>(arg2[2]); // S2
                      return rewr_91_2(rewr_121_1(var_0,  this_rewriter), rewr_528_3(var_0, var_3, var_4,  this_rewriter),  this_rewriter); // R1 2 * if(@var_0, @var_3, @var_4) + if(!@var_0, 1, 0)
                    }
                    else
                    {
                      const data_expression& var_4 = down_cast<data_expression>(arg2[2]); // S2
                      return rewr_91_2(var_0, rewr_528_3(var_2, var_3, var_4,  this_rewriter),  this_rewriter); // R1 2 * if(@var_2, @var_3, @var_4) + if(@var_0, 1, 0)
                    }
                  }
                  else
                  {
                    if (uint_address(arg2[1]) == 0x55a6cf9183f0) // F2a false
                    {
                      const data_expression& t4 = down_cast<data_expression>(arg2[1]);
                      const data_expression& var_4 = down_cast<data_expression>(arg2[2]); // S2
                      return rewr_91_2(rewr_121_1(var_0,  this_rewriter), rewr_528_3(var_0, var_3, var_4,  this_rewriter),  this_rewriter); // R1 2 * if(@var_0, @var_3, @var_4) + if(!@var_0, 1, 0)
                    }
                    else
                    {
                    }
                  }
                }
                else
                {
                }
              }
            }
            else
            {
              const data_expression& var_3 = down_cast<data_expression>(arg1[2]); // S2
              if (uint_address(arg2) == 0x55a6cf918300) // F1
              {
                return rewr_527_1(rewr_527_1(var_1,  this_rewriter),  this_rewriter); // R1 succ(succ(@var_1))
              }
              else
              {
                if (uint_address((is_function_symbol(arg2) ? arg2 : arg2[0])) == 0x55a6cf918420) // F1
                {
                  if (var_2 == arg2[1]) // M
                  {
                    const data_expression& var_4 = down_cast<data_expression>(arg2[2]); // S2
                    return rewr_91_2(var_0, rewr_528_3(var_2, var_3, var_4,  this_rewriter),  this_rewriter); // R1 2 * if(@var_2, @var_3, @var_4) + if(@var_0, 1, 0)
                  }
                  else
                  {
                  }
                }
                else
                {
                }
              }
            }
          }
        }
        else
        {
          if (uint_address(arg2) == 0x55a6cf918300) // F1
          {
            return rewr_527_1(rewr_527_1(var_1,  this_rewriter),  this_rewriter); // R1 succ(succ(@var_1))
          }
          else
          {
          }
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf9183f0) // F1
        {
          const data_expression& var_1 = arg1; // S1a
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf918420) // F1
          {
            const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
            if (uint_address(arg1[1]) == 0x55a6cf9183f0) // F2a false
            {
              const data_expression& t2 = down_cast<data_expression>(arg1[1]);
              const data_expression& var_3 = down_cast<data_expression>(arg1[2]); // S2
              if (uint_address(arg2) == 0x55a6cf918300) // F1
              {
                return rewr_527_1(var_1,  this_rewriter); // R1 succ(@var_1)
              }
              else
              {
                if (uint_address((is_function_symbol(arg2) ? arg2 : arg2[0])) == 0x55a6cf918420) // F1
                {
                  if (var_2 == arg2[1]) // M
                  {
                    if (uint_address(arg2[1]) == 0x55a6cf916890) // F2a true
                    {
                      const data_expression& t4 = down_cast<data_expression>(arg2[1]);
                      const data_expression& var_4 = down_cast<data_expression>(arg2[2]); // S2
                      return rewr_91_2(rewr_121_1(var_0,  this_rewriter), rewr_528_3(var_0, var_3, var_4,  this_rewriter),  this_rewriter); // R1 2 * if(@var_0, @var_3, @var_4) + if(!@var_0, 1, 0)
                    }
                    else
                    {
                      const data_expression& var_4 = down_cast<data_expression>(arg2[2]); // S2
                      return rewr_91_2(var_0, rewr_528_3(var_2, var_3, var_4,  this_rewriter),  this_rewriter); // R1 2 * if(@var_2, @var_3, @var_4) + if(@var_0, 1, 0)
                    }
                  }
                  else
                  {
                    if (uint_address(arg2[1]) == 0x55a6cf916890) // F2a true
                    {
                      const data_expression& t4 = down_cast<data_expression>(arg2[1]);
                      const data_expression& var_4 = down_cast<data_expression>(arg2[2]); // S2
                      return rewr_91_2(rewr_121_1(var_0,  this_rewriter), rewr_528_3(var_0, var_3, var_4,  this_rewriter),  this_rewriter); // R1 2 * if(@var_0, @var_3, @var_4) + if(!@var_0, 1, 0)
                    }
                    else
                    {
                    }
                  }
                }
                else
                {
                }
              }
            }
            else
            {
              if (uint_address(arg1[1]) == 0x55a6cf916890) // F2a true
              {
                const data_expression& t2 = down_cast<data_expression>(arg1[1]);
                const data_expression& var_3 = down_cast<data_expression>(arg1[2]); // S2
                if (uint_address(arg2) == 0x55a6cf918300) // F1
                {
                  return rewr_527_1(var_1,  this_rewriter); // R1 succ(@var_1)
                }
                else
                {
                  if (uint_address((is_function_symbol(arg2) ? arg2 : arg2[0])) == 0x55a6cf918420) // F1
                  {
                    if (var_2 == arg2[1]) // M
                    {
                      if (uint_address(arg2[1]) == 0x55a6cf9183f0) // F2a false
                      {
                        const data_expression& t4 = down_cast<data_expression>(arg2[1]);
                        const data_expression& var_4 = down_cast<data_expression>(arg2[2]); // S2
                        return rewr_91_2(rewr_121_1(var_0,  this_rewriter), rewr_528_3(var_0, var_3, var_4,  this_rewriter),  this_rewriter); // R1 2 * if(@var_0, @var_3, @var_4) + if(!@var_0, 1, 0)
                      }
                      else
                      {
                        const data_expression& var_4 = down_cast<data_expression>(arg2[2]); // S2
                        return rewr_91_2(var_0, rewr_528_3(var_2, var_3, var_4,  this_rewriter),  this_rewriter); // R1 2 * if(@var_2, @var_3, @var_4) + if(@var_0, 1, 0)
                      }
                    }
                    else
                    {
                      if (uint_address(arg2[1]) == 0x55a6cf9183f0) // F2a false
                      {
                        const data_expression& t4 = down_cast<data_expression>(arg2[1]);
                        const data_expression& var_4 = down_cast<data_expression>(arg2[2]); // S2
                        return rewr_91_2(rewr_121_1(var_0,  this_rewriter), rewr_528_3(var_0, var_3, var_4,  this_rewriter),  this_rewriter); // R1 2 * if(@var_0, @var_3, @var_4) + if(!@var_0, 1, 0)
                      }
                      else
                      {
                      }
                    }
                  }
                  else
                  {
                  }
                }
              }
              else
              {
                const data_expression& var_3 = down_cast<data_expression>(arg1[2]); // S2
                if (uint_address(arg2) == 0x55a6cf918300) // F1
                {
                  return rewr_527_1(var_1,  this_rewriter); // R1 succ(@var_1)
                }
                else
                {
                  if (uint_address((is_function_symbol(arg2) ? arg2 : arg2[0])) == 0x55a6cf918420) // F1
                  {
                    if (var_2 == arg2[1]) // M
                    {
                      const data_expression& var_4 = down_cast<data_expression>(arg2[2]); // S2
                      return rewr_91_2(var_0, rewr_528_3(var_2, var_3, var_4,  this_rewriter),  this_rewriter); // R1 2 * if(@var_2, @var_3, @var_4) + if(@var_0, 1, 0)
                    }
                    else
                    {
                    }
                  }
                  else
                  {
                  }
                }
              }
            }
          }
          else
          {
            if (uint_address(arg2) == 0x55a6cf918300) // F1
            {
              return rewr_527_1(var_1,  this_rewriter); // R1 succ(@var_1)
            }
            else
            {
            }
          }
        }
        else
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf918420) // F1
          {
            const data_expression& var_1 = down_cast<data_expression>(arg1[1]); // S2
            if (uint_address(arg1[1]) == 0x55a6cf9183f0) // F2a false
            {
              const data_expression& t1 = down_cast<data_expression>(arg1[1]);
              const data_expression& var_2 = down_cast<data_expression>(arg1[2]); // S2
              if (uint_address((is_function_symbol(arg2) ? arg2 : arg2[0])) == 0x55a6cf918420) // F1
              {
                if (var_1 == arg2[1]) // M
                {
                  if (uint_address(arg2[1]) == 0x55a6cf916890) // F2a true
                  {
                    const data_expression& t3 = down_cast<data_expression>(arg2[1]);
                    const data_expression& var_3 = down_cast<data_expression>(arg2[2]); // S2
                    return rewr_91_2(rewr_121_1(var_0,  this_rewriter), rewr_528_3(var_0, var_2, var_3,  this_rewriter),  this_rewriter); // R1 2 * if(@var_0, @var_2, @var_3) + if(!@var_0, 1, 0)
                  }
                  else
                  {
                    const data_expression& var_3 = down_cast<data_expression>(arg2[2]); // S2
                    return rewr_91_2(var_0, rewr_528_3(var_1, var_2, var_3,  this_rewriter),  this_rewriter); // R1 2 * if(@var_1, @var_2, @var_3) + if(@var_0, 1, 0)
                  }
                }
                else
                {
                  if (uint_address(arg2[1]) == 0x55a6cf916890) // F2a true
                  {
                    const data_expression& t3 = down_cast<data_expression>(arg2[1]);
                    const data_expression& var_3 = down_cast<data_expression>(arg2[2]); // S2
                    return rewr_91_2(rewr_121_1(var_0,  this_rewriter), rewr_528_3(var_0, var_2, var_3,  this_rewriter),  this_rewriter); // R1 2 * if(@var_0, @var_2, @var_3) + if(!@var_0, 1, 0)
                  }
                  else
                  {
                  }
                }
              }
              else
              {
              }
            }
            else
            {
              if (uint_address(arg1[1]) == 0x55a6cf916890) // F2a true
              {
                const data_expression& t1 = down_cast<data_expression>(arg1[1]);
                const data_expression& var_2 = down_cast<data_expression>(arg1[2]); // S2
                if (uint_address((is_function_symbol(arg2) ? arg2 : arg2[0])) == 0x55a6cf918420) // F1
                {
                  if (var_1 == arg2[1]) // M
                  {
                    if (uint_address(arg2[1]) == 0x55a6cf9183f0) // F2a false
                    {
                      const data_expression& t3 = down_cast<data_expression>(arg2[1]);
                      const data_expression& var_3 = down_cast<data_expression>(arg2[2]); // S2
                      return rewr_91_2(rewr_121_1(var_0,  this_rewriter), rewr_528_3(var_0, var_2, var_3,  this_rewriter),  this_rewriter); // R1 2 * if(@var_0, @var_2, @var_3) + if(!@var_0, 1, 0)
                    }
                    else
                    {
                      const data_expression& var_3 = down_cast<data_expression>(arg2[2]); // S2
                      return rewr_91_2(var_0, rewr_528_3(var_1, var_2, var_3,  this_rewriter),  this_rewriter); // R1 2 * if(@var_1, @var_2, @var_3) + if(@var_0, 1, 0)
                    }
                  }
                  else
                  {
                    if (uint_address(arg2[1]) == 0x55a6cf9183f0) // F2a false
                    {
                      const data_expression& t3 = down_cast<data_expression>(arg2[1]);
                      const data_expression& var_3 = down_cast<data_expression>(arg2[2]); // S2
                      return rewr_91_2(rewr_121_1(var_0,  this_rewriter), rewr_528_3(var_0, var_2, var_3,  this_rewriter),  this_rewriter); // R1 2 * if(@var_0, @var_2, @var_3) + if(!@var_0, 1, 0)
                    }
                    else
                    {
                    }
                  }
                }
                else
                {
                }
              }
              else
              {
                const data_expression& var_2 = down_cast<data_expression>(arg1[2]); // S2
                if (uint_address((is_function_symbol(arg2) ? arg2 : arg2[0])) == 0x55a6cf918420) // F1
                {
                  if (var_1 == arg2[1]) // M
                  {
                    const data_expression& var_3 = down_cast<data_expression>(arg2[2]); // S2
                    return rewr_91_2(var_0, rewr_528_3(var_1, var_2, var_3,  this_rewriter),  this_rewriter); // R1 2 * if(@var_1, @var_2, @var_3) + if(@var_0, 1, 0)
                  }
                  else
                  {
                  }
                }
                else
                {
                }
              }
            }
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf986140))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_528_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_528_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_528_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_528_3(t[0], t[1], t[2], this_rewriter); }


  // [528] @addc: Bool # Pos # Pos -> Pos
  static inline const data_expression& rewr_528_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa47fb0);
  }

  static inline data_expression rewr_528_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_528_0(this_rewriter); }

  static inline data_expression rewr_528_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_528_0(this_rewriter); }


  // [527] succ: Pos -> Pos
  template < class DATA_EXPR0>
  static inline data_expression rewr_527_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@cDub, @@F(true, @@D(@@N(@@S(@var_0, @@R(2 * succ(@var_0))))), @@F(false, @@D(@@N(@@S(@var_0, @@R(2 * @var_0 + 1)))), @@D(@@X))), @@F(1, @@R(2), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf918420) // F1
      {
        if (uint_address(arg0[1]) == 0x55a6cf916890) // F2a true
        {
          const data_expression& t1 = down_cast<data_expression>(arg0[1]);
          const data_expression& var_0 = down_cast<data_expression>(arg0[2]); // S2
          return rewr_91_2(*reinterpret_cast<const data_expression*>(0x55a6cfa6a690), rewr_527_1(var_0,  this_rewriter),  this_rewriter); // R1 2 * succ(@var_0)
        }
        else
        {
          if (uint_address(arg0[1]) == 0x55a6cf9183f0) // F2a false
          {
            const data_expression& t1 = down_cast<data_expression>(arg0[1]);
            const data_expression& var_0 = down_cast<data_expression>(arg0[2]); // S2
            return rewr_91_2(*reinterpret_cast<const data_expression*>(0x55a6cfa6d030), var_0,  this_rewriter); // R1 2 * @var_0 + 1
          }
          else
          {
          }
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf918300) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa67ef0); // R1 2
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985fc0))), arg0);
  }

  static inline data_expression rewr_527_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_527_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_527_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_527_1(t[0], this_rewriter); }


  // [527] succ: Pos -> Pos
  static inline const data_expression& rewr_527_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa47fe0);
  }

  static inline data_expression rewr_527_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_527_0(this_rewriter); }

  static inline data_expression rewr_527_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_527_0(this_rewriter); }


  // [525] if: Bool # Pos # Pos -> Pos
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_525_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985e40))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_525_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_525_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_525_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_525_3(t[0], t[1], t[2], this_rewriter); }


  // [525] if: Bool # Pos # Pos -> Pos
  static inline const data_expression& rewr_525_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa48f20);
  }

  static inline data_expression rewr_525_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_525_0(this_rewriter); }

  static inline data_expression rewr_525_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_525_0(this_rewriter); }


  // [524] <=: Pos # Pos -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_524_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(1, @@D(@@N(@@S(@var_0, @@R(true)))), @@X)
    {
      if (uint_address(arg0) == 0x55a6cf918300) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(succ, @@S(@var_1, @@D(@@N(@@M(@var_0, @@R(true), @@F(1, @@R(false), @@F(@cDub, @@S(@var_2, @@N(@@S(@var_3, @@R(@var_1 < 2 * @var_3 + if(@var_2, 1, 0))))), @@X)))))), @@F(@cDub, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(true), @@F(succ, @@S(@var_3, @@R(@pospred(2 * @var_2 + if(@var_1, 1, 0)) <= @var_3)), @@F(1, @@R(false), @@F(@cDub, @@S(@var_3, @@N(@@S(@var_4, @@R(if(@var_1 => @var_3, @var_2 <= @var_4, @var_2 < @var_4))))), @@X))))))))), @@N(@@M(@var_0, @@R(true), @@X)))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf985fc0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
          if (uint_address(arg1) == 0x55a6cf918300) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf918420) // F1
            {
              const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
              const data_expression& var_3 = down_cast<data_expression>(arg1[2]); // S2
              return rewr_200_2(var_1, rewr_91_2(var_2, var_3,  this_rewriter),  this_rewriter); // R1 @var_1 < 2 * @var_3 + if(@var_2, 1, 0)
            }
            else
            {
            }
          }
        }
      }
      else
      {
        if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf918420) // F1
        {
          const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
          const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf985fc0) // F1
            {
              const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
              return rewr_524_2(rewr_538_1(rewr_91_2(var_1, var_2,  this_rewriter),  this_rewriter), var_3,  this_rewriter); // R1 @pospred(2 * @var_2 + if(@var_1, 1, 0)) <= @var_3
            }
            else
            {
              if (uint_address(arg1) == 0x55a6cf918300) // F1
              {
                return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
              }
              else
              {
                if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf918420) // F1
                {
                  const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
                  const data_expression& var_4 = down_cast<data_expression>(arg1[2]); // S2
                  return rewr_490_3(rewr_48_2(var_1, var_3,  this_rewriter), delayed_rewr_524_2<data_expression, data_expression>(var_2, var_4,  this_rewriter), delayed_rewr_200_2<data_expression, data_expression>(var_2, var_4,  this_rewriter),  this_rewriter); // R1 if(@var_1 => @var_3, @var_2 <= @var_4, @var_2 < @var_4)
                }
                else
                {
                }
              }
            }
          }
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985d80))), arg0, arg1);
  }

  static inline data_expression rewr_524_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_524_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_524_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_524_2(t[0], t[1], this_rewriter); }


  // [200] <: Pos # Pos -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_200_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_200_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_200_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [524] <=: Pos # Pos -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_524_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_524_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_524_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [524] <=: Pos # Pos -> Bool
  static inline const data_expression& rewr_524_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa48870);
  }

  static inline data_expression rewr_524_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_524_0(this_rewriter); }

  static inline data_expression rewr_524_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_524_0(this_rewriter); }


  // [431] ==: Pos # Pos -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_431_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(@cDub, @@S(@var_1, @@F(true, @@D(@@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(true), @@F(1, @@R(false), @@F(@cDub, @@M(@var_1, @@F(false, @@D(@@N(@@R(false))), @@N(@@S(@var_3, @@R(@var_2 == @var_3)))), @@F(false, @@D(@@N(@@R(false))), @@D(@@X))), @@F(succ, @@S(@var_3, @@R(@pospred(2 * @var_2 + if(@var_1, 1, 0)) == @var_3)), @@X))))))))), @@F(false, @@D(@@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(true), @@F(1, @@R(false), @@F(@cDub, @@M(@var_1, @@F(true, @@D(@@N(@@R(false))), @@N(@@S(@var_3, @@R(@var_2 == @var_3)))), @@F(true, @@D(@@N(@@R(false))), @@D(@@X))), @@F(succ, @@S(@var_3, @@R(@pospred(2 * @var_2 + if(@var_1, 1, 0)) == @var_3)), @@X))))))))), @@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(true), @@F(1, @@R(false), @@F(succ, @@S(@var_3, @@R(@pospred(2 * @var_2 + if(@var_1, 1, 0)) == @var_3)), @@F(@cDub, @@M(@var_1, @@N(@@S(@var_3, @@R(@var_2 == @var_3))), @@D(@@X)), @@X))))))))))), @@F(1, @@D(@@N(@@M(@var_0, @@R(true), @@F(succ, @@R(false), @@F(@cDub, @@N(@@R(false)), @@X))))), @@F(succ, @@S(@var_1, @@D(@@N(@@M(@var_0, @@R(true), @@F(@cDub, @@S(@var_2, @@N(@@S(@var_3, @@R(@var_1 == @pospred(2 * @var_3 + if(@var_2, 1, 0)))))), @@F(1, @@R(false), @@X)))))), @@N(@@M(@var_0, @@R(true), @@X))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf918420) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        if (uint_address(arg0[1]) == 0x55a6cf916890) // F2a true
        {
          const data_expression& t1 = down_cast<data_expression>(arg0[1]);
          const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (uint_address(arg1) == 0x55a6cf918300) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
            }
            else
            {
              if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf918420) // F1
              {
                if (var_1 == arg1[1]) // M
                {
                  if (uint_address(arg1[1]) == 0x55a6cf9183f0) // F2a false
                  {
                    const data_expression& t3 = down_cast<data_expression>(arg1[1]);
                    return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
                  }
                  else
                  {
                    const data_expression& var_3 = down_cast<data_expression>(arg1[2]); // S2
                    return rewr_431_2(var_2, var_3,  this_rewriter); // R1 @var_2 == @var_3
                  }
                }
                else
                {
                  if (uint_address(arg1[1]) == 0x55a6cf9183f0) // F2a false
                  {
                    const data_expression& t3 = down_cast<data_expression>(arg1[1]);
                    return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
                  }
                  else
                  {
                  }
                }
              }
              else
              {
                if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf985fc0) // F1
                {
                  const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
                  return rewr_431_2(rewr_538_1(rewr_91_2(var_1, var_2,  this_rewriter),  this_rewriter), var_3,  this_rewriter); // R1 @pospred(2 * @var_2 + if(@var_1, 1, 0)) == @var_3
                }
                else
                {
                }
              }
            }
          }
        }
        else
        {
          if (uint_address(arg0[1]) == 0x55a6cf9183f0) // F2a false
          {
            const data_expression& t1 = down_cast<data_expression>(arg0[1]);
            const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
            if (var_0 == arg1) // M
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
              if (uint_address(arg1) == 0x55a6cf918300) // F1
              {
                return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
              }
              else
              {
                if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf918420) // F1
                {
                  if (var_1 == arg1[1]) // M
                  {
                    if (uint_address(arg1[1]) == 0x55a6cf916890) // F2a true
                    {
                      const data_expression& t3 = down_cast<data_expression>(arg1[1]);
                      return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
                    }
                    else
                    {
                      const data_expression& var_3 = down_cast<data_expression>(arg1[2]); // S2
                      return rewr_431_2(var_2, var_3,  this_rewriter); // R1 @var_2 == @var_3
                    }
                  }
                  else
                  {
                    if (uint_address(arg1[1]) == 0x55a6cf916890) // F2a true
                    {
                      const data_expression& t3 = down_cast<data_expression>(arg1[1]);
                      return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
                    }
                    else
                    {
                    }
                  }
                }
                else
                {
                  if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf985fc0) // F1
                  {
                    const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
                    return rewr_431_2(rewr_538_1(rewr_91_2(var_1, var_2,  this_rewriter),  this_rewriter), var_3,  this_rewriter); // R1 @pospred(2 * @var_2 + if(@var_1, 1, 0)) == @var_3
                  }
                  else
                  {
                  }
                }
              }
            }
          }
          else
          {
            const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
            if (var_0 == arg1) // M
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
              if (uint_address(arg1) == 0x55a6cf918300) // F1
              {
                return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
              }
              else
              {
                if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf985fc0) // F1
                {
                  const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
                  return rewr_431_2(rewr_538_1(rewr_91_2(var_1, var_2,  this_rewriter),  this_rewriter), var_3,  this_rewriter); // R1 @pospred(2 * @var_2 + if(@var_1, 1, 0)) == @var_3
                }
                else
                {
                  if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf918420) // F1
                  {
                    if (var_1 == arg1[1]) // M
                    {
                      const data_expression& var_3 = down_cast<data_expression>(arg1[2]); // S2
                      return rewr_431_2(var_2, var_3,  this_rewriter); // R1 @var_2 == @var_3
                    }
                    else
                    {
                    }
                  }
                  else
                  {
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf918300) // F1
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf985fc0) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
            }
            else
            {
              if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf918420) // F1
              {
                return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
              }
              else
              {
              }
            }
          }
        }
        else
        {
          if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf985fc0) // F1
          {
            const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
            if (var_0 == arg1) // M
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
              if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf918420) // F1
              {
                const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
                const data_expression& var_3 = down_cast<data_expression>(arg1[2]); // S2
                return rewr_431_2(var_1, rewr_538_1(rewr_91_2(var_2, var_3,  this_rewriter),  this_rewriter),  this_rewriter); // R1 @var_1 == @pospred(2 * @var_3 + if(@var_2, 1, 0))
              }
              else
              {
                if (uint_address(arg1) == 0x55a6cf918300) // F1
                {
                  return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
                }
                else
                {
                }
              }
            }
          }
          else
          {
            if (var_0 == arg1) // M
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982bd0))), arg0, arg1);
  }

  static inline data_expression rewr_431_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_431_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_431_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_431_2(t[0], t[1], this_rewriter); }


  // [431] ==: Pos # Pos -> Bool
  static inline const data_expression& rewr_431_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa486f0);
  }

  static inline data_expression rewr_431_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_431_0(this_rewriter); }

  static inline data_expression rewr_431_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_431_0(this_rewriter); }


  // [201] !=: Pos # Pos -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_201_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_431_2(local_rewrite(var_0, this_rewriter), local_rewrite(var_1, this_rewriter),  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91df10))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_201_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_201_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_201_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_201_2(t[0], t[1], this_rewriter); }


  // [201] !=: Pos # Pos -> Bool
  static inline const data_expression& rewr_201_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa0d40);
  }

  static inline data_expression rewr_201_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_201_0(this_rewriter); }

  static inline data_expression rewr_201_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_201_0(this_rewriter); }


  // [200] <: Pos # Pos -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_200_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@N(@@F(1, @@R(false), @@X))
    {
      if (uint_address(arg1) == 0x55a6cf918300) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@S(@var_0, @@F(1, @@D(@@N(@@M(@var_0, @@R(false), @@F(@cDub, @@N(@@R(true)), @@F(succ, @@R(true), @@X))))), @@F(@cDub, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(false), @@F(succ, @@S(@var_3, @@R(2 * @var_2 + if(@var_1, 1, 0) <= @var_3)), @@F(@cDub, @@S(@var_3, @@N(@@S(@var_4, @@R(if(@var_3 => @var_1, @var_2 < @var_4, @var_2 <= @var_4))))), @@X)))))))), @@F(succ, @@S(@var_1, @@D(@@N(@@M(@var_0, @@R(false), @@F(@cDub, @@S(@var_2, @@N(@@S(@var_3, @@R(@var_1 < @pospred(2 * @var_3 + if(@var_2, 1, 0)))))), @@X))))), @@N(@@M(@var_0, @@R(false), @@X))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address(arg0) == 0x55a6cf918300) // F1
      {
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
        }
        else
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf918420) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf985fc0) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
            }
          }
        }
      }
      else
      {
        if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf918420) // F1
        {
          const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
          const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf985fc0) // F1
            {
              const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
              return rewr_524_2(rewr_91_2(var_1, var_2,  this_rewriter), var_3,  this_rewriter); // R1 2 * @var_2 + if(@var_1, 1, 0) <= @var_3
            }
            else
            {
              if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf918420) // F1
              {
                const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
                const data_expression& var_4 = down_cast<data_expression>(arg1[2]); // S2
                return rewr_490_3(rewr_48_2(var_3, var_1,  this_rewriter), delayed_rewr_200_2<data_expression, data_expression>(var_2, var_4,  this_rewriter), delayed_rewr_524_2<data_expression, data_expression>(var_2, var_4,  this_rewriter),  this_rewriter); // R1 if(@var_3 => @var_1, @var_2 < @var_4, @var_2 <= @var_4)
              }
              else
              {
              }
            }
          }
        }
        else
        {
          if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf985fc0) // F1
          {
            const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
            if (var_0 == arg1) // M
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
            }
            else
            {
              if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf918420) // F1
              {
                const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
                const data_expression& var_3 = down_cast<data_expression>(arg1[2]); // S2
                return rewr_200_2(var_1, rewr_538_1(rewr_91_2(var_2, var_3,  this_rewriter),  this_rewriter),  this_rewriter); // R1 @var_1 < @pospred(2 * @var_3 + if(@var_2, 1, 0))
              }
              else
              {
              }
            }
          }
          else
          {
            if (var_0 == arg1) // M
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
            }
            else
            {
            }
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91de80))), arg0, arg1);
  }

  static inline data_expression rewr_200_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_200_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_200_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_200_2(t[0], t[1], this_rewriter); }


  // [200] <: Pos # Pos -> Bool
  static inline const data_expression& rewr_200_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa0ce0);
  }

  static inline data_expression rewr_200_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_200_0(this_rewriter); }

  static inline data_expression rewr_200_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_200_0(this_rewriter); }


  // [535] >=: Nat # Nat -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_535_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_52_2(local_rewrite(var_1, this_rewriter), var_0,  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9874c0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_535_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_535_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_535_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_535_2(t[0], t[1], this_rewriter); }


  // [535] >=: Nat # Nat -> Bool
  static inline const data_expression& rewr_535_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa49da0);
  }

  static inline data_expression rewr_535_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_535_0(this_rewriter); }

  static inline data_expression rewr_535_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_535_0(this_rewriter); }


  // [531] >: Nat # Nat -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_531_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_165_2(var_1, local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf986ec0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_531_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_531_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_531_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_531_2(t[0], t[1], this_rewriter); }


  // [531] >: Nat # Nat -> Bool
  static inline const data_expression& rewr_531_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa49dd0);
  }

  static inline data_expression rewr_531_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_531_0(this_rewriter); }

  static inline data_expression rewr_531_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_531_0(this_rewriter); }


  // [526] if: Bool # Nat # Nat -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_526_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985f30))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_526_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_526_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_526_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_526_3(t[0], t[1], t[2], this_rewriter); }


  // [526] if: Bool # Nat # Nat -> Nat
  static inline const data_expression& rewr_526_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa48040);
  }

  static inline data_expression rewr_526_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_526_0(this_rewriter); }

  static inline data_expression rewr_526_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_526_0(this_rewriter); }


  // [523] @ggdivmod: Nat # Nat # Pos -> @NatPair
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_523_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(0, @@D(@@N(@@S(@var_0, @@N(@@R(@cPair(@dub(false, @var_0), 0)))))), @@X)
    {
      if (uint_address(arg0) == 0x55a6cf918b40) // F1
      {
        const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
        return rewr_493_2(rewr_500_2(*reinterpret_cast<const data_expression*>(0x55a6cfa6a690), local_rewrite(var_0, this_rewriter),  this_rewriter), *reinterpret_cast<const data_expression*>(0x55a6cfa6a570),  this_rewriter); // R1 @cPair(@dub(false, @var_0), 0)
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@F(@cNat, @@S(@var_0, @@D(@@N(@@S(@var_1, @@N(@@S(@var_2, @@C(@var_2 <= @var_0, @@R(@cPair(@dub(true, @var_1), @gtesubtb(false, @var_0, @var_2))), @@C(@var_0 < @var_2, @@R(@cPair(@dub(false, @var_1), @var_0)), @@X)))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
        const data_expression& var_2 = arg2; // S1a
        if (rewr_524_2(var_2, var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_493_2(rewr_500_2(*reinterpret_cast<const data_expression*>(0x55a6cfa6d030), local_rewrite(var_1, this_rewriter),  this_rewriter), rewr_505_3(*reinterpret_cast<const data_expression*>(0x55a6cfa6a690), var_0, var_2,  this_rewriter),  this_rewriter); // R1 @cPair(@dub(true, @var_1), @gtesubtb(false, @var_0, @var_2))
        }
        else
        {
          if (rewr_200_2(var_0, var_2,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_493_2(rewr_500_2(*reinterpret_cast<const data_expression*>(0x55a6cfa6a690), local_rewrite(var_1, this_rewriter),  this_rewriter), rewr_20_1(var_0,  this_rewriter),  this_rewriter); // R1 @cPair(@dub(false, @var_1), @var_0)
          }
          else
          {
          }
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985a80))), arg0, local_rewrite(arg_not_nf1,this_rewriter), arg2);
  }

  static inline data_expression rewr_523_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_523_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_523_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_523_3(t[0], t[1], t[2], this_rewriter); }


  // [523] @ggdivmod: Nat # Nat # Pos -> @NatPair
  static inline const data_expression& rewr_523_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa0d70);
  }

  static inline data_expression rewr_523_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_523_0(this_rewriter); }

  static inline data_expression rewr_523_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_523_0(this_rewriter); }


  // [522] @gdivmod: @NatPair # Bool # Pos -> @NatPair
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_522_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@cPair, @@S(@var_0, @@N(@@S(@var_1, @@D(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@ggdivmod(@dub(@var_2, @var_1), @var_0, @var_3)))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9854e0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const DATA_EXPR1& var_2 = arg_not_nf1; // S1b
        const DATA_EXPR2& var_3 = arg_not_nf2; // S1b
        return rewr_523_3(rewr_500_2(var_2, var_1,  this_rewriter), var_0, var_3,  this_rewriter); // R1 @ggdivmod(@dub(@var_2, @var_1), @var_0, @var_3)
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985a50))), arg0, local_rewrite(arg_not_nf1,this_rewriter), local_rewrite(arg_not_nf2,this_rewriter));
  }

  static inline data_expression rewr_522_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_522_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_522_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_522_3(t[0], t[1], t[2], this_rewriter); }


  // [522] @gdivmod: @NatPair # Bool # Pos -> @NatPair
  static inline const data_expression& rewr_522_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6cc40);
  }

  static inline data_expression rewr_522_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_522_0(this_rewriter); }

  static inline data_expression rewr_522_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_522_0(this_rewriter); }


  // [521] @divmod: Pos # Pos -> @NatPair
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_521_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(@cDub, @@S(@var_0, @@N(@@S(@var_1, @@D(@@N(@@S(@var_2, @@R(@gdivmod(@divmod(@var_1, @var_2), @var_0, @var_2)))))))), @@F(1, @@D(@@N(@@F(@cDub, @@N(@@R(@cPair(0, 1))), @@F(1, @@R(@cPair(1, 0)), @@X)))), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf918420) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = arg1; // S1a
        return rewr_522_3(rewr_521_2(var_1, var_2,  this_rewriter), var_0, var_2,  this_rewriter); // R1 @gdivmod(@divmod(@var_1, @var_2), @var_0, @var_2)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf918300) // F1
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf918420) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa48810); // R1 @cPair(0, 1)
          }
          else
          {
            if (uint_address(arg1) == 0x55a6cf918300) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa478a0); // R1 @cPair(1, 0)
            }
            else
            {
            }
          }
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985a20))), arg0, arg1);
  }

  static inline data_expression rewr_521_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_521_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_521_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_521_2(t[0], t[1], this_rewriter); }


  // [521] @divmod: Pos # Pos -> @NatPair
  static inline const data_expression& rewr_521_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa487e0);
  }

  static inline data_expression rewr_521_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_521_0(this_rewriter); }

  static inline data_expression rewr_521_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_521_0(this_rewriter); }


  // [520] @last: @NatPair -> Nat
  template < class DATA_EXPR0>
  static inline data_expression rewr_520_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@cPair, @@N(@@S(@var_1, @@R(@var_1))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9854e0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9859f0))), arg0);
  }

  static inline data_expression rewr_520_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_520_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_520_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_520_1(t[0], this_rewriter); }


  // [520] @last: @NatPair -> Nat
  static inline const data_expression& rewr_520_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa47840);
  }

  static inline data_expression rewr_520_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_520_0(this_rewriter); }

  static inline data_expression rewr_520_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_520_0(this_rewriter); }


  // [519] @first: @NatPair -> Nat
  template < class DATA_EXPR0>
  static inline data_expression rewr_519_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@cPair, @@S(@var_0, @@N(@@R(@var_0))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9854e0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        return var_0; // R1 @var_0
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9859c0))), arg0);
  }

  static inline data_expression rewr_519_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_519_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_519_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_519_1(t[0], this_rewriter); }


  // [519] @first: @NatPair -> Nat
  static inline const data_expression& rewr_519_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6b4a0);
  }

  static inline data_expression rewr_519_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_519_0(this_rewriter); }

  static inline data_expression rewr_519_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_519_0(this_rewriter); }


  // [518] @sqrt_nat: Nat # Nat # Pos -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_518_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@F(1, @@R(if(@var_0 <= @var_1, 0, 1)), @@X)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      if (uint_address(arg2) == 0x55a6cf918300) // F1
      {
        return rewr_526_3(rewr_52_2(local_rewrite(var_0, this_rewriter), var_1,  this_rewriter), *reinterpret_cast<const data_expression*>(0x55a6cfa6a570), *reinterpret_cast<const data_expression*>(0x55a6cfaa1960),  this_rewriter); // R1 if(@var_0 <= @var_1, 0, 1)
      }
      else
      {
      }
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@F(@cDub, @@S(@var_2, @@N(@@S(@var_3, @@R(if((2 * @var_3 + if(@var_2, 1, 0) + @var_1) * 2 * @var_3 + if(@var_2, 1, 0) > @var_0, @sqrt_nat(@var_0, @var_1, @var_3), 2 * @var_3 + if(@var_2, 1, 0) + @sqrt_nat(@monus(@var_0, (2 * @var_3 + if(@var_2, 1, 0) + @var_1) * 2 * @var_3 + if(@var_2, 1, 0)), @var_1 + 4 * @var_3 + 2 * if(@var_2, 1, 0), @var_3)))))), @@X)))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      if (uint_address((is_function_symbol(arg2) ? arg2 : arg2[0])) == 0x55a6cf918420) // F1
      {
        const data_expression& var_2 = down_cast<data_expression>(arg2[1]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg2[2]); // S2
        return rewr_526_3(rewr_531_2(delayed_rewr_506_2<delayed_rewr_504_2<delayed_rewr_20_1<delayed_rewr_91_2<data_expression, data_expression>>, data_expression>, delayed_rewr_20_1<delayed_rewr_91_2<data_expression, data_expression>>>(delayed_rewr_504_2<delayed_rewr_20_1<delayed_rewr_91_2<data_expression, data_expression>>, data_expression>(delayed_rewr_20_1<delayed_rewr_91_2<data_expression, data_expression>>(delayed_rewr_91_2<data_expression, data_expression>(var_2, var_3,  this_rewriter),  this_rewriter), var_1,  this_rewriter), delayed_rewr_20_1<delayed_rewr_91_2<data_expression, data_expression>>(delayed_rewr_91_2<data_expression, data_expression>(var_2, var_3,  this_rewriter),  this_rewriter),  this_rewriter), var_0,  this_rewriter), delayed_rewr_518_3<data_expression, data_expression, data_expression>(var_0, var_1, var_3,  this_rewriter), delayed_rewr_504_2<delayed_rewr_20_1<delayed_rewr_91_2<data_expression, data_expression>>, delayed_rewr_518_3<delayed_rewr_512_2<data_expression, delayed_rewr_506_2<delayed_rewr_504_2<delayed_rewr_20_1<delayed_rewr_91_2<data_expression, data_expression>>, data_expression>, delayed_rewr_20_1<delayed_rewr_91_2<data_expression, data_expression>>>>, delayed_rewr_504_2<data_expression, delayed_rewr_20_1<delayed_rewr_91_2<data_expression, delayed_rewr_91_2<data_expression, data_expression>>>>, data_expression>>(delayed_rewr_20_1<delayed_rewr_91_2<data_expression, data_expression>>(delayed_rewr_91_2<data_expression, data_expression>(var_2, var_3,  this_rewriter),  this_rewriter), delayed_rewr_518_3<delayed_rewr_512_2<data_expression, delayed_rewr_506_2<delayed_rewr_504_2<delayed_rewr_20_1<delayed_rewr_91_2<data_expression, data_expression>>, data_expression>, delayed_rewr_20_1<delayed_rewr_91_2<data_expression, data_expression>>>>, delayed_rewr_504_2<data_expression, delayed_rewr_20_1<delayed_rewr_91_2<data_expression, delayed_rewr_91_2<data_expression, data_expression>>>>, data_expression>(delayed_rewr_512_2<data_expression, delayed_rewr_506_2<delayed_rewr_504_2<delayed_rewr_20_1<delayed_rewr_91_2<data_expression, data_expression>>, data_expression>, delayed_rewr_20_1<delayed_rewr_91_2<data_expression, data_expression>>>>(var_0, delayed_rewr_506_2<delayed_rewr_504_2<delayed_rewr_20_1<delayed_rewr_91_2<data_expression, data_expression>>, data_expression>, delayed_rewr_20_1<delayed_rewr_91_2<data_expression, data_expression>>>(delayed_rewr_504_2<delayed_rewr_20_1<delayed_rewr_91_2<data_expression, data_expression>>, data_expression>(delayed_rewr_20_1<delayed_rewr_91_2<data_expression, data_expression>>(delayed_rewr_91_2<data_expression, data_expression>(var_2, var_3,  this_rewriter),  this_rewriter), var_1,  this_rewriter), delayed_rewr_20_1<delayed_rewr_91_2<data_expression, data_expression>>(delayed_rewr_91_2<data_expression, data_expression>(var_2, var_3,  this_rewriter),  this_rewriter),  this_rewriter),  this_rewriter), delayed_rewr_504_2<data_expression, delayed_rewr_20_1<delayed_rewr_91_2<data_expression, delayed_rewr_91_2<data_expression, data_expression>>>>(var_1, delayed_rewr_20_1<delayed_rewr_91_2<data_expression, delayed_rewr_91_2<data_expression, data_expression>>>(delayed_rewr_91_2<data_expression, delayed_rewr_91_2<data_expression, data_expression>>(*reinterpret_cast<const data_expression*>(0x55a6cfa6a690), delayed_rewr_91_2<data_expression, data_expression>(var_2, var_3,  this_rewriter),  this_rewriter),  this_rewriter),  this_rewriter), var_3,  this_rewriter),  this_rewriter),  this_rewriter); // R1 if((2 * @var_3 + if(@var_2, 1, 0) + @var_1) * 2 * @var_3 + if(@var_2, 1, 0) > @var_0, @sqrt_nat(@var_0, @var_1, @var_3), 2 * @var_3 + if(@var_2, 1, 0) + @sqrt_nat(@monus(@var_0, (2 * @var_3 + if(@var_2, 1, 0) + @var_1) * 2 * @var_3 + if(@var_2, 1, 0)), @var_1 + 4 * @var_3 + 2 * if(@var_2, 1, 0), @var_3))
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985990))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_518_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_518_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_518_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_518_3(t[0], t[1], t[2], this_rewriter); }


  // [512] @monus: Nat # Nat -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_512_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_512_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_512_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [518] @sqrt_nat: Nat # Nat # Pos -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_518_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_518_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_518_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [506] *: Nat # Nat -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_506_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_506_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_506_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [504] +: Nat # Nat -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_504_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_504_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_504_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [20] @cNat: Pos -> Nat
  template < class DATA_EXPR0>
  class delayed_rewr_20_1
  {
    protected:
      const DATA_EXPR0& m_t0;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_20_1(const DATA_EXPR0& t0, RewriterCompilingJitty* tr)
        : m_t0(t0), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_20_1(m_t0, this_rewriter);
      }
  };
  
  // [518] @sqrt_nat: Nat # Nat # Pos -> Nat
  static inline const data_expression& rewr_518_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa19c0);
  }

  static inline data_expression rewr_518_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_518_0(this_rewriter); }

  static inline data_expression rewr_518_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_518_0(this_rewriter); }


  // [517] sqrt: Nat -> Nat
  template < class DATA_EXPR0>
  static inline data_expression rewr_517_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@cNat, @@S(@var_0, @@R(@sqrt_nat(@var_0, 0, @powerlog2(@var_0)))), @@F(0, @@R(0), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        return rewr_518_3(delayed_rewr_20_1<data_expression>(var_0,  this_rewriter), *reinterpret_cast<const data_expression*>(0x55a6cfa6a570), rewr_530_1(var_0,  this_rewriter),  this_rewriter); // R1 @sqrt_nat(@var_0, 0, @powerlog2(@var_0))
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf918b40) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a570); // R1 0
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985960))), arg0);
  }

  static inline data_expression rewr_517_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_517_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_517_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_517_1(t[0], this_rewriter); }


  // [517] sqrt: Nat -> Nat
  static inline const data_expression& rewr_517_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa47870);
  }

  static inline data_expression rewr_517_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_517_0(this_rewriter); }

  static inline data_expression rewr_517_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_517_0(this_rewriter); }


  // [516] @swap_zero_monus: Nat # Nat # Nat # Nat -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_516_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(@cNat, @@S(@var_0, @@D(@@N(@@F(@cNat, @@S(@var_1, @@D(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@swap_zero(@monus(@var_0, @var_1), @monus(@swap_zero(@var_0, @var_2), @swap_zero(@var_1, @var_3)))))))))), @@X)))), @@F(0, @@D(@@N(@@F(0, @@D(@@N(@@S(@var_0, @@N(@@S(@var_1, @@R(@monus(@var_0, @var_1))))))), @@X))), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
        {
          const data_expression& var_1 = down_cast<data_expression>(arg1[1]); // S2
          const DATA_EXPR2& var_2 = arg_not_nf2; // S1b
          const DATA_EXPR3& var_3 = arg_not_nf3; // S1b
          return rewr_513_2(rewr_512_2(rewr_20_1(var_0,  this_rewriter), delayed_rewr_20_1<data_expression>(var_1,  this_rewriter),  this_rewriter), delayed_rewr_512_2<delayed_rewr_513_2<delayed_rewr_20_1<data_expression>, DATA_EXPR2>, delayed_rewr_513_2<delayed_rewr_20_1<data_expression>, DATA_EXPR3>>(delayed_rewr_513_2<delayed_rewr_20_1<data_expression>, DATA_EXPR2>(delayed_rewr_20_1<data_expression>(var_0,  this_rewriter), var_2,  this_rewriter), delayed_rewr_513_2<delayed_rewr_20_1<data_expression>, DATA_EXPR3>(delayed_rewr_20_1<data_expression>(var_1,  this_rewriter), var_3,  this_rewriter),  this_rewriter),  this_rewriter); // R1 @swap_zero(@monus(@var_0, @var_1), @monus(@swap_zero(@var_0, @var_2), @swap_zero(@var_1, @var_3)))
        }
        else
        {
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf918b40) // F1
        {
          if (uint_address(arg1) == 0x55a6cf918b40) // F1
          {
            const DATA_EXPR2& var_0 = arg_not_nf2; // S1b
            const DATA_EXPR3& var_1 = arg_not_nf3; // S1b
            return rewr_512_2(local_rewrite(var_0, this_rewriter), var_1,  this_rewriter); // R1 @monus(@var_0, @var_1)
          }
          else
          {
          }
        }
        else
        {
        }
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@F(0, @@D(@@N(@@F(@cNat, @@S(@var_0, @@D(@@N(@@F(0, @@D(@@N(@@R(0))), @@F(@cNat, @@S(@var_1, @@D(@@N(@@S(@var_2, @@R(@monus(@var_1, @swap_zero(@var_0, @var_2))))))), @@X))))), @@X))), @@X)
    {
      if (uint_address(arg0) == 0x55a6cf918b40) // F1
      {
        if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
        {
          const data_expression& var_0 = down_cast<data_expression>(arg1[1]); // S2
          if (uint_address(arg2) == 0x55a6cf918b40) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a570); // R1 0
          }
          else
          {
            if (uint_address((is_function_symbol(arg2) ? arg2 : arg2[0])) == 0x55a6cf916aa0) // F1
            {
              const data_expression& var_1 = down_cast<data_expression>(arg2[1]); // S2
              const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
              return rewr_512_2(rewr_20_1(var_1,  this_rewriter), delayed_rewr_513_2<delayed_rewr_20_1<data_expression>, DATA_EXPR3>(delayed_rewr_20_1<data_expression>(var_0,  this_rewriter), var_2,  this_rewriter),  this_rewriter); // R1 @monus(@var_1, @swap_zero(@var_0, @var_2))
            }
            else
            {
            }
          }
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@F(@cNat, @@S(@var_0, @@D(@@N(@@F(0, @@D(@@N(@@S(@var_1, @@N(@@F(@cNat, @@S(@var_2, @@R(@swap_zero(@var_0, @monus(@swap_zero(@var_0, @var_1), @var_2)))), @@F(0, @@R(@var_1), @@X)))))), @@X)))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        if (uint_address(arg1) == 0x55a6cf918b40) // F1
        {
          const data_expression& var_1 = arg2; // S1a
          if (uint_address((is_function_symbol(arg3) ? arg3 : arg3[0])) == 0x55a6cf916aa0) // F1
          {
            const data_expression& var_2 = down_cast<data_expression>(arg3[1]); // S2
            return rewr_513_2(rewr_20_1(var_0,  this_rewriter), delayed_rewr_512_2<delayed_rewr_513_2<delayed_rewr_20_1<data_expression>, data_expression>, delayed_rewr_20_1<data_expression>>(delayed_rewr_513_2<delayed_rewr_20_1<data_expression>, data_expression>(delayed_rewr_20_1<data_expression>(var_0,  this_rewriter), var_1,  this_rewriter), delayed_rewr_20_1<data_expression>(var_2,  this_rewriter),  this_rewriter),  this_rewriter); // R1 @swap_zero(@var_0, @monus(@swap_zero(@var_0, @var_1), @var_2))
          }
          else
          {
            if (uint_address(arg3) == 0x55a6cf918b40) // F1
            {
              return var_1; // R1 @var_1
            }
            else
            {
            }
          }
        }
        else
        {
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985930))), arg0, arg1, arg2, arg3);
  }

  static inline data_expression rewr_516_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_516_4(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), term_not_in_normal_form(t[3], this_rewriter), this_rewriter); }

  static inline data_expression rewr_516_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_516_4(t[0], t[1], t[2], t[3], this_rewriter); }


  // [513] @swap_zero: Nat # Nat -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_513_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_513_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_513_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [516] @swap_zero_monus: Nat # Nat # Nat # Nat -> Nat
  static inline const data_expression& rewr_516_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cface530);
  }

  static inline data_expression rewr_516_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_516_0(this_rewriter); }

  static inline data_expression rewr_516_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_516_0(this_rewriter); }


  // [515] @swap_zero_min: Nat # Nat # Nat # Nat -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_515_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(@cNat, @@S(@var_0, @@D(@@N(@@F(@cNat, @@S(@var_1, @@D(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@swap_zero(min(@var_0, @var_1), min(@swap_zero(@var_0, @var_2), @swap_zero(@var_1, @var_3)))))))))), @@X)))), @@F(0, @@D(@@N(@@F(0, @@D(@@N(@@S(@var_0, @@N(@@S(@var_1, @@R(min(@var_0, @var_1))))))), @@X))), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
        {
          const data_expression& var_1 = down_cast<data_expression>(arg1[1]); // S2
          const DATA_EXPR2& var_2 = arg_not_nf2; // S1b
          const DATA_EXPR3& var_3 = arg_not_nf3; // S1b
          return rewr_513_2(rewr_499_2(rewr_20_1(var_0,  this_rewriter), rewr_20_1(var_1,  this_rewriter),  this_rewriter), delayed_rewr_499_2<delayed_rewr_513_2<delayed_rewr_20_1<data_expression>, DATA_EXPR2>, delayed_rewr_513_2<delayed_rewr_20_1<data_expression>, DATA_EXPR3>>(delayed_rewr_513_2<delayed_rewr_20_1<data_expression>, DATA_EXPR2>(delayed_rewr_20_1<data_expression>(var_0,  this_rewriter), var_2,  this_rewriter), delayed_rewr_513_2<delayed_rewr_20_1<data_expression>, DATA_EXPR3>(delayed_rewr_20_1<data_expression>(var_1,  this_rewriter), var_3,  this_rewriter),  this_rewriter),  this_rewriter); // R1 @swap_zero(min(@var_0, @var_1), min(@swap_zero(@var_0, @var_2), @swap_zero(@var_1, @var_3)))
        }
        else
        {
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf918b40) // F1
        {
          if (uint_address(arg1) == 0x55a6cf918b40) // F1
          {
            const DATA_EXPR2& var_0 = arg_not_nf2; // S1b
            const DATA_EXPR3& var_1 = arg_not_nf3; // S1b
            return rewr_499_2(local_rewrite(var_0, this_rewriter), local_rewrite(var_1, this_rewriter),  this_rewriter); // R1 min(@var_0, @var_1)
          }
          else
          {
          }
        }
        else
        {
        }
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@F(0, @@D(@@N(@@F(@cNat, @@S(@var_0, @@D(@@N(@@F(0, @@D(@@N(@@R(0))), @@F(@cNat, @@S(@var_1, @@D(@@N(@@S(@var_2, @@R(min(@var_1, @swap_zero(@var_0, @var_2))))))), @@X))))), @@X))), @@X)
    {
      if (uint_address(arg0) == 0x55a6cf918b40) // F1
      {
        if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
        {
          const data_expression& var_0 = down_cast<data_expression>(arg1[1]); // S2
          if (uint_address(arg2) == 0x55a6cf918b40) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a570); // R1 0
          }
          else
          {
            if (uint_address((is_function_symbol(arg2) ? arg2 : arg2[0])) == 0x55a6cf916aa0) // F1
            {
              const data_expression& var_1 = down_cast<data_expression>(arg2[1]); // S2
              const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
              return rewr_499_2(rewr_20_1(var_1,  this_rewriter), rewr_513_2(rewr_20_1(var_0,  this_rewriter), var_2,  this_rewriter),  this_rewriter); // R1 min(@var_1, @swap_zero(@var_0, @var_2))
            }
            else
            {
            }
          }
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@F(@cNat, @@S(@var_0, @@D(@@N(@@F(0, @@D(@@N(@@S(@var_1, @@N(@@F(@cNat, @@S(@var_2, @@R(min(@swap_zero(@var_0, @var_1), @var_2))), @@F(0, @@R(0), @@X)))))), @@X)))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        if (uint_address(arg1) == 0x55a6cf918b40) // F1
        {
          const data_expression& var_1 = arg2; // S1a
          if (uint_address((is_function_symbol(arg3) ? arg3 : arg3[0])) == 0x55a6cf916aa0) // F1
          {
            const data_expression& var_2 = down_cast<data_expression>(arg3[1]); // S2
            return rewr_499_2(rewr_513_2(rewr_20_1(var_0,  this_rewriter), var_1,  this_rewriter), rewr_20_1(var_2,  this_rewriter),  this_rewriter); // R1 min(@swap_zero(@var_0, @var_1), @var_2)
          }
          else
          {
            if (uint_address(arg3) == 0x55a6cf918b40) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6a570); // R1 0
            }
            else
            {
            }
          }
        }
        else
        {
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985900))), arg0, arg1, arg2, arg3);
  }

  static inline data_expression rewr_515_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_515_4(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), term_not_in_normal_form(t[3], this_rewriter), this_rewriter); }

  static inline data_expression rewr_515_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_515_4(t[0], t[1], t[2], t[3], this_rewriter); }


  // [499] min: Nat # Nat -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_499_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_499_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_499_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [515] @swap_zero_min: Nat # Nat # Nat # Nat -> Nat
  static inline const data_expression& rewr_515_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa1870);
  }

  static inline data_expression rewr_515_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_515_0(this_rewriter); }

  static inline data_expression rewr_515_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_515_0(this_rewriter); }


  // [514] @swap_zero_add: Nat # Nat # Nat # Nat -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_514_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(@cNat, @@S(@var_0, @@D(@@N(@@F(@cNat, @@S(@var_1, @@D(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@swap_zero(@var_0 + @var_1, @swap_zero(@var_0, @var_2) + @swap_zero(@var_1, @var_3))))))))), @@X)))), @@F(0, @@D(@@N(@@F(0, @@D(@@N(@@S(@var_0, @@N(@@S(@var_1, @@R(@var_0 + @var_1)))))), @@X))), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
        {
          const data_expression& var_1 = down_cast<data_expression>(arg1[1]); // S2
          const DATA_EXPR2& var_2 = arg_not_nf2; // S1b
          const DATA_EXPR3& var_3 = arg_not_nf3; // S1b
          return rewr_513_2(rewr_504_2(rewr_20_1(var_0,  this_rewriter), delayed_rewr_20_1<data_expression>(var_1,  this_rewriter),  this_rewriter), delayed_rewr_504_2<delayed_rewr_513_2<delayed_rewr_20_1<data_expression>, DATA_EXPR2>, delayed_rewr_513_2<delayed_rewr_20_1<data_expression>, DATA_EXPR3>>(delayed_rewr_513_2<delayed_rewr_20_1<data_expression>, DATA_EXPR2>(delayed_rewr_20_1<data_expression>(var_0,  this_rewriter), var_2,  this_rewriter), delayed_rewr_513_2<delayed_rewr_20_1<data_expression>, DATA_EXPR3>(delayed_rewr_20_1<data_expression>(var_1,  this_rewriter), var_3,  this_rewriter),  this_rewriter),  this_rewriter); // R1 @swap_zero(@var_0 + @var_1, @swap_zero(@var_0, @var_2) + @swap_zero(@var_1, @var_3))
        }
        else
        {
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf918b40) // F1
        {
          if (uint_address(arg1) == 0x55a6cf918b40) // F1
          {
            const DATA_EXPR2& var_0 = arg_not_nf2; // S1b
            const DATA_EXPR3& var_1 = arg_not_nf3; // S1b
            return rewr_504_2(local_rewrite(var_0, this_rewriter), var_1,  this_rewriter); // R1 @var_0 + @var_1
          }
          else
          {
          }
        }
        else
        {
        }
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@F(0, @@D(@@N(@@F(@cNat, @@S(@var_0, @@D(@@N(@@F(0, @@D(@@N(@@S(@var_1, @@R(@var_1)))), @@F(@cNat, @@S(@var_1, @@D(@@N(@@S(@var_2, @@R(@swap_zero(@var_0, @var_1 + @swap_zero(@var_0, @var_2))))))), @@X))))), @@X))), @@X)
    {
      if (uint_address(arg0) == 0x55a6cf918b40) // F1
      {
        if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
        {
          const data_expression& var_0 = down_cast<data_expression>(arg1[1]); // S2
          if (uint_address(arg2) == 0x55a6cf918b40) // F1
          {
            const DATA_EXPR3& var_1 = arg_not_nf3; // S1b
            return local_rewrite(var_1, this_rewriter); // R1 @var_1
          }
          else
          {
            if (uint_address((is_function_symbol(arg2) ? arg2 : arg2[0])) == 0x55a6cf916aa0) // F1
            {
              const data_expression& var_1 = down_cast<data_expression>(arg2[1]); // S2
              const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
              return rewr_513_2(rewr_20_1(var_0,  this_rewriter), delayed_rewr_504_2<delayed_rewr_20_1<data_expression>, delayed_rewr_513_2<delayed_rewr_20_1<data_expression>, DATA_EXPR3>>(delayed_rewr_20_1<data_expression>(var_1,  this_rewriter), delayed_rewr_513_2<delayed_rewr_20_1<data_expression>, DATA_EXPR3>(delayed_rewr_20_1<data_expression>(var_0,  this_rewriter), var_2,  this_rewriter),  this_rewriter),  this_rewriter); // R1 @swap_zero(@var_0, @var_1 + @swap_zero(@var_0, @var_2))
            }
            else
            {
            }
          }
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@F(@cNat, @@S(@var_0, @@D(@@N(@@F(0, @@D(@@N(@@S(@var_1, @@N(@@F(@cNat, @@S(@var_2, @@R(@swap_zero(@var_0, @swap_zero(@var_0, @var_1) + @var_2))), @@F(0, @@R(@var_1), @@X)))))), @@X)))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        if (uint_address(arg1) == 0x55a6cf918b40) // F1
        {
          const data_expression& var_1 = arg2; // S1a
          if (uint_address((is_function_symbol(arg3) ? arg3 : arg3[0])) == 0x55a6cf916aa0) // F1
          {
            const data_expression& var_2 = down_cast<data_expression>(arg3[1]); // S2
            return rewr_513_2(rewr_20_1(var_0,  this_rewriter), delayed_rewr_504_2<delayed_rewr_513_2<delayed_rewr_20_1<data_expression>, data_expression>, delayed_rewr_20_1<data_expression>>(delayed_rewr_513_2<delayed_rewr_20_1<data_expression>, data_expression>(delayed_rewr_20_1<data_expression>(var_0,  this_rewriter), var_1,  this_rewriter), delayed_rewr_20_1<data_expression>(var_2,  this_rewriter),  this_rewriter),  this_rewriter); // R1 @swap_zero(@var_0, @swap_zero(@var_0, @var_1) + @var_2)
          }
          else
          {
            if (uint_address(arg3) == 0x55a6cf918b40) // F1
            {
              return var_1; // R1 @var_1
            }
            else
            {
            }
          }
        }
        else
        {
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9858d0))), arg0, arg1, arg2, arg3);
  }

  static inline data_expression rewr_514_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_514_4(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), term_not_in_normal_form(t[3], this_rewriter), this_rewriter); }

  static inline data_expression rewr_514_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_514_4(t[0], t[1], t[2], t[3], this_rewriter); }


  // [514] @swap_zero_add: Nat # Nat # Nat # Nat -> Nat
  static inline const data_expression& rewr_514_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6b0c0);
  }

  static inline data_expression rewr_514_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_514_0(this_rewriter); }

  static inline data_expression rewr_514_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_514_0(this_rewriter); }


  // [513] @swap_zero: Nat # Nat -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_513_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(0, @@D(@@N(@@S(@var_0, @@R(@var_0)))), @@X)
    {
      if (uint_address(arg0) == 0x55a6cf918b40) // F1
      {
        const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
        return local_rewrite(var_0, this_rewriter); // R1 @var_0
      }
      else
      {
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(@cNat, @@S(@var_1, @@D(@@N(@@F(0, @@R(@var_0), @@F(@cNat, @@S(@var_2, @@C(@var_1 != @var_2, @@R(@var_2), @@M(@var_1, @@R(0), @@D(@@X)))), @@X))))), @@N(@@F(0, @@R(@var_0), @@X))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        if (uint_address(arg1) == 0x55a6cf918b40) // F1
        {
          return var_0; // R1 @var_0
        }
        else
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
          {
            const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
            if (rewr_201_2(var_1, var_2,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_20_1(var_2,  this_rewriter); // R1 @var_2
            }
            else
            {
              if (var_1 == arg1[1]) // M
              {
                return *reinterpret_cast<const data_expression*>(0x55a6cfa6a570); // R1 0
              }
              else
              {
              }
            }
          }
          else
          {
          }
        }
      }
      else
      {
        if (uint_address(arg1) == 0x55a6cf918b40) // F1
        {
          return var_0; // R1 @var_0
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9858a0))), arg0, arg1);
  }

  static inline data_expression rewr_513_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_513_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_513_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_513_2(t[0], t[1], this_rewriter); }


  // [513] @swap_zero: Nat # Nat -> Nat
  static inline const data_expression& rewr_513_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa0d10);
  }

  static inline data_expression rewr_513_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_513_0(this_rewriter); }

  static inline data_expression rewr_513_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_513_0(this_rewriter); }


  // [512] @monus: Nat # Nat -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_512_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(0, @@D(@@N(@@S(@var_0, @@R(0)))), @@X)
    {
      if (uint_address(arg0) == 0x55a6cf918b40) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a570); // R1 0
      }
      else
      {
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(@cNat, @@S(@var_1, @@D(@@N(@@F(0, @@R(@var_0), @@F(@cNat, @@S(@var_2, @@R(@gtesubtb(false, @var_1, @var_2))), @@X))))), @@N(@@F(0, @@R(@var_0), @@X))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        if (uint_address(arg1) == 0x55a6cf918b40) // F1
        {
          return var_0; // R1 @var_0
        }
        else
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
          {
            const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
            return rewr_505_3(*reinterpret_cast<const data_expression*>(0x55a6cfa6a690), var_1, var_2,  this_rewriter); // R1 @gtesubtb(false, @var_1, @var_2)
          }
          else
          {
          }
        }
      }
      else
      {
        if (uint_address(arg1) == 0x55a6cf918b40) // F1
        {
          return var_0; // R1 @var_0
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985870))), arg0, arg1);
  }

  static inline data_expression rewr_512_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_512_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_512_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_512_2(t[0], t[1], this_rewriter); }


  // [512] @monus: Nat # Nat -> Nat
  static inline const data_expression& rewr_512_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa48ef0);
  }

  static inline data_expression rewr_512_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_512_0(this_rewriter); }

  static inline data_expression rewr_512_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_512_0(this_rewriter); }


  // [511] @even: Nat -> Bool
  template < class DATA_EXPR0>
  static inline data_expression rewr_511_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@cNat, @@F(@cDub, @@S(@var_0, @@N(@@R(!@var_0))), @@F(1, @@R(false), @@D(@@X))), @@F(0, @@R(true), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        if (is_application_no_check(down_cast<data_expression>(arg0[1])) && uint_address(down_cast<data_expression>(arg0[1])[0]) == 0x55a6cf918420) // F2b @cDub
        {
          const data_expression& t1 = down_cast<data_expression>(arg0[1]);
          const data_expression& var_0 = down_cast<data_expression>(t1[1]); // S2
          return rewr_121_1(var_0,  this_rewriter); // R1 !@var_0
        }
        else
        {
          if (uint_address(arg0[1]) == 0x55a6cf918300) // F2a @c1
          {
            const data_expression& t1 = down_cast<data_expression>(arg0[1]);
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
          }
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf918b40) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985840))), arg0);
  }

  static inline data_expression rewr_511_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_511_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_511_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_511_1(t[0], this_rewriter); }


  // [511] @even: Nat -> Bool
  static inline const data_expression& rewr_511_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6b1d0);
  }

  static inline data_expression rewr_511_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_511_0(this_rewriter); }

  static inline data_expression rewr_511_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_511_0(this_rewriter); }


  // [510] exp: Nat # Nat -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_510_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@cNat, @@S(@var_0, @@D(@@N(@@S(@var_1, @@R(exp(@var_0, @var_1)))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
        return rewr_20_1(rewr_509_2(var_0, local_rewrite(var_1, this_rewriter),  this_rewriter),  this_rewriter); // R1 exp(@var_0, @var_1)
      }
      else
      {
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(0, @@D(@@N(@@F(0, @@R(1), @@F(@cNat, @@R(0), @@X)))), @@N(@@F(0, @@R(1), @@X)))
    {
      if (uint_address(arg0) == 0x55a6cf918b40) // F1
      {
        if (uint_address(arg1) == 0x55a6cf918b40) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfaa1960); // R1 1
        }
        else
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a570); // R1 0
          }
          else
          {
          }
        }
      }
      else
      {
        if (uint_address(arg1) == 0x55a6cf918b40) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfaa1960); // R1 1
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985810))), arg0, arg1);
  }

  static inline data_expression rewr_510_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_510_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_510_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_510_2(t[0], t[1], this_rewriter); }


  // [510] exp: Nat # Nat -> Nat
  static inline const data_expression& rewr_510_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa479e0);
  }

  static inline data_expression rewr_510_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_510_0(this_rewriter); }

  static inline data_expression rewr_510_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_510_0(this_rewriter); }


  // [509] exp: Pos # Nat -> Pos
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_509_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@F(0, @@R(1), @@F(@cNat, @@F(1, @@R(@var_0), @@D(@@X)), @@X))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      if (uint_address(arg1) == 0x55a6cf918b40) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6ce80); // R1 1
      }
      else
      {
        if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
        {
          if (uint_address(arg1[1]) == 0x55a6cf918300) // F2a @c1
          {
            const data_expression& t1 = down_cast<data_expression>(arg1[1]);
            return local_rewrite(var_0, this_rewriter); // R1 @var_0
          }
          else
          {
          }
        }
        else
        {
        }
      }
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@S(@var_0, @@N(@@F(@cNat, @@F(@cDub, @@F(false, @@D(@@N(@@S(@var_1, @@R(exp(@var_0 * @var_0, @var_1))))), @@F(true, @@D(@@N(@@S(@var_1, @@R(@var_0 * exp(@var_0 * @var_0, @var_1))))), @@D(@@D(@@X)))), @@D(@@X)), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
      {
        if (is_application_no_check(down_cast<data_expression>(arg1[1])) && uint_address(down_cast<data_expression>(arg1[1])[0]) == 0x55a6cf918420) // F2b @cDub
        {
          const data_expression& t1 = down_cast<data_expression>(arg1[1]);
          if (uint_address(t1[1]) == 0x55a6cf9183f0) // F2a false
          {
            const data_expression& t2 = down_cast<data_expression>(t1[1]);
            const data_expression& var_1 = down_cast<data_expression>(t1[2]); // S2
            return rewr_509_2(delayed_rewr_529_2<data_expression, data_expression>(var_0, var_0,  this_rewriter), rewr_20_1(var_1,  this_rewriter),  this_rewriter); // R1 exp(@var_0 * @var_0, @var_1)
          }
          else
          {
            if (uint_address(t1[1]) == 0x55a6cf916890) // F2a true
            {
              const data_expression& t2 = down_cast<data_expression>(t1[1]);
              const data_expression& var_1 = down_cast<data_expression>(t1[2]); // S2
              return rewr_529_2(var_0, delayed_rewr_509_2<delayed_rewr_529_2<data_expression, data_expression>, delayed_rewr_20_1<data_expression>>(delayed_rewr_529_2<data_expression, data_expression>(var_0, var_0,  this_rewriter), delayed_rewr_20_1<data_expression>(var_1,  this_rewriter),  this_rewriter),  this_rewriter); // R1 @var_0 * exp(@var_0 * @var_0, @var_1)
            }
            else
            {
            }
          }
        }
        else
        {
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9857e0))), arg0, arg1);
  }

  static inline data_expression rewr_509_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_509_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_509_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_509_2(t[0], t[1], this_rewriter); }


  // [509] exp: Pos # Nat -> Pos
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_509_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_509_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_509_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [509] exp: Pos # Nat -> Pos
  static inline const data_expression& rewr_509_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa49710);
  }

  static inline data_expression rewr_509_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_509_0(this_rewriter); }

  static inline data_expression rewr_509_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_509_0(this_rewriter); }


  // [508] mod: Nat # Pos -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_508_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@cNat, @@S(@var_0, @@D(@@N(@@S(@var_1, @@R(@var_0 mod @var_1))))), @@F(0, @@D(@@N(@@S(@var_0, @@R(0)))), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
        return rewr_520_1(rewr_521_2(var_0, local_rewrite(var_1, this_rewriter),  this_rewriter),  this_rewriter); // R1 @var_0 mod @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf918b40) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a570); // R1 0
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9857b0))), arg0, local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_508_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_508_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_508_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_508_2(t[0], t[1], this_rewriter); }


  // [508] mod: Nat # Pos -> Nat
  static inline const data_expression& rewr_508_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6a5a0);
  }

  static inline data_expression rewr_508_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_508_0(this_rewriter); }

  static inline data_expression rewr_508_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_508_0(this_rewriter); }


  // [507] div: Nat # Pos -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_507_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@cNat, @@S(@var_0, @@D(@@N(@@S(@var_1, @@R(@var_0 div @var_1))))), @@F(0, @@D(@@N(@@S(@var_0, @@R(0)))), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
        return rewr_519_1(rewr_521_2(var_0, local_rewrite(var_1, this_rewriter),  this_rewriter),  this_rewriter); // R1 @var_0 div @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf918b40) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a570); // R1 0
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985780))), arg0, local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_507_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_507_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_507_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_507_2(t[0], t[1], this_rewriter); }


  // [507] div: Nat # Pos -> Nat
  static inline const data_expression& rewr_507_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfacd970);
  }

  static inline data_expression rewr_507_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_507_0(this_rewriter); }

  static inline data_expression rewr_507_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_507_0(this_rewriter); }


  // [506] *: Nat # Nat -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_506_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(0, @@D(@@N(@@S(@var_0, @@R(0)))), @@X)
    {
      if (uint_address(arg0) == 0x55a6cf918b40) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a570); // R1 0
      }
      else
      {
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(@cNat, @@S(@var_1, @@D(@@N(@@F(0, @@R(0), @@F(@cNat, @@S(@var_2, @@R(@var_1 * @var_2)), @@X))))), @@N(@@F(0, @@R(0), @@X)))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        if (uint_address(arg1) == 0x55a6cf918b40) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a570); // R1 0
        }
        else
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
          {
            const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
            return rewr_20_1(rewr_529_2(var_1, var_2,  this_rewriter),  this_rewriter); // R1 @var_1 * @var_2
          }
          else
          {
          }
        }
      }
      else
      {
        if (uint_address(arg1) == 0x55a6cf918b40) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a570); // R1 0
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985750))), arg0, arg1);
  }

  static inline data_expression rewr_506_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_506_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_506_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_506_2(t[0], t[1], this_rewriter); }


  // [506] *: Nat # Nat -> Nat
  static inline const data_expression& rewr_506_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa47f80);
  }

  static inline data_expression rewr_506_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_506_0(this_rewriter); }

  static inline data_expression rewr_506_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_506_0(this_rewriter); }


  // [505] @gtesubtb: Bool # Pos # Pos -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_505_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(true, @@D(@@N(@@S(@var_0, @@N(@@F(1, @@R(pred(Nat2Pos(pred(@var_0)))), @@X))))), @@F(false, @@D(@@N(@@S(@var_0, @@N(@@F(1, @@R(pred(@var_0)), @@X))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf916890) // F1
      {
        const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
        if (uint_address(arg2) == 0x55a6cf918300) // F1
        {
          return rewr_116_1(rewr_495_1(rewr_116_1(local_rewrite(var_0, this_rewriter),  this_rewriter),  this_rewriter),  this_rewriter); // R1 pred(Nat2Pos(pred(@var_0)))
        }
        else
        {
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf9183f0) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          if (uint_address(arg2) == 0x55a6cf918300) // F1
          {
            return rewr_116_1(local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 pred(@var_0)
          }
          else
          {
          }
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@F(@cDub, @@S(@var_1, @@F(false, @@D(@@N(@@S(@var_2, @@D(@@N(@@F(@cDub, @@M(@var_1, @@F(true, @@D(@@N(@@S(@var_3, @@R(@dub(!@var_0, @gtesubtb(true, @var_2, @var_3)))))), @@N(@@S(@var_3, @@R(@dub(@var_0, @gtesubtb(@var_0, @var_2, @var_3)))))), @@F(true, @@D(@@N(@@S(@var_3, @@R(@dub(!@var_0, @gtesubtb(true, @var_2, @var_3)))))), @@D(@@X))), @@X)))))), @@F(true, @@D(@@N(@@S(@var_2, @@D(@@N(@@F(@cDub, @@M(@var_1, @@F(false, @@D(@@N(@@S(@var_3, @@R(@dub(!@var_0, @gtesubtb(false, @var_2, @var_3)))))), @@N(@@S(@var_3, @@R(@dub(@var_0, @gtesubtb(@var_0, @var_2, @var_3)))))), @@F(false, @@D(@@N(@@S(@var_3, @@R(@dub(!@var_0, @gtesubtb(false, @var_2, @var_3)))))), @@D(@@X))), @@X)))))), @@N(@@S(@var_2, @@D(@@N(@@F(@cDub, @@M(@var_1, @@N(@@S(@var_3, @@R(@dub(@var_0, @gtesubtb(@var_0, @var_2, @var_3))))), @@D(@@X)), @@X)))))))), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf918420) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg1[1]); // S2
        if (uint_address(arg1[1]) == 0x55a6cf9183f0) // F2a false
        {
          const data_expression& t1 = down_cast<data_expression>(arg1[1]);
          const data_expression& var_2 = down_cast<data_expression>(arg1[2]); // S2
          if (uint_address((is_function_symbol(arg2) ? arg2 : arg2[0])) == 0x55a6cf918420) // F1
          {
            if (var_1 == arg2[1]) // M
            {
              if (uint_address(arg2[1]) == 0x55a6cf916890) // F2a true
              {
                const data_expression& t3 = down_cast<data_expression>(arg2[1]);
                const data_expression& var_3 = down_cast<data_expression>(arg2[2]); // S2
                return rewr_500_2(delayed_rewr_121_1<data_expression>(var_0,  this_rewriter), rewr_505_3(*reinterpret_cast<const data_expression*>(0x55a6cfa6d030), var_2, var_3,  this_rewriter),  this_rewriter); // R1 @dub(!@var_0, @gtesubtb(true, @var_2, @var_3))
              }
              else
              {
                const data_expression& var_3 = down_cast<data_expression>(arg2[2]); // S2
                return rewr_500_2(var_0, rewr_505_3(var_0, var_2, var_3,  this_rewriter),  this_rewriter); // R1 @dub(@var_0, @gtesubtb(@var_0, @var_2, @var_3))
              }
            }
            else
            {
              if (uint_address(arg2[1]) == 0x55a6cf916890) // F2a true
              {
                const data_expression& t3 = down_cast<data_expression>(arg2[1]);
                const data_expression& var_3 = down_cast<data_expression>(arg2[2]); // S2
                return rewr_500_2(delayed_rewr_121_1<data_expression>(var_0,  this_rewriter), rewr_505_3(*reinterpret_cast<const data_expression*>(0x55a6cfa6d030), var_2, var_3,  this_rewriter),  this_rewriter); // R1 @dub(!@var_0, @gtesubtb(true, @var_2, @var_3))
              }
              else
              {
              }
            }
          }
          else
          {
          }
        }
        else
        {
          if (uint_address(arg1[1]) == 0x55a6cf916890) // F2a true
          {
            const data_expression& t1 = down_cast<data_expression>(arg1[1]);
            const data_expression& var_2 = down_cast<data_expression>(arg1[2]); // S2
            if (uint_address((is_function_symbol(arg2) ? arg2 : arg2[0])) == 0x55a6cf918420) // F1
            {
              if (var_1 == arg2[1]) // M
              {
                if (uint_address(arg2[1]) == 0x55a6cf9183f0) // F2a false
                {
                  const data_expression& t3 = down_cast<data_expression>(arg2[1]);
                  const data_expression& var_3 = down_cast<data_expression>(arg2[2]); // S2
                  return rewr_500_2(delayed_rewr_121_1<data_expression>(var_0,  this_rewriter), rewr_505_3(*reinterpret_cast<const data_expression*>(0x55a6cfa6a690), var_2, var_3,  this_rewriter),  this_rewriter); // R1 @dub(!@var_0, @gtesubtb(false, @var_2, @var_3))
                }
                else
                {
                  const data_expression& var_3 = down_cast<data_expression>(arg2[2]); // S2
                  return rewr_500_2(var_0, rewr_505_3(var_0, var_2, var_3,  this_rewriter),  this_rewriter); // R1 @dub(@var_0, @gtesubtb(@var_0, @var_2, @var_3))
                }
              }
              else
              {
                if (uint_address(arg2[1]) == 0x55a6cf9183f0) // F2a false
                {
                  const data_expression& t3 = down_cast<data_expression>(arg2[1]);
                  const data_expression& var_3 = down_cast<data_expression>(arg2[2]); // S2
                  return rewr_500_2(delayed_rewr_121_1<data_expression>(var_0,  this_rewriter), rewr_505_3(*reinterpret_cast<const data_expression*>(0x55a6cfa6a690), var_2, var_3,  this_rewriter),  this_rewriter); // R1 @dub(!@var_0, @gtesubtb(false, @var_2, @var_3))
                }
                else
                {
                }
              }
            }
            else
            {
            }
          }
          else
          {
            const data_expression& var_2 = down_cast<data_expression>(arg1[2]); // S2
            if (uint_address((is_function_symbol(arg2) ? arg2 : arg2[0])) == 0x55a6cf918420) // F1
            {
              if (var_1 == arg2[1]) // M
              {
                const data_expression& var_3 = down_cast<data_expression>(arg2[2]); // S2
                return rewr_500_2(var_0, rewr_505_3(var_0, var_2, var_3,  this_rewriter),  this_rewriter); // R1 @dub(@var_0, @gtesubtb(@var_0, @var_2, @var_3))
              }
              else
              {
              }
            }
            else
            {
            }
          }
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985720))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_505_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_505_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_505_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_505_3(t[0], t[1], t[2], this_rewriter); }


  // [121] !: Bool -> Bool
  template < class DATA_EXPR0>
  class delayed_rewr_121_1
  {
    protected:
      const DATA_EXPR0& m_t0;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_121_1(const DATA_EXPR0& t0, RewriterCompilingJitty* tr)
        : m_t0(t0), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_121_1(m_t0, this_rewriter);
      }
  };
  
  // [505] @gtesubtb: Bool # Pos # Pos -> Nat
  static inline const data_expression& rewr_505_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa48780);
  }

  static inline data_expression rewr_505_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_505_0(this_rewriter); }

  static inline data_expression rewr_505_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_505_0(this_rewriter); }


  // [504] +: Nat # Nat -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_504_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(0, @@D(@@N(@@S(@var_0, @@R(@var_0)))), @@X)
    {
      if (uint_address(arg0) == 0x55a6cf918b40) // F1
      {
        const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
        return local_rewrite(var_0, this_rewriter); // R1 @var_0
      }
      else
      {
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(@cNat, @@S(@var_1, @@D(@@N(@@F(0, @@R(@var_0), @@F(@cNat, @@S(@var_2, @@R(@var_1 + @var_2)), @@X))))), @@N(@@F(0, @@R(@var_0), @@X))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        if (uint_address(arg1) == 0x55a6cf918b40) // F1
        {
          return var_0; // R1 @var_0
        }
        else
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
          {
            const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
            return rewr_20_1(rewr_528_3(*reinterpret_cast<const data_expression*>(0x55a6cfa6a690), var_1, var_2,  this_rewriter),  this_rewriter); // R1 @var_1 + @var_2
          }
          else
          {
          }
        }
      }
      else
      {
        if (uint_address(arg1) == 0x55a6cf918b40) // F1
        {
          return var_0; // R1 @var_0
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9856f0))), arg0, arg1);
  }

  static inline data_expression rewr_504_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_504_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_504_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_504_2(t[0], t[1], this_rewriter); }


  // [504] +: Nat # Nat -> Nat
  static inline const data_expression& rewr_504_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa18d0);
  }

  static inline data_expression rewr_504_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_504_0(this_rewriter); }

  static inline data_expression rewr_504_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_504_0(this_rewriter); }


  // [503] +: Nat # Pos -> Pos
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_503_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@cNat, @@S(@var_0, @@D(@@N(@@S(@var_1, @@R(@var_0 + @var_1))))), @@F(0, @@D(@@N(@@S(@var_0, @@R(@var_0)))), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
        return rewr_528_3(*reinterpret_cast<const data_expression*>(0x55a6cfa6a690), var_0, var_1,  this_rewriter); // R1 @var_0 + @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf918b40) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9856c0))), arg0, local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_503_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_503_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_503_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_503_2(t[0], t[1], this_rewriter); }


  // [503] +: Nat # Pos -> Pos
  static inline const data_expression& rewr_503_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfacf300);
  }

  static inline data_expression rewr_503_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_503_0(this_rewriter); }

  static inline data_expression rewr_503_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_503_0(this_rewriter); }


  // [502] +: Pos # Nat -> Pos
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_502_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@F(0, @@R(@var_0), @@F(@cNat, @@S(@var_1, @@R(@var_0 + @var_1)), @@X))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      if (uint_address(arg1) == 0x55a6cf918b40) // F1
      {
        return local_rewrite(var_0, this_rewriter); // R1 @var_0
      }
      else
      {
        if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
        {
          const data_expression& var_1 = down_cast<data_expression>(arg1[1]); // S2
          return rewr_528_3(*reinterpret_cast<const data_expression*>(0x55a6cfa6a690), local_rewrite(var_0, this_rewriter), var_1,  this_rewriter); // R1 @var_0 + @var_1
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985690))), local_rewrite(arg_not_nf0,this_rewriter), arg1);
  }

  static inline data_expression rewr_502_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_502_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_502_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_502_2(t[0], t[1], this_rewriter); }


  // [502] +: Pos # Nat -> Pos
  static inline const data_expression& rewr_502_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfacda00);
  }

  static inline data_expression rewr_502_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_502_0(this_rewriter); }

  static inline data_expression rewr_502_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_502_0(this_rewriter); }


  // [501] @dubsucc: Nat -> Pos
  template < class DATA_EXPR0>
  static inline data_expression rewr_501_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@cNat, @@S(@var_0, @@R(2 * @var_0 + 1)), @@F(0, @@R(1), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        return rewr_91_2(*reinterpret_cast<const data_expression*>(0x55a6cfa6d030), var_0,  this_rewriter); // R1 2 * @var_0 + 1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf918b40) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6ce80); // R1 1
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985660))), arg0);
  }

  static inline data_expression rewr_501_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_501_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_501_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_501_1(t[0], this_rewriter); }


  // [501] @dubsucc: Nat -> Pos
  static inline const data_expression& rewr_501_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa1a50);
  }

  static inline data_expression rewr_501_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_501_0(this_rewriter); }

  static inline data_expression rewr_501_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_501_0(this_rewriter); }


  // [500] @dub: Bool # Nat -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_500_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@F(@cNat, @@S(@var_1, @@R(2 * @var_1 + if(@var_0, 1, 0))), @@X)))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg1[1]); // S2
        return rewr_20_1(rewr_91_2(local_rewrite(var_0, this_rewriter), var_1,  this_rewriter),  this_rewriter); // R1 2 * @var_1 + if(@var_0, 1, 0)
      }
      else
      {
      }
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(true, @@D(@@N(@@F(0, @@R(1), @@X))), @@F(false, @@D(@@N(@@F(0, @@R(0), @@X))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf916890) // F1
      {
        if (uint_address(arg1) == 0x55a6cf918b40) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfaa1960); // R1 1
        }
        else
        {
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf9183f0) // F1
        {
          if (uint_address(arg1) == 0x55a6cf918b40) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a570); // R1 0
          }
          else
          {
          }
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985630))), arg0, arg1);
  }

  static inline data_expression rewr_500_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_500_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_500_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_500_2(t[0], t[1], this_rewriter); }


  // [500] @dub: Bool # Nat -> Nat
  static inline const data_expression& rewr_500_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfacd9d0);
  }

  static inline data_expression rewr_500_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_500_0(this_rewriter); }

  static inline data_expression rewr_500_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_500_0(this_rewriter); }


  // [499] min: Nat # Nat -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_499_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@R(if(@var_0 <= @var_1, @var_0, @var_1)))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      return rewr_526_3(rewr_52_2(var_0, var_1,  this_rewriter), var_0, var_1,  this_rewriter); // R1 if(@var_0 <= @var_1, @var_0, @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985600))), arg0, arg1);
  }

  static inline data_expression rewr_499_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_499_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_499_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_499_2(t[0], t[1], this_rewriter); }


  // [499] min: Nat # Nat -> Nat
  static inline const data_expression& rewr_499_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa9fba0);
  }

  static inline data_expression rewr_499_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_499_0(this_rewriter); }

  static inline data_expression rewr_499_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_499_0(this_rewriter); }


  // [498] max: Nat # Nat -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_498_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@S(@var_1, @@R(if(@var_0 <= @var_1, @var_1, @var_0)))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      return rewr_526_3(rewr_52_2(var_0, var_1,  this_rewriter), var_1, var_0,  this_rewriter); // R1 if(@var_0 <= @var_1, @var_1, @var_0)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9855d0))), arg0, arg1);
  }

  static inline data_expression rewr_498_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_498_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_498_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_498_2(t[0], t[1], this_rewriter); }


  // [498] max: Nat # Nat -> Nat
  static inline const data_expression& rewr_498_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa47a10);
  }

  static inline data_expression rewr_498_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_498_0(this_rewriter); }

  static inline data_expression rewr_498_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_498_0(this_rewriter); }


  // [497] max: Nat # Pos -> Pos
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_497_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(0, @@D(@@N(@@S(@var_0, @@R(@var_0)))), @@X)
    {
      if (uint_address(arg0) == 0x55a6cf918b40) // F1
      {
        const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
        return local_rewrite(var_0, this_rewriter); // R1 @var_0
      }
      else
      {
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(@cNat, @@S(@var_0, @@D(@@N(@@S(@var_1, @@R(if(@var_0 <= @var_1, @var_1, @var_0)))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = arg1; // S1a
        return rewr_525_3(rewr_524_2(var_0, var_1,  this_rewriter), var_1, var_0,  this_rewriter); // R1 if(@var_0 <= @var_1, @var_1, @var_0)
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9855a0))), arg0, arg1);
  }

  static inline data_expression rewr_497_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_497_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_497_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_497_2(t[0], t[1], this_rewriter); }


  // [497] max: Nat # Pos -> Pos
  static inline const data_expression& rewr_497_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa18a0);
  }

  static inline data_expression rewr_497_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_497_0(this_rewriter); }

  static inline data_expression rewr_497_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_497_0(this_rewriter); }


  // [496] max: Pos # Nat -> Pos
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_496_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@F(0, @@R(@var_0), @@X)))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      if (uint_address(arg1) == 0x55a6cf918b40) // F1
      {
        return local_rewrite(var_0, this_rewriter); // R1 @var_0
      }
      else
      {
      }
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@S(@var_0, @@N(@@F(@cNat, @@S(@var_1, @@R(if(@var_0 <= @var_1, @var_1, @var_0))), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg1[1]); // S2
        return rewr_525_3(rewr_524_2(var_0, var_1,  this_rewriter), var_1, var_0,  this_rewriter); // R1 if(@var_0 <= @var_1, @var_1, @var_0)
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985570))), arg0, arg1);
  }

  static inline data_expression rewr_496_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_496_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_496_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_496_2(t[0], t[1], this_rewriter); }


  // [496] max: Pos # Nat -> Pos
  static inline const data_expression& rewr_496_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cface7a0);
  }

  static inline data_expression rewr_496_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_496_0(this_rewriter); }

  static inline data_expression rewr_496_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_496_0(this_rewriter); }


  // [495] Nat2Pos: Nat -> Pos
  template < class DATA_EXPR0>
  static inline data_expression rewr_495_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@cNat, @@S(@var_0, @@R(@var_0)), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        return var_0; // R1 @var_0
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985540))), arg0);
  }

  static inline data_expression rewr_495_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_495_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_495_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_495_1(t[0], this_rewriter); }


  // [495] Nat2Pos: Nat -> Pos
  static inline const data_expression& rewr_495_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfacda30);
  }

  static inline data_expression rewr_495_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_495_0(this_rewriter); }

  static inline data_expression rewr_495_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_495_0(this_rewriter); }


  // [494] Pos2Nat: Pos -> Nat
  template < class DATA_EXPR0>
  static inline data_expression rewr_494_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@R(@var_0))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      return rewr_20_1(local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985510))), local_rewrite(arg_not_nf0,this_rewriter));
  }

  static inline data_expression rewr_494_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_494_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_494_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_494_1(t[0], this_rewriter); }


  // [494] Pos2Nat: Pos -> Nat
  static inline const data_expression& rewr_494_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cface830);
  }

  static inline data_expression rewr_494_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_494_0(this_rewriter); }

  static inline data_expression rewr_494_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_494_0(this_rewriter); }


  // [165] <: Nat # Nat -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_165_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@N(@@F(0, @@R(false), @@X))
    {
      if (uint_address(arg1) == 0x55a6cf918b40) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@S(@var_0, @@F(@cNat, @@S(@var_1, @@D(@@N(@@M(@var_0, @@R(false), @@F(@cNat, @@S(@var_2, @@R(@var_1 < @var_2)), @@X))))), @@F(0, @@D(@@N(@@M(@var_0, @@R(false), @@F(@cNat, @@R(true), @@X)))), @@N(@@M(@var_0, @@R(false), @@X)))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
        }
        else
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
          {
            const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
            return rewr_200_2(var_1, var_2,  this_rewriter); // R1 @var_1 < @var_2
          }
          else
          {
          }
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf918b40) // F1
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
            }
          }
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91c320))), arg0, arg1);
  }

  static inline data_expression rewr_165_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_165_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_165_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_165_2(t[0], t[1], this_rewriter); }


  // [165] <: Nat # Nat -> Bool
  static inline const data_expression& rewr_165_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cface770);
  }

  static inline data_expression rewr_165_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_165_0(this_rewriter); }

  static inline data_expression rewr_165_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_165_0(this_rewriter); }


  // [116] pred: Pos -> Nat
  template < class DATA_EXPR0>
  static inline data_expression rewr_116_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@cDub, @@S(@var_0, @@N(@@S(@var_1, @@R(if(@var_0, 2 * @var_1, @dubsucc(pred(@var_1))))))), @@F(1, @@R(0), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf918420) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        return rewr_20_1(rewr_525_3(var_0, delayed_rewr_91_2<data_expression, data_expression>(*reinterpret_cast<const data_expression*>(0x55a6cfa6a690), var_1,  this_rewriter), delayed_rewr_501_1<delayed_rewr_116_1<data_expression>>(delayed_rewr_116_1<data_expression>(var_1,  this_rewriter),  this_rewriter),  this_rewriter),  this_rewriter); // R1 if(@var_0, 2 * @var_1, @dubsucc(pred(@var_1)))
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf918300) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a570); // R1 0
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf919f50))), arg0);
  }

  static inline data_expression rewr_116_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_116_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_116_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_116_1(t[0], this_rewriter); }


  // [501] @dubsucc: Nat -> Pos
  template < class DATA_EXPR0>
  class delayed_rewr_501_1
  {
    protected:
      const DATA_EXPR0& m_t0;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_501_1(const DATA_EXPR0& t0, RewriterCompilingJitty* tr)
        : m_t0(t0), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_501_1(m_t0, this_rewriter);
      }
  };
  
  // [116] pred: Pos -> Nat
  template < class DATA_EXPR0>
  class delayed_rewr_116_1
  {
    protected:
      const DATA_EXPR0& m_t0;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_116_1(const DATA_EXPR0& t0, RewriterCompilingJitty* tr)
        : m_t0(t0), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_116_1(m_t0, this_rewriter);
      }
  };
  
  // [116] pred: Pos -> Nat
  static inline const data_expression& rewr_116_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa487b0);
  }

  static inline data_expression rewr_116_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_116_0(this_rewriter); }

  static inline data_expression rewr_116_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_116_0(this_rewriter); }


  // [115] succ: Nat -> Pos
  template < class DATA_EXPR0>
  static inline data_expression rewr_115_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@cNat, @@S(@var_0, @@R(succ(@var_0))), @@F(0, @@R(1), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        return rewr_527_1(var_0,  this_rewriter); // R1 succ(@var_0)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf918b40) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6ce80); // R1 1
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf919d10))), arg0);
  }

  static inline data_expression rewr_115_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_115_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_115_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_115_1(t[0], this_rewriter); }


  // [115] succ: Nat -> Pos
  static inline const data_expression& rewr_115_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cface8f0);
  }

  static inline data_expression rewr_115_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_115_0(this_rewriter); }

  static inline data_expression rewr_115_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_115_0(this_rewriter); }


  // [66] !=: Nat # Nat -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_66_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_65_2(local_rewrite(var_0, this_rewriter), local_rewrite(var_1, this_rewriter),  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf917be0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_66_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_66_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_66_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_66_2(t[0], t[1], this_rewriter); }


  // [66] !=: Nat # Nat -> Bool
  static inline const data_expression& rewr_66_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa47920);
  }

  static inline data_expression rewr_66_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_66_0(this_rewriter); }

  static inline data_expression rewr_66_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_66_0(this_rewriter); }


  // [65] ==: Nat # Nat -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_65_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(@cNat, @@S(@var_1, @@D(@@N(@@M(@var_0, @@R(true), @@F(@cNat, @@S(@var_2, @@R(@var_1 == @var_2)), @@F(0, @@R(false), @@X)))))), @@F(0, @@D(@@N(@@M(@var_0, @@R(true), @@F(@cNat, @@R(false), @@X)))), @@N(@@M(@var_0, @@R(true), @@X)))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
          {
            const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
            return rewr_431_2(var_1, var_2,  this_rewriter); // R1 @var_1 == @var_2
          }
          else
          {
            if (uint_address(arg1) == 0x55a6cf918b40) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
            }
            else
            {
            }
          }
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf918b40) // F1
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
            }
            else
            {
            }
          }
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf917b50))), arg0, arg1);
  }

  static inline data_expression rewr_65_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_65_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_65_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_65_2(t[0], t[1], this_rewriter); }


  // [65] ==: Nat # Nat -> Bool
  static inline const data_expression& rewr_65_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cface860);
  }

  static inline data_expression rewr_65_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_65_0(this_rewriter); }

  static inline data_expression rewr_65_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_65_0(this_rewriter); }


  // [52] <=: Nat # Nat -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_52_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(0, @@D(@@N(@@S(@var_0, @@R(true)))), @@X)
    {
      if (uint_address(arg0) == 0x55a6cf918b40) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(@cNat, @@S(@var_1, @@D(@@N(@@M(@var_0, @@R(true), @@F(@cNat, @@S(@var_2, @@R(@var_1 <= @var_2)), @@F(0, @@R(false), @@X)))))), @@N(@@M(@var_0, @@R(true), @@X))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf916aa0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
          {
            const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
            return rewr_524_2(var_1, var_2,  this_rewriter); // R1 @var_1 <= @var_2
          }
          else
          {
            if (uint_address(arg1) == 0x55a6cf918b40) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
            }
            else
            {
            }
          }
        }
      }
      else
      {
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf917460))), arg0, arg1);
  }

  static inline data_expression rewr_52_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_52_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_52_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_52_2(t[0], t[1], this_rewriter); }


  // [52] <=: Nat # Nat -> Bool
  static inline const data_expression& rewr_52_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa48840);
  }

  static inline data_expression rewr_52_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_52_0(this_rewriter); }

  static inline data_expression rewr_52_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_52_0(this_rewriter); }


  // [492] >: Bool # Bool -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_492_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_487_2(local_rewrite(var_1, this_rewriter), var_0,  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9852a0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_492_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_492_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_492_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_492_2(t[0], t[1], this_rewriter); }


  // [492] >: Bool # Bool -> Bool
  static inline const data_expression& rewr_492_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfacda60);
  }

  static inline data_expression rewr_492_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_492_0(this_rewriter); }

  static inline data_expression rewr_492_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_492_0(this_rewriter); }


  // [491] >=: Bool # Bool -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_491_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_488_2(local_rewrite(var_1, this_rewriter), var_0,  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985270))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_491_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_491_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_491_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_491_2(t[0], t[1], this_rewriter); }


  // [491] >=: Bool # Bool -> Bool
  static inline const data_expression& rewr_491_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa47100);
  }

  static inline data_expression rewr_491_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_491_0(this_rewriter); }

  static inline data_expression rewr_491_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_491_0(this_rewriter); }


  // [490] if: Bool # Bool # Bool -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_490_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985240))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_490_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_490_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_490_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_490_3(t[0], t[1], t[2], this_rewriter); }


  // [490] if: Bool # Bool # Bool -> Bool
  static inline const data_expression& rewr_490_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa1900);
  }

  static inline data_expression rewr_490_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_490_0(this_rewriter); }

  static inline data_expression rewr_490_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_490_0(this_rewriter); }


  // [489] !=: Bool # Bool -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_489_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_271_2(local_rewrite(var_0, this_rewriter), var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985210))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_489_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_489_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_489_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_489_2(t[0], t[1], this_rewriter); }


  // [489] !=: Bool # Bool -> Bool
  static inline const data_expression& rewr_489_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfacf330);
  }

  static inline data_expression rewr_489_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_489_0(this_rewriter); }

  static inline data_expression rewr_489_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_489_0(this_rewriter); }


  // [488] <=: Bool # Bool -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_488_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(true, @@D(@@N(@@S(@var_0, @@R(@var_0)))), @@F(false, @@D(@@N(@@S(@var_0, @@R(true)))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf916890) // F1
      {
        const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
        return local_rewrite(var_0, this_rewriter); // R1 @var_0
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf9183f0) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@F(false, @@R(!@var_0), @@F(true, @@R(true), @@X)))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
        if (uint_address(arg1) == 0x55a6cf9183f0) // F1
        {
          return rewr_121_1(var_0,  this_rewriter); // R1 !@var_0
        }
        else
        {
          if (uint_address(arg1) == 0x55a6cf916890) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985120))), arg0, arg1);
  }

  static inline data_expression rewr_488_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_488_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_488_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_488_2(t[0], t[1], this_rewriter); }


  // [488] <=: Bool # Bool -> Bool
  static inline const data_expression& rewr_488_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa47220);
  }

  static inline data_expression rewr_488_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_488_0(this_rewriter); }

  static inline data_expression rewr_488_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_488_0(this_rewriter); }


  // [487] <: Bool # Bool -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_487_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(true, @@D(@@N(@@S(@var_0, @@R(false)))), @@F(false, @@D(@@N(@@S(@var_0, @@R(@var_0)))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf916890) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf9183f0) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@F(false, @@R(false), @@F(true, @@R(!@var_0), @@X)))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (uint_address(arg1) == 0x55a6cf9183f0) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
        }
        else
        {
          if (uint_address(arg1) == 0x55a6cf916890) // F1
          {
            return rewr_121_1(var_0,  this_rewriter); // R1 !@var_0
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf985030))), arg0, arg1);
  }

  static inline data_expression rewr_487_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_487_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_487_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_487_2(t[0], t[1], this_rewriter); }


  // [487] <: Bool # Bool -> Bool
  static inline const data_expression& rewr_487_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa48010);
  }

  static inline data_expression rewr_487_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_487_0(this_rewriter); }

  static inline data_expression rewr_487_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_487_0(this_rewriter); }


  // [271] ==: Bool # Bool -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_271_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@S(@var_0, @@R(!@var_0)))), @@F(true, @@D(@@N(@@S(@var_0, @@R(@var_0)))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
        return rewr_121_1(local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 !@var_0
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@F(true, @@R(@var_0), @@F(false, @@R(!@var_0), @@X)))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
        if (uint_address(arg1) == 0x55a6cf916890) // F1
        {
          return var_0; // R1 @var_0
        }
        else
        {
          if (uint_address(arg1) == 0x55a6cf9183f0) // F1
          {
            return rewr_121_1(var_0,  this_rewriter); // R1 !@var_0
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf920a00))), arg0, arg1);
  }

  static inline data_expression rewr_271_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_271_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_271_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_271_2(t[0], t[1], this_rewriter); }


  // [271] ==: Bool # Bool -> Bool
  static inline const data_expression& rewr_271_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa47280);
  }

  static inline data_expression rewr_271_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_271_0(this_rewriter); }

  static inline data_expression rewr_271_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_271_0(this_rewriter); }


  // [121] !: Bool -> Bool
  template < class DATA_EXPR0>
  static inline data_expression rewr_121_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(!, @@S(@var_0, @@R(@var_0)), @@F(true, @@R(false), @@F(false, @@R(true), @@X)))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91a1f0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        return var_0; // R1 @var_0
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
        }
        else
        {
          if (uint_address(arg0) == 0x55a6cf9183f0) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91a1f0))), arg0);
  }

  static inline data_expression rewr_121_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_121_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_121_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_121_1(t[0], this_rewriter); }


  // [121] !: Bool -> Bool
  static inline const data_expression& rewr_121_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa47950);
  }

  static inline data_expression rewr_121_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_121_0(this_rewriter); }

  static inline data_expression rewr_121_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_121_0(this_rewriter); }


  // [93] ||: Bool # Bool -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_93_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@S(@var_0, @@R(@var_0)))), @@F(true, @@D(@@N(@@S(@var_0, @@R(true)))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
        return local_rewrite(var_0, this_rewriter); // R1 @var_0
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@F(true, @@R(true), @@F(false, @@R(@var_0), @@X))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address(arg1) == 0x55a6cf916890) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
        if (uint_address(arg1) == 0x55a6cf9183f0) // F1
        {
          return var_0; // R1 @var_0
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf918960))), arg0, arg1);
  }

  static inline data_expression rewr_93_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_93_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_93_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_93_2(t[0], t[1], this_rewriter); }


  // [93] ||: Bool # Bool -> Bool
  static inline const data_expression& rewr_93_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa47250);
  }

  static inline data_expression rewr_93_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_93_0(this_rewriter); }

  static inline data_expression rewr_93_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_93_0(this_rewriter); }


  // [49] &&: Bool # Bool -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_49_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@S(@var_0, @@R(false)))), @@F(true, @@D(@@N(@@S(@var_0, @@R(@var_0)))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@F(true, @@R(@var_0), @@F(false, @@R(false), @@X))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address(arg1) == 0x55a6cf916890) // F1
      {
        return var_0; // R1 @var_0
      }
      else
      {
        if (uint_address(arg1) == 0x55a6cf9183f0) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf917310))), arg0, arg1);
  }

  static inline data_expression rewr_49_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_49_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_49_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_49_2(t[0], t[1], this_rewriter); }


  // [49] &&: Bool # Bool -> Bool
  static inline const data_expression& rewr_49_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa19f0);
  }

  static inline data_expression rewr_49_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_49_0(this_rewriter); }

  static inline data_expression rewr_49_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_49_0(this_rewriter); }


  // [48] =>: Bool # Bool -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_48_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@S(@var_0, @@R(true)))), @@F(true, @@D(@@N(@@S(@var_0, @@R(@var_0)))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@F(true, @@R(true), @@F(false, @@R(!@var_0), @@X))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address(arg1) == 0x55a6cf916890) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
        if (uint_address(arg1) == 0x55a6cf9183f0) // F1
        {
          return rewr_121_1(var_0,  this_rewriter); // R1 !@var_0
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9172b0))), arg0, arg1);
  }

  static inline data_expression rewr_48_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_48_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_48_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_48_2(t[0], t[1], this_rewriter); }


  // [48] =>: Bool # Bool -> Bool
  static inline const data_expression& rewr_48_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa1930);
  }

  static inline data_expression rewr_48_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_48_0(this_rewriter); }

  static inline data_expression rewr_48_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_48_0(this_rewriter); }


  // [485] >: ((Place -> List(Nat)) # Trans_name -> MarkingTrans) # ((Place -> List(Nat)) # Trans_name -> MarkingTrans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_485_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_482_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf984940))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_485_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_485_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_485_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_485_2(t[0], t[1], this_rewriter); }


  // [485] >: ((Place -> List(Nat)) # Trans_name -> MarkingTrans) # ((Place -> List(Nat)) # Trans_name -> MarkingTrans) -> Bool
  static inline const data_expression& rewr_485_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cface800);
  }

  static inline data_expression rewr_485_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_485_0(this_rewriter); }

  static inline data_expression rewr_485_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_485_0(this_rewriter); }


  // [484] >=: ((Place -> List(Nat)) # Trans_name -> MarkingTrans) # ((Place -> List(Nat)) # Trans_name -> MarkingTrans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_484_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_483_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf984910))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_484_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_484_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_484_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_484_2(t[0], t[1], this_rewriter); }


  // [484] >=: ((Place -> List(Nat)) # Trans_name -> MarkingTrans) # ((Place -> List(Nat)) # Trans_name -> MarkingTrans) -> Bool
  static inline const data_expression& rewr_484_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa0cb0);
  }

  static inline data_expression rewr_484_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_484_0(this_rewriter); }

  static inline data_expression rewr_484_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_484_0(this_rewriter); }


  // [483] <=: ((Place -> List(Nat)) # Trans_name -> MarkingTrans) # ((Place -> List(Nat)) # Trans_name -> MarkingTrans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_483_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9848e0))), arg0, arg1);
  }

  static inline data_expression rewr_483_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_483_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_483_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_483_2(t[0], t[1], this_rewriter); }


  // [483] <=: ((Place -> List(Nat)) # Trans_name -> MarkingTrans) # ((Place -> List(Nat)) # Trans_name -> MarkingTrans) -> Bool
  static inline const data_expression& rewr_483_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cface7d0);
  }

  static inline data_expression rewr_483_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_483_0(this_rewriter); }

  static inline data_expression rewr_483_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_483_0(this_rewriter); }


  // [482] <: ((Place -> List(Nat)) # Trans_name -> MarkingTrans) # ((Place -> List(Nat)) # Trans_name -> MarkingTrans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_482_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9848b0))), arg0, arg1);
  }

  static inline data_expression rewr_482_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_482_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_482_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_482_2(t[0], t[1], this_rewriter); }


  // [482] <: ((Place -> List(Nat)) # Trans_name -> MarkingTrans) # ((Place -> List(Nat)) # Trans_name -> MarkingTrans) -> Bool
  static inline const data_expression& rewr_482_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa469c0);
  }

  static inline data_expression rewr_482_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_482_0(this_rewriter); }

  static inline data_expression rewr_482_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_482_0(this_rewriter); }


  // [481] if: Bool # ((Place -> List(Nat)) # Trans_name -> MarkingTrans) # ((Place -> List(Nat)) # Trans_name -> MarkingTrans) -> (Place -> List(Nat)) # Trans_name -> MarkingTrans
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_481_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_0(@var_2, @var_3)))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf984880))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_481_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_481_5(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_481_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_481_5(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], this_rewriter); }


  // [481] if: Bool # ((Place -> List(Nat)) # Trans_name -> MarkingTrans) # ((Place -> List(Nat)) # Trans_name -> MarkingTrans) -> (Place -> List(Nat)) # Trans_name -> MarkingTrans
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_481_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf984880))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_481_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_481_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_481_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_481_3(t[0], t[1], t[2], this_rewriter); }


  // [481] if: Bool # ((Place -> List(Nat)) # Trans_name -> MarkingTrans) # ((Place -> List(Nat)) # Trans_name -> MarkingTrans) -> (Place -> List(Nat)) # Trans_name -> MarkingTrans
  static inline const data_expression& rewr_481_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa46b70);
  }

  static inline data_expression rewr_481_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_481_0(this_rewriter); }

  static inline data_expression rewr_481_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_481_0(this_rewriter); }


  // [480] !=: ((Place -> List(Nat)) # Trans_name -> MarkingTrans) # ((Place -> List(Nat)) # Trans_name -> MarkingTrans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_480_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_479_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf984850))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_480_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_480_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_480_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_480_2(t[0], t[1], this_rewriter); }


  // [480] !=: ((Place -> List(Nat)) # Trans_name -> MarkingTrans) # ((Place -> List(Nat)) # Trans_name -> MarkingTrans) -> Bool
  static inline const data_expression& rewr_480_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa45b40);
  }

  static inline data_expression rewr_480_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_480_0(this_rewriter); }

  static inline data_expression rewr_480_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_480_0(this_rewriter); }


  // [479] ==: ((Place -> List(Nat)) # Trans_name -> MarkingTrans) # ((Place -> List(Nat)) # Trans_name -> MarkingTrans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_479_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: Place -> List(Nat), x3: Trans_name. @var_0(x1, x3) == @var_1(x1, x3)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(3), rewr_486_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(5)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(6))), this_rewriter), rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(5)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(6))), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: Place -> List(Nat), x3: Trans_name. @var_0(x1, x3) == @var_1(x1, x3)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf984820))), arg0, arg1);
  }

  static inline data_expression rewr_479_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_479_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_479_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_479_2(t[0], t[1], this_rewriter); }


  // [479] ==: ((Place -> List(Nat)) # Trans_name -> MarkingTrans) # ((Place -> List(Nat)) # Trans_name -> MarkingTrans) -> Bool
  static inline const data_expression& rewr_479_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa46ab0);
  }

  static inline data_expression rewr_479_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_479_0(this_rewriter); }

  static inline data_expression rewr_479_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_479_0(this_rewriter); }


  // [478] >: (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) # (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_478_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_475_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf984460))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_478_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_478_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_478_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_478_2(t[0], t[1], this_rewriter); }


  // [478] >: (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) # (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) -> Bool
  static inline const data_expression& rewr_478_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa471f0);
  }

  static inline data_expression rewr_478_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_478_0(this_rewriter); }

  static inline data_expression rewr_478_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_478_0(this_rewriter); }


  // [477] >=: (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) # (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_477_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_476_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf984430))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_477_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_477_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_477_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_477_2(t[0], t[1], this_rewriter); }


  // [477] >=: (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) # (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) -> Bool
  static inline const data_expression& rewr_477_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa463f0);
  }

  static inline data_expression rewr_477_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_477_0(this_rewriter); }

  static inline data_expression rewr_477_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_477_0(this_rewriter); }


  // [476] <=: (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) # (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_476_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf984400))), arg0, arg1);
  }

  static inline data_expression rewr_476_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_476_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_476_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_476_2(t[0], t[1], this_rewriter); }


  // [476] <=: (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) # (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) -> Bool
  static inline const data_expression& rewr_476_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa46450);
  }

  static inline data_expression rewr_476_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_476_0(this_rewriter); }

  static inline data_expression rewr_476_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_476_0(this_rewriter); }


  // [475] <: (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) # (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_475_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9843d0))), arg0, arg1);
  }

  static inline data_expression rewr_475_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_475_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_475_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_475_2(t[0], t[1], this_rewriter); }


  // [475] <: (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) # (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) -> Bool
  static inline const data_expression& rewr_475_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa46ae0);
  }

  static inline data_expression rewr_475_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_475_0(this_rewriter); }

  static inline data_expression rewr_475_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_475_0(this_rewriter); }


  // [474] if: Bool # (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) # (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) -> HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_474_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_0(@var_2, @var_3)))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9843a0))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_474_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_474_5(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_474_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_474_5(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], this_rewriter); }


  // [474] if: Bool # (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) # (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) -> HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_474_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9843a0))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_474_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_474_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_474_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_474_3(t[0], t[1], t[2], this_rewriter); }


  // [474] if: Bool # (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) # (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) -> HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)
  static inline const data_expression& rewr_474_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa46b40);
  }

  static inline data_expression rewr_474_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_474_0(this_rewriter); }

  static inline data_expression rewr_474_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_474_0(this_rewriter); }


  // [473] !=: (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) # (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_473_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_472_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf984370))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_473_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_473_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_473_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_473_2(t[0], t[1], this_rewriter); }


  // [473] !=: (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) # (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) -> Bool
  static inline const data_expression& rewr_473_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6edf0);
  }

  static inline data_expression rewr_473_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_473_0(this_rewriter); }

  static inline data_expression rewr_473_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_473_0(this_rewriter); }


  // [472] ==: (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) # (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_472_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: HistoryLogEntry, x3: List(HistoryLogEntry). @var_0(x1, x3) == @var_1(x1, x3)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(4), rewr_130_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(7)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(8))), this_rewriter), rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(7)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(8))), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: HistoryLogEntry, x3: List(HistoryLogEntry). @var_0(x1, x3) == @var_1(x1, x3)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf984340))), arg0, arg1);
  }

  static inline data_expression rewr_472_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_472_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_472_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_472_2(t[0], t[1], this_rewriter); }


  // [472] ==: (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) # (HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)) -> Bool
  static inline const data_expression& rewr_472_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa44cc0);
  }

  static inline data_expression rewr_472_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_472_0(this_rewriter); }

  static inline data_expression rewr_472_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_472_0(this_rewriter); }


  // [471] >: (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) # (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_471_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_468_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983f50))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_471_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_471_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_471_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_471_2(t[0], t[1], this_rewriter); }


  // [471] >: (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) # (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) -> Bool
  static inline const data_expression& rewr_471_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa45460);
  }

  static inline data_expression rewr_471_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_471_0(this_rewriter); }

  static inline data_expression rewr_471_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_471_0(this_rewriter); }


  // [470] >=: (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) # (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_470_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_469_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983f20))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_470_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_470_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_470_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_470_2(t[0], t[1], this_rewriter); }


  // [470] >=: (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) # (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) -> Bool
  static inline const data_expression& rewr_470_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6a360);
  }

  static inline data_expression rewr_470_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_470_0(this_rewriter); }

  static inline data_expression rewr_470_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_470_0(this_rewriter); }


  // [469] <=: (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) # (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_469_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983ef0))), arg0, arg1);
  }

  static inline data_expression rewr_469_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_469_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_469_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_469_2(t[0], t[1], this_rewriter); }


  // [469] <=: (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) # (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) -> Bool
  static inline const data_expression& rewr_469_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa45430);
  }

  static inline data_expression rewr_469_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_469_0(this_rewriter); }

  static inline data_expression rewr_469_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_469_0(this_rewriter); }


  // [468] <: (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) # (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_468_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983ec0))), arg0, arg1);
  }

  static inline data_expression rewr_468_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_468_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_468_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_468_2(t[0], t[1], this_rewriter); }


  // [468] <: (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) # (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) -> Bool
  static inline const data_expression& rewr_468_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa45520);
  }

  static inline data_expression rewr_468_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_468_0(this_rewriter); }

  static inline data_expression rewr_468_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_468_0(this_rewriter); }


  // [467] if: Bool # (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) # (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) -> Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_467_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_0(@var_2, @var_3)))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983e90))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_467_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_467_5(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_467_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_467_5(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], this_rewriter); }


  // [467] if: Bool # (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) # (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) -> Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_467_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983e90))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_467_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_467_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_467_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_467_3(t[0], t[1], t[2], this_rewriter); }


  // [467] if: Bool # (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) # (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) -> Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry
  static inline const data_expression& rewr_467_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfacf3e0);
  }

  static inline data_expression rewr_467_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_467_0(this_rewriter); }

  static inline data_expression rewr_467_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_467_0(this_rewriter); }


  // [466] !=: (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) # (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_466_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_465_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983e60))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_466_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_466_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_466_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_466_2(t[0], t[1], this_rewriter); }


  // [466] !=: (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) # (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) -> Bool
  static inline const data_expression& rewr_466_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa45c90);
  }

  static inline data_expression rewr_466_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_466_0(this_rewriter); }

  static inline data_expression rewr_466_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_466_0(this_rewriter); }


  // [465] ==: (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) # (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_465_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: Maybe_trans_name, x3: Place -> List(Nat). @var_0(x1, x3) == @var_1(x1, x3)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(5), rewr_131_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(9)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(10))), this_rewriter), rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(9)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(10))), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: Maybe_trans_name, x3: Place -> List(Nat). @var_0(x1, x3) == @var_1(x1, x3)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983e30))), arg0, arg1);
  }

  static inline data_expression rewr_465_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_465_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_465_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_465_2(t[0], t[1], this_rewriter); }


  // [465] ==: (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) # (Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry) -> Bool
  static inline const data_expression& rewr_465_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa45c60);
  }

  static inline data_expression rewr_465_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_465_0(this_rewriter); }

  static inline data_expression rewr_465_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_465_0(this_rewriter); }


  // [464] >: (Trans_name -> Maybe_trans_name) # (Trans_name -> Maybe_trans_name) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_464_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_461_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983b30))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_464_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_464_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_464_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_464_2(t[0], t[1], this_rewriter); }


  // [464] >: (Trans_name -> Maybe_trans_name) # (Trans_name -> Maybe_trans_name) -> Bool
  static inline const data_expression& rewr_464_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfacd5c0);
  }

  static inline data_expression rewr_464_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_464_0(this_rewriter); }

  static inline data_expression rewr_464_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_464_0(this_rewriter); }


  // [463] >=: (Trans_name -> Maybe_trans_name) # (Trans_name -> Maybe_trans_name) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_463_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_462_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983b00))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_463_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_463_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_463_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_463_2(t[0], t[1], this_rewriter); }


  // [463] >=: (Trans_name -> Maybe_trans_name) # (Trans_name -> Maybe_trans_name) -> Bool
  static inline const data_expression& rewr_463_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cface5c0);
  }

  static inline data_expression rewr_463_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_463_0(this_rewriter); }

  static inline data_expression rewr_463_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_463_0(this_rewriter); }


  // [462] <=: (Trans_name -> Maybe_trans_name) # (Trans_name -> Maybe_trans_name) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_462_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983ad0))), arg0, arg1);
  }

  static inline data_expression rewr_462_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_462_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_462_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_462_2(t[0], t[1], this_rewriter); }


  // [462] <=: (Trans_name -> Maybe_trans_name) # (Trans_name -> Maybe_trans_name) -> Bool
  static inline const data_expression& rewr_462_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa44e70);
  }

  static inline data_expression rewr_462_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_462_0(this_rewriter); }

  static inline data_expression rewr_462_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_462_0(this_rewriter); }


  // [461] <: (Trans_name -> Maybe_trans_name) # (Trans_name -> Maybe_trans_name) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_461_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983aa0))), arg0, arg1);
  }

  static inline data_expression rewr_461_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_461_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_461_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_461_2(t[0], t[1], this_rewriter); }


  // [461] <: (Trans_name -> Maybe_trans_name) # (Trans_name -> Maybe_trans_name) -> Bool
  static inline const data_expression& rewr_461_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa44e40);
  }

  static inline data_expression rewr_461_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_461_0(this_rewriter); }

  static inline data_expression rewr_461_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_461_0(this_rewriter); }


  // [460] if: Bool # (Trans_name -> Maybe_trans_name) # (Trans_name -> Maybe_trans_name) -> Trans_name -> Maybe_trans_name
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_460_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@R(@var_0(@var_2)))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_0(@var_2)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983a70))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter));
  }

  static inline data_expression rewr_460_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_460_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_460_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_460_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [460] if: Bool # (Trans_name -> Maybe_trans_name) # (Trans_name -> Maybe_trans_name) -> Trans_name -> Maybe_trans_name
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_460_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983a70))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_460_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_460_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_460_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_460_3(t[0], t[1], t[2], this_rewriter); }


  // [460] if: Bool # (Trans_name -> Maybe_trans_name) # (Trans_name -> Maybe_trans_name) -> Trans_name -> Maybe_trans_name
  static inline const data_expression& rewr_460_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfacd650);
  }

  static inline data_expression rewr_460_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_460_0(this_rewriter); }

  static inline data_expression rewr_460_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_460_0(this_rewriter); }


  // [459] !=: (Trans_name -> Maybe_trans_name) # (Trans_name -> Maybe_trans_name) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_459_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_458_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983a40))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_459_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_459_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_459_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_459_2(t[0], t[1], this_rewriter); }


  // [459] !=: (Trans_name -> Maybe_trans_name) # (Trans_name -> Maybe_trans_name) -> Bool
  static inline const data_expression& rewr_459_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cface710);
  }

  static inline data_expression rewr_459_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_459_0(this_rewriter); }

  static inline data_expression rewr_459_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_459_0(this_rewriter); }


  // [458] ==: (Trans_name -> Maybe_trans_name) # (Trans_name -> Maybe_trans_name) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_458_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: Trans_name. @var_0(x1) == @var_1(x1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(6), rewr_455_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(11))), this_rewriter), rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(11))), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: Trans_name. @var_0(x1) == @var_1(x1)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983a10))), arg0, arg1);
  }

  static inline data_expression rewr_458_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_458_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_458_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_458_2(t[0], t[1], this_rewriter); }


  // [458] ==: (Trans_name -> Maybe_trans_name) # (Trans_name -> Maybe_trans_name) -> Bool
  static inline const data_expression& rewr_458_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa44610);
  }

  static inline data_expression rewr_458_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_458_0(this_rewriter); }

  static inline data_expression rewr_458_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_458_0(this_rewriter); }


  // [454] @if_always_else: Bool # (Trans_name -> Maybe_trans_name) # (Trans_name -> Maybe_trans_name) -> Trans_name -> Maybe_trans_name
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_454_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return rewrite_aux(application(if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter)), local_rewrite(arg_not_nf3,this_rewriter)),true,this_rewriter);  }

  static inline data_expression rewr_454_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_454_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_454_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_454_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [454] @if_always_else: Bool # (Trans_name -> Maybe_trans_name) # (Trans_name -> Maybe_trans_name) -> Trans_name -> Maybe_trans_name
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_454_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter));  }

  static inline data_expression rewr_454_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_454_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_454_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_454_3(t[0], t[1], t[2], this_rewriter); }


  // [454] @if_always_else: Bool # (Trans_name -> Maybe_trans_name) # (Trans_name -> Maybe_trans_name) -> Trans_name -> Maybe_trans_name
  static inline const data_expression& rewr_454_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa44680);
  }

  static inline data_expression rewr_454_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_454_0(this_rewriter); }

  static inline data_expression rewr_454_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_454_0(this_rewriter); }


  // [453] @is_not_an_update: (Trans_name -> Maybe_trans_name) -> Bool
  template < class DATA_EXPR0>
  static inline data_expression rewr_453_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @is_not_an_update by calling a user defined rewrite function.
    return is_not_a_function_update_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter));  }

  static inline data_expression rewr_453_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_453_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_453_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_453_1(t[0], this_rewriter); }


  // [453] @is_not_an_update: (Trans_name -> Maybe_trans_name) -> Bool
  static inline const data_expression& rewr_453_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa445e0);
  }

  static inline data_expression rewr_453_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_453_0(this_rewriter); }

  static inline data_expression rewr_453_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_453_0(this_rewriter); }


  // [452] @func_update_stable: (Trans_name -> Maybe_trans_name) # Trans_name # Maybe_trans_name -> Trans_name -> Maybe_trans_name
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_452_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const data_expression& var_1 = arg1; // S1a
      const DATA_EXPR2& var_2 = arg_not_nf2; // S1b
      const data_expression& var_3 = arg3; // S1a
      if (rewr_457_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return local_rewrite(var_2, this_rewriter); // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983740))), local_rewrite(arg_not_nf0,this_rewriter), arg1, local_rewrite(arg_not_nf2,this_rewriter)), arg3);
  }

  static inline data_expression rewr_452_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_452_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_452_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_452_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [452] @func_update_stable: (Trans_name -> Maybe_trans_name) # Trans_name # Maybe_trans_name -> Trans_name -> Maybe_trans_name
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_452_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983740))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter), local_rewrite(arg_not_nf2,this_rewriter));
  }

  static inline data_expression rewr_452_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_452_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_452_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_452_3(t[0], t[1], t[2], this_rewriter); }


  // [452] @func_update_stable: (Trans_name -> Maybe_trans_name) # Trans_name # Maybe_trans_name -> Trans_name -> Maybe_trans_name
  static inline const data_expression& rewr_452_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa45580);
  }

  static inline data_expression rewr_452_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_452_0(this_rewriter); }

  static inline data_expression rewr_452_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_452_0(this_rewriter); }


  // [451] @func_update: (Trans_name -> Maybe_trans_name) # Trans_name # Maybe_trans_name -> Trans_name -> Maybe_trans_name
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_451_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)), @@X))))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf983740) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_5 = arg_not_nf3; // S1b
        if (rewr_456_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_452_4(delayed_rewr_451_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2, local_rewrite(var_5, this_rewriter),  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@N(@@S(@var_6, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)))))), @@N(@@S(@var_5, @@N(@@S(@var_6, @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)), @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)), @@X))))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf983740) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          return rewr_454_4(rewr_455_2(rewrite_with_arguments_in_normal_form(application(var_1, var_2), this_rewriter), var_5,  this_rewriter), var_1, rewr_452_3(var_1, var_2, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          if (rewr_456_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_454_4(rewr_455_2(rewrite_with_arguments_in_normal_form(application(var_1, var_4), this_rewriter), var_5,  this_rewriter), rewr_452_3(var_1, var_2, var_3,  this_rewriter), rewr_452_3(delayed_rewr_452_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)
          }
          else
          {
            if (rewr_453_1(var_0,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_454_4(rewr_455_2(rewrite_with_arguments_in_normal_form(application(var_0, var_4), this_rewriter), var_5,  this_rewriter), var_0, rewr_452_3(var_0, var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        const DATA_EXPR3& var_3 = arg_not_nf3; // S1b
        if (rewr_453_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_454_4(rewr_455_2(rewrite_with_arguments_in_normal_form(application(var_0, var_1), this_rewriter), var_2,  this_rewriter), var_0, rewr_452_3(var_0, var_1, var_2,  this_rewriter), local_rewrite(var_3, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)
        }
        else
        {
        }
      }
    }
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      const data_expression& var_2 = arg2; // S1a
      const data_expression& var_3 = arg3; // S1a
      if (rewr_457_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(var_0, var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return var_2; // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983710))), arg0, arg1, arg2), arg3);
  }

  static inline data_expression rewr_451_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_451_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_451_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_451_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [452] @func_update_stable: (Trans_name -> Maybe_trans_name) # Trans_name # Maybe_trans_name -> Trans_name -> Maybe_trans_name
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_452_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_452_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_452_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [451] @func_update: (Trans_name -> Maybe_trans_name) # Trans_name # Maybe_trans_name -> Trans_name -> Maybe_trans_name
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_451_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_451_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_451_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [451] @func_update: (Trans_name -> Maybe_trans_name) # Trans_name # Maybe_trans_name -> Trans_name -> Maybe_trans_name
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_451_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2]), @@X))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf983740) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        if (rewr_456_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_452_3(delayed_rewr_451_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2,  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2]
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])))), @@N(@@S(@var_5, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])), @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])), @@X))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf983740) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          return rewr_454_3(rewr_455_2(rewrite_with_arguments_in_normal_form(application(var_1, var_2), this_rewriter), var_5,  this_rewriter), var_1, rewr_452_3(var_1, var_2, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          if (rewr_453_1(var_0,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_454_3(rewr_455_2(rewrite_with_arguments_in_normal_form(application(var_0, var_4), this_rewriter), var_5,  this_rewriter), var_0, rewr_452_3(var_0, var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])
          }
          else
          {
            if (rewr_456_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_454_3(rewr_455_2(rewrite_with_arguments_in_normal_form(application(var_1, var_4), this_rewriter), var_5,  this_rewriter), rewr_452_3(var_1, var_2, var_3,  this_rewriter), rewr_452_3(delayed_rewr_452_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        if (rewr_453_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_454_3(rewr_455_2(rewrite_with_arguments_in_normal_form(application(var_0, var_1), this_rewriter), var_2,  this_rewriter), var_0, rewr_452_3(var_0, var_1, var_2,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983710))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_451_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_451_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_451_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_451_3(t[0], t[1], t[2], this_rewriter); }


  // [451] @func_update: (Trans_name -> Maybe_trans_name) # Trans_name # Maybe_trans_name -> Trans_name -> Maybe_trans_name
  static inline const data_expression& rewr_451_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cface560);
  }

  static inline data_expression rewr_451_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_451_0(this_rewriter); }

  static inline data_expression rewr_451_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_451_0(this_rewriter); }


  // [450] >: (Trans -> Trans_name) # (Trans -> Trans_name) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_450_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_447_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983410))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_450_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_450_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_450_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_450_2(t[0], t[1], this_rewriter); }


  // [450] >: (Trans -> Trans_name) # (Trans -> Trans_name) -> Bool
  static inline const data_expression& rewr_450_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa43f60);
  }

  static inline data_expression rewr_450_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_450_0(this_rewriter); }

  static inline data_expression rewr_450_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_450_0(this_rewriter); }


  // [449] >=: (Trans -> Trans_name) # (Trans -> Trans_name) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_449_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_448_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9833e0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_449_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_449_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_449_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_449_2(t[0], t[1], this_rewriter); }


  // [449] >=: (Trans -> Trans_name) # (Trans -> Trans_name) -> Bool
  static inline const data_expression& rewr_449_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa9f700);
  }

  static inline data_expression rewr_449_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_449_0(this_rewriter); }

  static inline data_expression rewr_449_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_449_0(this_rewriter); }


  // [448] <=: (Trans -> Trans_name) # (Trans -> Trans_name) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_448_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9833b0))), arg0, arg1);
  }

  static inline data_expression rewr_448_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_448_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_448_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_448_2(t[0], t[1], this_rewriter); }


  // [448] <=: (Trans -> Trans_name) # (Trans -> Trans_name) -> Bool
  static inline const data_expression& rewr_448_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa43f90);
  }

  static inline data_expression rewr_448_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_448_0(this_rewriter); }

  static inline data_expression rewr_448_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_448_0(this_rewriter); }


  // [447] <: (Trans -> Trans_name) # (Trans -> Trans_name) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_447_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983380))), arg0, arg1);
  }

  static inline data_expression rewr_447_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_447_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_447_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_447_2(t[0], t[1], this_rewriter); }


  // [447] <: (Trans -> Trans_name) # (Trans -> Trans_name) -> Bool
  static inline const data_expression& rewr_447_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa44750);
  }

  static inline data_expression rewr_447_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_447_0(this_rewriter); }

  static inline data_expression rewr_447_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_447_0(this_rewriter); }


  // [446] if: Bool # (Trans -> Trans_name) # (Trans -> Trans_name) -> Trans -> Trans_name
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_446_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@R(@var_0(@var_2)))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_0(@var_2)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983350))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter));
  }

  static inline data_expression rewr_446_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_446_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_446_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_446_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [446] if: Bool # (Trans -> Trans_name) # (Trans -> Trans_name) -> Trans -> Trans_name
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_446_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983350))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_446_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_446_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_446_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_446_3(t[0], t[1], t[2], this_rewriter); }


  // [446] if: Bool # (Trans -> Trans_name) # (Trans -> Trans_name) -> Trans -> Trans_name
  static inline const data_expression& rewr_446_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa43f00);
  }

  static inline data_expression rewr_446_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_446_0(this_rewriter); }

  static inline data_expression rewr_446_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_446_0(this_rewriter); }


  // [445] !=: (Trans -> Trans_name) # (Trans -> Trans_name) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_445_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_444_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983320))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_445_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_445_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_445_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_445_2(t[0], t[1], this_rewriter); }


  // [445] !=: (Trans -> Trans_name) # (Trans -> Trans_name) -> Bool
  static inline const data_expression& rewr_445_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa44580);
  }

  static inline data_expression rewr_445_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_445_0(this_rewriter); }

  static inline data_expression rewr_445_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_445_0(this_rewriter); }


  // [444] ==: (Trans -> Trans_name) # (Trans -> Trans_name) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_444_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: Trans. @var_0(x1) == @var_1(x1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(7), rewr_443_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(12))), this_rewriter), rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(12))), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: Trans. @var_0(x1) == @var_1(x1)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9832f0))), arg0, arg1);
  }

  static inline data_expression rewr_444_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_444_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_444_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_444_2(t[0], t[1], this_rewriter); }


  // [444] ==: (Trans -> Trans_name) # (Trans -> Trans_name) -> Bool
  static inline const data_expression& rewr_444_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cface390);
  }

  static inline data_expression rewr_444_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_444_0(this_rewriter); }

  static inline data_expression rewr_444_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_444_0(this_rewriter); }


  // [442] @if_always_else: Bool # (Trans -> Trans_name) # (Trans -> Trans_name) -> Trans -> Trans_name
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_442_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return rewrite_aux(application(if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter)), local_rewrite(arg_not_nf3,this_rewriter)),true,this_rewriter);  }

  static inline data_expression rewr_442_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_442_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_442_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_442_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [442] @if_always_else: Bool # (Trans -> Trans_name) # (Trans -> Trans_name) -> Trans -> Trans_name
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_442_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter));  }

  static inline data_expression rewr_442_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_442_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_442_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_442_3(t[0], t[1], t[2], this_rewriter); }


  // [442] @if_always_else: Bool # (Trans -> Trans_name) # (Trans -> Trans_name) -> Trans -> Trans_name
  static inline const data_expression& rewr_442_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cface3c0);
  }

  static inline data_expression rewr_442_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_442_0(this_rewriter); }

  static inline data_expression rewr_442_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_442_0(this_rewriter); }


  // [441] @is_not_an_update: (Trans -> Trans_name) -> Bool
  template < class DATA_EXPR0>
  static inline data_expression rewr_441_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @is_not_an_update by calling a user defined rewrite function.
    return is_not_a_function_update_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter));  }

  static inline data_expression rewr_441_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_441_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_441_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_441_1(t[0], this_rewriter); }


  // [441] @is_not_an_update: (Trans -> Trans_name) -> Bool
  static inline const data_expression& rewr_441_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cface360);
  }

  static inline data_expression rewr_441_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_441_0(this_rewriter); }

  static inline data_expression rewr_441_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_441_0(this_rewriter); }


  // [440] @func_update_stable: (Trans -> Trans_name) # Trans # Trans_name -> Trans -> Trans_name
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_440_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const data_expression& var_1 = arg1; // S1a
      const DATA_EXPR2& var_2 = arg_not_nf2; // S1b
      const data_expression& var_3 = arg3; // S1a
      if (rewr_294_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return local_rewrite(var_2, this_rewriter); // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983170))), local_rewrite(arg_not_nf0,this_rewriter), arg1, local_rewrite(arg_not_nf2,this_rewriter)), arg3);
  }

  static inline data_expression rewr_440_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_440_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_440_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_440_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [440] @func_update_stable: (Trans -> Trans_name) # Trans # Trans_name -> Trans -> Trans_name
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_440_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983170))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter), local_rewrite(arg_not_nf2,this_rewriter));
  }

  static inline data_expression rewr_440_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_440_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_440_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_440_3(t[0], t[1], t[2], this_rewriter); }


  // [440] @func_update_stable: (Trans -> Trans_name) # Trans # Trans_name -> Trans -> Trans_name
  static inline const data_expression& rewr_440_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa0710);
  }

  static inline data_expression rewr_440_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_440_0(this_rewriter); }

  static inline data_expression rewr_440_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_440_0(this_rewriter); }


  // [439] @func_update: (Trans -> Trans_name) # Trans # Trans_name -> Trans -> Trans_name
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_439_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)), @@X))))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf983170) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_5 = arg_not_nf3; // S1b
        if (rewr_151_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_440_4(delayed_rewr_439_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2, local_rewrite(var_5, this_rewriter),  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@N(@@S(@var_6, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)))))), @@N(@@S(@var_5, @@N(@@S(@var_6, @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)), @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)), @@X))))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf983170) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          return rewr_442_4(rewr_443_2(rewrite_with_arguments_in_normal_form(application(var_1, var_2), this_rewriter), var_5,  this_rewriter), var_1, rewr_440_3(var_1, var_2, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          if (rewr_151_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_442_4(rewr_443_2(rewrite_with_arguments_in_normal_form(application(var_1, var_4), this_rewriter), var_5,  this_rewriter), rewr_440_3(var_1, var_2, var_3,  this_rewriter), rewr_440_3(delayed_rewr_440_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)
          }
          else
          {
            if (rewr_441_1(var_0,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_442_4(rewr_443_2(rewrite_with_arguments_in_normal_form(application(var_0, var_4), this_rewriter), var_5,  this_rewriter), var_0, rewr_440_3(var_0, var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        const DATA_EXPR3& var_3 = arg_not_nf3; // S1b
        if (rewr_441_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_442_4(rewr_443_2(rewrite_with_arguments_in_normal_form(application(var_0, var_1), this_rewriter), var_2,  this_rewriter), var_0, rewr_440_3(var_0, var_1, var_2,  this_rewriter), local_rewrite(var_3, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)
        }
        else
        {
        }
      }
    }
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      const data_expression& var_2 = arg2; // S1a
      const data_expression& var_3 = arg3; // S1a
      if (rewr_294_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(var_0, var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return var_2; // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983140))), arg0, arg1, arg2), arg3);
  }

  static inline data_expression rewr_439_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_439_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_439_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_439_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [440] @func_update_stable: (Trans -> Trans_name) # Trans # Trans_name -> Trans -> Trans_name
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_440_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_440_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_440_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [439] @func_update: (Trans -> Trans_name) # Trans # Trans_name -> Trans -> Trans_name
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_439_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_439_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_439_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [439] @func_update: (Trans -> Trans_name) # Trans # Trans_name -> Trans -> Trans_name
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_439_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2]), @@X))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf983170) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        if (rewr_151_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_440_3(delayed_rewr_439_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2,  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2]
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])))), @@N(@@S(@var_5, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])), @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])), @@X))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf983170) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          return rewr_442_3(rewr_443_2(rewrite_with_arguments_in_normal_form(application(var_1, var_2), this_rewriter), var_5,  this_rewriter), var_1, rewr_440_3(var_1, var_2, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          if (rewr_441_1(var_0,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_442_3(rewr_443_2(rewrite_with_arguments_in_normal_form(application(var_0, var_4), this_rewriter), var_5,  this_rewriter), var_0, rewr_440_3(var_0, var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])
          }
          else
          {
            if (rewr_151_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_442_3(rewr_443_2(rewrite_with_arguments_in_normal_form(application(var_1, var_4), this_rewriter), var_5,  this_rewriter), rewr_440_3(var_1, var_2, var_3,  this_rewriter), rewr_440_3(delayed_rewr_440_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        if (rewr_441_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_442_3(rewr_443_2(rewrite_with_arguments_in_normal_form(application(var_0, var_1), this_rewriter), var_2,  this_rewriter), var_0, rewr_440_3(var_0, var_1, var_2,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf983140))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_439_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_439_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_439_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_439_3(t[0], t[1], t[2], this_rewriter); }


  // [439] @func_update: (Trans -> Trans_name) # Trans # Trans_name -> Trans -> Trans_name
  static inline const data_expression& rewr_439_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa43790);
  }

  static inline data_expression rewr_439_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_439_0(this_rewriter); }

  static inline data_expression rewr_439_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_439_0(this_rewriter); }


  // [438] >: (Trans # Trans -> Bool) # (Trans # Trans -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_438_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_435_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982db0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_438_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_438_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_438_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_438_2(t[0], t[1], this_rewriter); }


  // [438] >: (Trans # Trans -> Bool) # (Trans # Trans -> Bool) -> Bool
  static inline const data_expression& rewr_438_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cface3f0);
  }

  static inline data_expression rewr_438_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_438_0(this_rewriter); }

  static inline data_expression rewr_438_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_438_0(this_rewriter); }


  // [437] >=: (Trans # Trans -> Bool) # (Trans # Trans -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_437_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_436_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982d80))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_437_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_437_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_437_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_437_2(t[0], t[1], this_rewriter); }


  // [437] >=: (Trans # Trans -> Bool) # (Trans # Trans -> Bool) -> Bool
  static inline const data_expression& rewr_437_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa438b0);
  }

  static inline data_expression rewr_437_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_437_0(this_rewriter); }

  static inline data_expression rewr_437_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_437_0(this_rewriter); }


  // [436] <=: (Trans # Trans -> Bool) # (Trans # Trans -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_436_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982d50))), arg0, arg1);
  }

  static inline data_expression rewr_436_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_436_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_436_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_436_2(t[0], t[1], this_rewriter); }


  // [436] <=: (Trans # Trans -> Bool) # (Trans # Trans -> Bool) -> Bool
  static inline const data_expression& rewr_436_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfacd5f0);
  }

  static inline data_expression rewr_436_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_436_0(this_rewriter); }

  static inline data_expression rewr_436_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_436_0(this_rewriter); }


  // [435] <: (Trans # Trans -> Bool) # (Trans # Trans -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_435_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982d20))), arg0, arg1);
  }

  static inline data_expression rewr_435_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_435_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_435_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_435_2(t[0], t[1], this_rewriter); }


  // [435] <: (Trans # Trans -> Bool) # (Trans # Trans -> Bool) -> Bool
  static inline const data_expression& rewr_435_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa0600);
  }

  static inline data_expression rewr_435_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_435_0(this_rewriter); }

  static inline data_expression rewr_435_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_435_0(this_rewriter); }


  // [434] if: Bool # (Trans # Trans -> Bool) # (Trans # Trans -> Bool) -> Trans # Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_434_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_0(@var_2, @var_3)))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982cf0))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_434_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_434_5(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_434_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_434_5(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], this_rewriter); }


  // [434] if: Bool # (Trans # Trans -> Bool) # (Trans # Trans -> Bool) -> Trans # Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_434_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982cf0))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_434_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_434_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_434_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_434_3(t[0], t[1], t[2], this_rewriter); }


  // [434] if: Bool # (Trans # Trans -> Bool) # (Trans # Trans -> Bool) -> Trans # Trans -> Bool
  static inline const data_expression& rewr_434_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa43ed0);
  }

  static inline data_expression rewr_434_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_434_0(this_rewriter); }

  static inline data_expression rewr_434_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_434_0(this_rewriter); }


  // [433] !=: (Trans # Trans -> Bool) # (Trans # Trans -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_433_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_432_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982cc0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_433_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_433_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_433_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_433_2(t[0], t[1], this_rewriter); }


  // [433] !=: (Trans # Trans -> Bool) # (Trans # Trans -> Bool) -> Bool
  static inline const data_expression& rewr_433_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf9c9120);
  }

  static inline data_expression rewr_433_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_433_0(this_rewriter); }

  static inline data_expression rewr_433_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_433_0(this_rewriter); }


  // [432] ==: (Trans # Trans -> Bool) # (Trans # Trans -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_432_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1,x3: Trans. @var_0(x1, x3) == @var_1(x1, x3)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(8), rewr_271_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(12)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(13))), this_rewriter), delayed_application2<data_expression,data_expression,data_expression>(local_rewrite(var_1, this_rewriter),static_cast<const data_expression&>(this_rewriter->bound_variable_get(12)),static_cast<const data_expression&>(this_rewriter->bound_variable_get(13)), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1,x3: Trans. @var_0(x1, x3) == @var_1(x1, x3)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982c90))), arg0, arg1);
  }

  static inline data_expression rewr_432_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_432_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_432_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_432_2(t[0], t[1], this_rewriter); }


  // [432] ==: (Trans # Trans -> Bool) # (Trans # Trans -> Bool) -> Bool
  static inline const data_expression& rewr_432_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cface310);
  }

  static inline data_expression rewr_432_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_432_0(this_rewriter); }

  static inline data_expression rewr_432_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_432_0(this_rewriter); }


  // [430] >: (Bool # Pos -> Pos) # (Bool # Pos -> Pos) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_430_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_427_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9828a0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_430_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_430_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_430_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_430_2(t[0], t[1], this_rewriter); }


  // [430] >: (Bool # Pos -> Pos) # (Bool # Pos -> Pos) -> Bool
  static inline const data_expression& rewr_430_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cface170);
  }

  static inline data_expression rewr_430_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_430_0(this_rewriter); }

  static inline data_expression rewr_430_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_430_0(this_rewriter); }


  // [429] >=: (Bool # Pos -> Pos) # (Bool # Pos -> Pos) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_429_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_428_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982870))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_429_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_429_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_429_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_429_2(t[0], t[1], this_rewriter); }


  // [429] >=: (Bool # Pos -> Pos) # (Bool # Pos -> Pos) -> Bool
  static inline const data_expression& rewr_429_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfacf180);
  }

  static inline data_expression rewr_429_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_429_0(this_rewriter); }

  static inline data_expression rewr_429_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_429_0(this_rewriter); }


  // [428] <=: (Bool # Pos -> Pos) # (Bool # Pos -> Pos) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_428_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982840))), arg0, arg1);
  }

  static inline data_expression rewr_428_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_428_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_428_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_428_2(t[0], t[1], this_rewriter); }


  // [428] <=: (Bool # Pos -> Pos) # (Bool # Pos -> Pos) -> Bool
  static inline const data_expression& rewr_428_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cface110);
  }

  static inline data_expression rewr_428_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_428_0(this_rewriter); }

  static inline data_expression rewr_428_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_428_0(this_rewriter); }


  // [427] <: (Bool # Pos -> Pos) # (Bool # Pos -> Pos) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_427_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982810))), arg0, arg1);
  }

  static inline data_expression rewr_427_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_427_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_427_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_427_2(t[0], t[1], this_rewriter); }


  // [427] <: (Bool # Pos -> Pos) # (Bool # Pos -> Pos) -> Bool
  static inline const data_expression& rewr_427_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa2ea0);
  }

  static inline data_expression rewr_427_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_427_0(this_rewriter); }

  static inline data_expression rewr_427_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_427_0(this_rewriter); }


  // [426] if: Bool # (Bool # Pos -> Pos) # (Bool # Pos -> Pos) -> Bool # Pos -> Pos
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_426_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_0(@var_2, @var_3)))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9827e0))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_426_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_426_5(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_426_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_426_5(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], this_rewriter); }


  // [426] if: Bool # (Bool # Pos -> Pos) # (Bool # Pos -> Pos) -> Bool # Pos -> Pos
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_426_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9827e0))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_426_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_426_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_426_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_426_3(t[0], t[1], t[2], this_rewriter); }


  // [426] if: Bool # (Bool # Pos -> Pos) # (Bool # Pos -> Pos) -> Bool # Pos -> Pos
  static inline const data_expression& rewr_426_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa0510);
  }

  static inline data_expression rewr_426_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_426_0(this_rewriter); }

  static inline data_expression rewr_426_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_426_0(this_rewriter); }


  // [425] !=: (Bool # Pos -> Pos) # (Bool # Pos -> Pos) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_425_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_424_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9827b0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_425_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_425_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_425_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_425_2(t[0], t[1], this_rewriter); }


  // [425] !=: (Bool # Pos -> Pos) # (Bool # Pos -> Pos) -> Bool
  static inline const data_expression& rewr_425_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa430b0);
  }

  static inline data_expression rewr_425_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_425_0(this_rewriter); }

  static inline data_expression rewr_425_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_425_0(this_rewriter); }


  // [424] ==: (Bool # Pos -> Pos) # (Bool # Pos -> Pos) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_424_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: Bool, x3: Pos. @var_0(x1, x3) == @var_1(x1, x3)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(9), rewr_431_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(14)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(15))), this_rewriter), rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(14)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(15))), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: Bool, x3: Pos. @var_0(x1, x3) == @var_1(x1, x3)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982780))), arg0, arg1);
  }

  static inline data_expression rewr_424_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_424_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_424_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_424_2(t[0], t[1], this_rewriter); }


  // [424] ==: (Bool # Pos -> Pos) # (Bool # Pos -> Pos) -> Bool
  static inline const data_expression& rewr_424_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cface740);
  }

  static inline data_expression rewr_424_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_424_0(this_rewriter); }

  static inline data_expression rewr_424_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_424_0(this_rewriter); }


  // [423] >: (HistoryLogEntry -> Place -> List(Nat)) # (HistoryLogEntry -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_423_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_420_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982450))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_423_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_423_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_423_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_423_2(t[0], t[1], this_rewriter); }


  // [423] >: (HistoryLogEntry -> Place -> List(Nat)) # (HistoryLogEntry -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_423_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa0450);
  }

  static inline data_expression rewr_423_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_423_0(this_rewriter); }

  static inline data_expression rewr_423_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_423_0(this_rewriter); }


  // [422] >=: (HistoryLogEntry -> Place -> List(Nat)) # (HistoryLogEntry -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_422_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_421_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982420))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_422_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_422_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_422_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_422_2(t[0], t[1], this_rewriter); }


  // [422] >=: (HistoryLogEntry -> Place -> List(Nat)) # (HistoryLogEntry -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_422_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6d090);
  }

  static inline data_expression rewr_422_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_422_0(this_rewriter); }

  static inline data_expression rewr_422_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_422_0(this_rewriter); }


  // [421] <=: (HistoryLogEntry -> Place -> List(Nat)) # (HistoryLogEntry -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_421_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9823f0))), arg0, arg1);
  }

  static inline data_expression rewr_421_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_421_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_421_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_421_2(t[0], t[1], this_rewriter); }


  // [421] <=: (HistoryLogEntry -> Place -> List(Nat)) # (HistoryLogEntry -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_421_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa2cd0);
  }

  static inline data_expression rewr_421_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_421_0(this_rewriter); }

  static inline data_expression rewr_421_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_421_0(this_rewriter); }


  // [420] <: (HistoryLogEntry -> Place -> List(Nat)) # (HistoryLogEntry -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_420_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9823c0))), arg0, arg1);
  }

  static inline data_expression rewr_420_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_420_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_420_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_420_2(t[0], t[1], this_rewriter); }


  // [420] <: (HistoryLogEntry -> Place -> List(Nat)) # (HistoryLogEntry -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_420_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa430e0);
  }

  static inline data_expression rewr_420_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_420_0(this_rewriter); }

  static inline data_expression rewr_420_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_420_0(this_rewriter); }


  // [419] if: Bool # (HistoryLogEntry -> Place -> List(Nat)) # (HistoryLogEntry -> Place -> List(Nat)) -> HistoryLogEntry -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_419_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2)(@var_3)))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_0(@var_2)(@var_3)))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter)), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)(@var_3)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          return rewrite_with_arguments_in_normal_form(application(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter)), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_0(@var_2)(@var_3)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2)(@var_3)))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(application(var_1, local_rewrite(var_2, this_rewriter)), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)(@var_3)
      }
      else
      {
      }
    }
    return application(application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982390))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter)), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_419_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_419_5(term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[2], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_419_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_419_5(down_cast<application>(down_cast<application>(t.head()).head())[0], down_cast<application>(down_cast<application>(t.head()).head())[1], down_cast<application>(down_cast<application>(t.head()).head())[2], down_cast<application>(t.head())[0], t[0], this_rewriter); }


  // [419] if: Bool # (HistoryLogEntry -> Place -> List(Nat)) # (HistoryLogEntry -> Place -> List(Nat)) -> HistoryLogEntry -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_419_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@R(@var_0(@var_2)))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_0(@var_2)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982390))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter));
  }

  static inline data_expression rewr_419_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_419_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_419_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_419_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [419] if: Bool # (HistoryLogEntry -> Place -> List(Nat)) # (HistoryLogEntry -> Place -> List(Nat)) -> HistoryLogEntry -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_419_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982390))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_419_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_419_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_419_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_419_3(t[0], t[1], t[2], this_rewriter); }


  // [419] if: Bool # (HistoryLogEntry -> Place -> List(Nat)) # (HistoryLogEntry -> Place -> List(Nat)) -> HistoryLogEntry -> Place -> List(Nat)
  static inline const data_expression& rewr_419_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfacf0f0);
  }

  static inline data_expression rewr_419_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_419_0(this_rewriter); }

  static inline data_expression rewr_419_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_419_0(this_rewriter); }


  // [418] !=: (HistoryLogEntry -> Place -> List(Nat)) # (HistoryLogEntry -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_418_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_417_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982360))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_418_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_418_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_418_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_418_2(t[0], t[1], this_rewriter); }


  // [418] !=: (HistoryLogEntry -> Place -> List(Nat)) # (HistoryLogEntry -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_418_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa428e0);
  }

  static inline data_expression rewr_418_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_418_0(this_rewriter); }

  static inline data_expression rewr_418_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_418_0(this_rewriter); }


  // [417] ==: (HistoryLogEntry -> Place -> List(Nat)) # (HistoryLogEntry -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_417_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: HistoryLogEntry. @var_0(x1) == @var_1(x1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(10), rewr_182_2(delayed_application1<data_expression,data_expression>(local_rewrite(var_0, this_rewriter),static_cast<const data_expression&>(this_rewriter->bound_variable_get(7)), this_rewriter), delayed_application1<data_expression,data_expression>(local_rewrite(var_1, this_rewriter),static_cast<const data_expression&>(this_rewriter->bound_variable_get(7)), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: HistoryLogEntry. @var_0(x1) == @var_1(x1)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982330))), arg0, arg1);
  }

  static inline data_expression rewr_417_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_417_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_417_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_417_2(t[0], t[1], this_rewriter); }


  // [417] ==: (HistoryLogEntry -> Place -> List(Nat)) # (HistoryLogEntry -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_417_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa429a0);
  }

  static inline data_expression rewr_417_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_417_0(this_rewriter); }

  static inline data_expression rewr_417_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_417_0(this_rewriter); }


  // [415] @if_always_else: Bool # (HistoryLogEntry -> Place -> List(Nat)) # (HistoryLogEntry -> Place -> List(Nat)) -> HistoryLogEntry -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_415_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return rewrite_aux(application(application(if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter)), local_rewrite(arg_not_nf3,this_rewriter)), local_rewrite(arg_not_nf4,this_rewriter)),true,this_rewriter);  }

  static inline data_expression rewr_415_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_415_5(term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[2], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_415_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_415_5(down_cast<application>(down_cast<application>(t.head()).head())[0], down_cast<application>(down_cast<application>(t.head()).head())[1], down_cast<application>(down_cast<application>(t.head()).head())[2], down_cast<application>(t.head())[0], t[0], this_rewriter); }


  // [415] @if_always_else: Bool # (HistoryLogEntry -> Place -> List(Nat)) # (HistoryLogEntry -> Place -> List(Nat)) -> HistoryLogEntry -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_415_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return rewrite_aux(application(if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter)), local_rewrite(arg_not_nf3,this_rewriter)),true,this_rewriter);  }

  static inline data_expression rewr_415_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_415_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_415_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_415_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [415] @if_always_else: Bool # (HistoryLogEntry -> Place -> List(Nat)) # (HistoryLogEntry -> Place -> List(Nat)) -> HistoryLogEntry -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_415_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter));  }

  static inline data_expression rewr_415_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_415_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_415_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_415_3(t[0], t[1], t[2], this_rewriter); }


  // [415] @if_always_else: Bool # (HistoryLogEntry -> Place -> List(Nat)) # (HistoryLogEntry -> Place -> List(Nat)) -> HistoryLogEntry -> Place -> List(Nat)
  static inline const data_expression& rewr_415_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa0480);
  }

  static inline data_expression rewr_415_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_415_0(this_rewriter); }

  static inline data_expression rewr_415_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_415_0(this_rewriter); }


  // [414] @is_not_an_update: (HistoryLogEntry -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0>
  static inline data_expression rewr_414_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @is_not_an_update by calling a user defined rewrite function.
    return is_not_a_function_update_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter));  }

  static inline data_expression rewr_414_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_414_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_414_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_414_1(t[0], this_rewriter); }


  // [414] @is_not_an_update: (HistoryLogEntry -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_414_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa429d0);
  }

  static inline data_expression rewr_414_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_414_0(this_rewriter); }

  static inline data_expression rewr_414_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_414_0(this_rewriter); }


  // [413] @func_update_stable: (HistoryLogEntry -> Place -> List(Nat)) # HistoryLogEntry # (Place -> List(Nat)) -> HistoryLogEntry -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_413_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@M(@var_1, @@N(@@S(@var_4, @@R(@var_2(@var_4)))), @@N(@@S(@var_4, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)(@var_4)), @@X)))))))))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const data_expression& var_1 = arg1; // S1a
      const DATA_EXPR2& var_2 = arg_not_nf2; // S1b
      const data_expression& var_3 = arg3; // S1a
      if (var_1 == arg3) // M
      {
        const DATA_EXPR4& var_4 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_2, this_rewriter), local_rewrite(var_4, this_rewriter)), this_rewriter); // R1 @var_2(@var_4)
      }
      else
      {
        const DATA_EXPR4& var_4 = arg_not_nf4; // S1b
        if (rewr_416_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewrite_with_arguments_in_normal_form(application(application(local_rewrite(var_0, this_rewriter), var_3), local_rewrite(var_4, this_rewriter)), this_rewriter); // R1 @var_0(@var_3)(@var_4)
        }
        else
        {
        }
      }
    }
    return application(application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982120))), local_rewrite(arg_not_nf0,this_rewriter), arg1, local_rewrite(arg_not_nf2,this_rewriter)), arg3), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_413_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_413_5(term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[2], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_413_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_413_5(down_cast<application>(down_cast<application>(t.head()).head())[0], down_cast<application>(down_cast<application>(t.head()).head())[1], down_cast<application>(down_cast<application>(t.head()).head())[2], down_cast<application>(t.head())[0], t[0], this_rewriter); }


  // [413] @func_update_stable: (HistoryLogEntry -> Place -> List(Nat)) # HistoryLogEntry # (Place -> List(Nat)) -> HistoryLogEntry -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_413_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const data_expression& var_1 = arg1; // S1a
      const DATA_EXPR2& var_2 = arg_not_nf2; // S1b
      const data_expression& var_3 = arg3; // S1a
      if (rewr_416_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return local_rewrite(var_2, this_rewriter); // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982120))), local_rewrite(arg_not_nf0,this_rewriter), arg1, local_rewrite(arg_not_nf2,this_rewriter)), arg3);
  }

  static inline data_expression rewr_413_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_413_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_413_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_413_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [413] @func_update_stable: (HistoryLogEntry -> Place -> List(Nat)) # HistoryLogEntry # (Place -> List(Nat)) -> HistoryLogEntry -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_413_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf982120))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter), local_rewrite(arg_not_nf2,this_rewriter));
  }

  static inline data_expression rewr_413_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_413_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_413_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_413_3(t[0], t[1], t[2], this_rewriter); }


  // [413] @func_update_stable: (HistoryLogEntry -> Place -> List(Nat)) # HistoryLogEntry # (Place -> List(Nat)) -> HistoryLogEntry -> Place -> List(Nat)
  static inline const data_expression& rewr_413_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa42910);
  }

  static inline data_expression rewr_413_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_413_0(this_rewriter); }

  static inline data_expression rewr_413_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_413_0(this_rewriter); }


  // [412] @func_update: (HistoryLogEntry -> Place -> List(Nat)) # HistoryLogEntry # (Place -> List(Nat)) -> HistoryLogEntry -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_412_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@N(@@S(@var_6, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)(@var_6)), @@X))))))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf982120) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_5 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_6 = arg_not_nf4; // S1b
        if (rewr_133_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_413_5(delayed_rewr_412_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2, local_rewrite(var_5, this_rewriter), var_6,  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)(@var_6)
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@N(@@S(@var_6, @@N(@@S(@var_7, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)(@var_7)))))))), @@N(@@S(@var_5, @@N(@@S(@var_6, @@N(@@S(@var_7, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)(@var_7)), @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)(@var_7)), @@X))))))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)(@var_4)), @@X)))))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf982120) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_7 = arg_not_nf4; // S1b
          return rewr_415_5(rewr_182_2(delayed_application1<data_expression,data_expression>(var_1,var_2, this_rewriter), var_5,  this_rewriter), var_1, rewr_413_3(var_1, var_2, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter), local_rewrite(var_7, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)(@var_7)
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_7 = arg_not_nf4; // S1b
          if (rewr_414_1(var_0,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_415_5(rewr_182_2(delayed_application1<data_expression,data_expression>(var_0,var_4, this_rewriter), var_5,  this_rewriter), var_0, rewr_413_3(var_0, var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter), local_rewrite(var_7, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)(@var_7)
          }
          else
          {
            if (rewr_133_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_415_5(rewr_182_2(delayed_application1<data_expression,data_expression>(var_1,var_4, this_rewriter), var_5,  this_rewriter), rewr_413_3(var_1, var_2, var_3,  this_rewriter), rewr_413_3(delayed_rewr_413_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter), local_rewrite(var_7, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)(@var_7)
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        const DATA_EXPR3& var_3 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_4 = arg_not_nf4; // S1b
        if (rewr_414_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_415_5(rewr_182_2(delayed_application1<data_expression,data_expression>(var_0,var_1, this_rewriter), var_2,  this_rewriter), var_0, rewr_413_3(var_0, var_1, var_2,  this_rewriter), local_rewrite(var_3, this_rewriter), local_rewrite(var_4, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)(@var_4)
        }
        else
        {
        }
      }
    }
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@M(@var_1, @@N(@@S(@var_4, @@R(@var_2(@var_4)))), @@N(@@S(@var_4, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)(@var_4)), @@X)))))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      const data_expression& var_2 = arg2; // S1a
      const data_expression& var_3 = arg3; // S1a
      if (var_1 == arg3) // M
      {
        const DATA_EXPR4& var_4 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_2, local_rewrite(var_4, this_rewriter)), this_rewriter); // R1 @var_2(@var_4)
      }
      else
      {
        const DATA_EXPR4& var_4 = arg_not_nf4; // S1b
        if (rewr_416_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewrite_with_arguments_in_normal_form(application(application(var_0, var_3), local_rewrite(var_4, this_rewriter)), this_rewriter); // R1 @var_0(@var_3)(@var_4)
        }
        else
        {
        }
      }
    }
    return application(application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9820f0))), arg0, arg1, arg2), arg3), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_412_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_412_5(term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[2], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_412_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_412_5(down_cast<application>(down_cast<application>(t.head()).head())[0], down_cast<application>(down_cast<application>(t.head()).head())[1], down_cast<application>(down_cast<application>(t.head()).head())[2], down_cast<application>(t.head())[0], t[0], this_rewriter); }


  // [413] @func_update_stable: (HistoryLogEntry -> Place -> List(Nat)) # HistoryLogEntry # (Place -> List(Nat)) -> HistoryLogEntry -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_413_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_413_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_413_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [412] @func_update: (HistoryLogEntry -> Place -> List(Nat)) # HistoryLogEntry # (Place -> List(Nat)) -> HistoryLogEntry -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_412_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_412_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_412_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [412] @func_update: (HistoryLogEntry -> Place -> List(Nat)) # HistoryLogEntry # (Place -> List(Nat)) -> HistoryLogEntry -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_412_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)), @@X))))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf982120) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_5 = arg_not_nf3; // S1b
        if (rewr_133_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_413_4(delayed_rewr_412_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2, local_rewrite(var_5, this_rewriter),  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@N(@@S(@var_6, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)))))), @@N(@@S(@var_5, @@N(@@S(@var_6, @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)), @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)), @@X))))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf982120) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          return rewr_415_4(rewr_182_2(delayed_application1<data_expression,data_expression>(var_1,var_2, this_rewriter), var_5,  this_rewriter), var_1, rewr_413_3(var_1, var_2, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          if (rewr_133_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_415_4(rewr_182_2(delayed_application1<data_expression,data_expression>(var_1,var_4, this_rewriter), var_5,  this_rewriter), rewr_413_3(var_1, var_2, var_3,  this_rewriter), rewr_413_3(delayed_rewr_413_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)
          }
          else
          {
            if (rewr_414_1(var_0,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_415_4(rewr_182_2(delayed_application1<data_expression,data_expression>(var_0,var_4, this_rewriter), var_5,  this_rewriter), var_0, rewr_413_3(var_0, var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        const DATA_EXPR3& var_3 = arg_not_nf3; // S1b
        if (rewr_414_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_415_4(rewr_182_2(delayed_application1<data_expression,data_expression>(var_0,var_1, this_rewriter), var_2,  this_rewriter), var_0, rewr_413_3(var_0, var_1, var_2,  this_rewriter), local_rewrite(var_3, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)
        }
        else
        {
        }
      }
    }
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      const data_expression& var_2 = arg2; // S1a
      const data_expression& var_3 = arg3; // S1a
      if (rewr_416_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(var_0, var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return var_2; // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9820f0))), arg0, arg1, arg2), arg3);
  }

  static inline data_expression rewr_412_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_412_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_412_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_412_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [412] @func_update: (HistoryLogEntry -> Place -> List(Nat)) # HistoryLogEntry # (Place -> List(Nat)) -> HistoryLogEntry -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_412_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2]), @@X))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf982120) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        if (rewr_133_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_413_3(delayed_rewr_412_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2,  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2]
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])))), @@N(@@S(@var_5, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])), @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])), @@X))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf982120) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          return rewr_415_3(rewr_182_2(delayed_application1<data_expression,data_expression>(var_1,var_2, this_rewriter), var_5,  this_rewriter), var_1, rewr_413_3(var_1, var_2, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          if (rewr_414_1(var_0,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_415_3(rewr_182_2(delayed_application1<data_expression,data_expression>(var_0,var_4, this_rewriter), var_5,  this_rewriter), var_0, rewr_413_3(var_0, var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])
          }
          else
          {
            if (rewr_133_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_415_3(rewr_182_2(delayed_application1<data_expression,data_expression>(var_1,var_4, this_rewriter), var_5,  this_rewriter), rewr_413_3(var_1, var_2, var_3,  this_rewriter), rewr_413_3(delayed_rewr_413_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        if (rewr_414_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_415_3(rewr_182_2(delayed_application1<data_expression,data_expression>(var_0,var_1, this_rewriter), var_2,  this_rewriter), var_0, rewr_413_3(var_0, var_1, var_2,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9820f0))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_412_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_412_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_412_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_412_3(t[0], t[1], t[2], this_rewriter); }


  // [412] @func_update: (HistoryLogEntry -> Place -> List(Nat)) # HistoryLogEntry # (Place -> List(Nat)) -> HistoryLogEntry -> Place -> List(Nat)
  static inline const data_expression& rewr_412_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa42140);
  }

  static inline data_expression rewr_412_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_412_0(this_rewriter); }

  static inline data_expression rewr_412_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_412_0(this_rewriter); }


  // [411] >: (List(HistoryLogEntry) -> HistoryLogEntry) # (List(HistoryLogEntry) -> HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_411_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_408_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf981df0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_411_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_411_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_411_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_411_2(t[0], t[1], this_rewriter); }


  // [411] >: (List(HistoryLogEntry) -> HistoryLogEntry) # (List(HistoryLogEntry) -> HistoryLogEntry) -> Bool
  static inline const data_expression& rewr_411_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa43ff0);
  }

  static inline data_expression rewr_411_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_411_0(this_rewriter); }

  static inline data_expression rewr_411_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_411_0(this_rewriter); }


  // [410] >=: (List(HistoryLogEntry) -> HistoryLogEntry) # (List(HistoryLogEntry) -> HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_410_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_409_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf981dc0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_410_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_410_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_410_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_410_2(t[0], t[1], this_rewriter); }


  // [410] >=: (List(HistoryLogEntry) -> HistoryLogEntry) # (List(HistoryLogEntry) -> HistoryLogEntry) -> Bool
  static inline const data_expression& rewr_410_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa42200);
  }

  static inline data_expression rewr_410_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_410_0(this_rewriter); }

  static inline data_expression rewr_410_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_410_0(this_rewriter); }


  // [409] <=: (List(HistoryLogEntry) -> HistoryLogEntry) # (List(HistoryLogEntry) -> HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_409_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf981d90))), arg0, arg1);
  }

  static inline data_expression rewr_409_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_409_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_409_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_409_2(t[0], t[1], this_rewriter); }


  // [409] <=: (List(HistoryLogEntry) -> HistoryLogEntry) # (List(HistoryLogEntry) -> HistoryLogEntry) -> Bool
  static inline const data_expression& rewr_409_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa2e70);
  }

  static inline data_expression rewr_409_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_409_0(this_rewriter); }

  static inline data_expression rewr_409_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_409_0(this_rewriter); }


  // [408] <: (List(HistoryLogEntry) -> HistoryLogEntry) # (List(HistoryLogEntry) -> HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_408_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf981d60))), arg0, arg1);
  }

  static inline data_expression rewr_408_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_408_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_408_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_408_2(t[0], t[1], this_rewriter); }


  // [408] <: (List(HistoryLogEntry) -> HistoryLogEntry) # (List(HistoryLogEntry) -> HistoryLogEntry) -> Bool
  static inline const data_expression& rewr_408_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa43e40);
  }

  static inline data_expression rewr_408_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_408_0(this_rewriter); }

  static inline data_expression rewr_408_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_408_0(this_rewriter); }


  // [407] if: Bool # (List(HistoryLogEntry) -> HistoryLogEntry) # (List(HistoryLogEntry) -> HistoryLogEntry) -> List(HistoryLogEntry) -> HistoryLogEntry
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_407_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@R(@var_0(@var_2)))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_0(@var_2)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf981d30))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter));
  }

  static inline data_expression rewr_407_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_407_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_407_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_407_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [407] if: Bool # (List(HistoryLogEntry) -> HistoryLogEntry) # (List(HistoryLogEntry) -> HistoryLogEntry) -> List(HistoryLogEntry) -> HistoryLogEntry
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_407_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf981d30))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_407_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_407_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_407_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_407_3(t[0], t[1], t[2], this_rewriter); }


  // [407] if: Bool # (List(HistoryLogEntry) -> HistoryLogEntry) # (List(HistoryLogEntry) -> HistoryLogEntry) -> List(HistoryLogEntry) -> HistoryLogEntry
  static inline const data_expression& rewr_407_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa42880);
  }

  static inline data_expression rewr_407_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_407_0(this_rewriter); }

  static inline data_expression rewr_407_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_407_0(this_rewriter); }


  // [406] !=: (List(HistoryLogEntry) -> HistoryLogEntry) # (List(HistoryLogEntry) -> HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_406_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_405_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf981d00))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_406_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_406_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_406_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_406_2(t[0], t[1], this_rewriter); }


  // [406] !=: (List(HistoryLogEntry) -> HistoryLogEntry) # (List(HistoryLogEntry) -> HistoryLogEntry) -> Bool
  static inline const data_expression& rewr_406_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa43170);
  }

  static inline data_expression rewr_406_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_406_0(this_rewriter); }

  static inline data_expression rewr_406_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_406_0(this_rewriter); }


  // [405] ==: (List(HistoryLogEntry) -> HistoryLogEntry) # (List(HistoryLogEntry) -> HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_405_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: List(HistoryLogEntry). @var_0(x1) == @var_1(x1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(11), rewr_131_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(16))), this_rewriter), rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(16))), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: List(HistoryLogEntry). @var_0(x1) == @var_1(x1)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf981cd0))), arg0, arg1);
  }

  static inline data_expression rewr_405_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_405_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_405_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_405_2(t[0], t[1], this_rewriter); }


  // [405] ==: (List(HistoryLogEntry) -> HistoryLogEntry) # (List(HistoryLogEntry) -> HistoryLogEntry) -> Bool
  static inline const data_expression& rewr_405_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa421a0);
  }

  static inline data_expression rewr_405_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_405_0(this_rewriter); }

  static inline data_expression rewr_405_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_405_0(this_rewriter); }


  // [404] @if_always_else: Bool # (List(HistoryLogEntry) -> HistoryLogEntry) # (List(HistoryLogEntry) -> HistoryLogEntry) -> List(HistoryLogEntry) -> HistoryLogEntry
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_404_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return rewrite_aux(application(if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter)), local_rewrite(arg_not_nf3,this_rewriter)),true,this_rewriter);  }

  static inline data_expression rewr_404_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_404_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_404_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_404_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [404] @if_always_else: Bool # (List(HistoryLogEntry) -> HistoryLogEntry) # (List(HistoryLogEntry) -> HistoryLogEntry) -> List(HistoryLogEntry) -> HistoryLogEntry
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_404_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter));  }

  static inline data_expression rewr_404_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_404_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_404_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_404_3(t[0], t[1], t[2], this_rewriter); }


  // [404] @if_always_else: Bool # (List(HistoryLogEntry) -> HistoryLogEntry) # (List(HistoryLogEntry) -> HistoryLogEntry) -> List(HistoryLogEntry) -> HistoryLogEntry
  static inline const data_expression& rewr_404_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa3480);
  }

  static inline data_expression rewr_404_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_404_0(this_rewriter); }

  static inline data_expression rewr_404_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_404_0(this_rewriter); }


  // [403] @is_not_an_update: (List(HistoryLogEntry) -> HistoryLogEntry) -> Bool
  template < class DATA_EXPR0>
  static inline data_expression rewr_403_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @is_not_an_update by calling a user defined rewrite function.
    return is_not_a_function_update_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter));  }

  static inline data_expression rewr_403_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_403_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_403_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_403_1(t[0], this_rewriter); }


  // [403] @is_not_an_update: (List(HistoryLogEntry) -> HistoryLogEntry) -> Bool
  static inline const data_expression& rewr_403_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa43850);
  }

  static inline data_expression rewr_403_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_403_0(this_rewriter); }

  static inline data_expression rewr_403_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_403_0(this_rewriter); }


  // [402] @func_update_stable: (List(HistoryLogEntry) -> HistoryLogEntry) # List(HistoryLogEntry) # HistoryLogEntry -> List(HistoryLogEntry) -> HistoryLogEntry
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_402_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const data_expression& var_1 = arg1; // S1a
      const DATA_EXPR2& var_2 = arg_not_nf2; // S1b
      const data_expression& var_3 = arg3; // S1a
      if (rewr_135_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return local_rewrite(var_2, this_rewriter); // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf981b80))), local_rewrite(arg_not_nf0,this_rewriter), arg1, local_rewrite(arg_not_nf2,this_rewriter)), arg3);
  }

  static inline data_expression rewr_402_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_402_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_402_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_402_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [402] @func_update_stable: (List(HistoryLogEntry) -> HistoryLogEntry) # List(HistoryLogEntry) # HistoryLogEntry -> List(HistoryLogEntry) -> HistoryLogEntry
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_402_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf981b80))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter), local_rewrite(arg_not_nf2,this_rewriter));
  }

  static inline data_expression rewr_402_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_402_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_402_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_402_3(t[0], t[1], t[2], this_rewriter); }


  // [402] @func_update_stable: (List(HistoryLogEntry) -> HistoryLogEntry) # List(HistoryLogEntry) # HistoryLogEntry -> List(HistoryLogEntry) -> HistoryLogEntry
  static inline const data_expression& rewr_402_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa42170);
  }

  static inline data_expression rewr_402_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_402_0(this_rewriter); }

  static inline data_expression rewr_402_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_402_0(this_rewriter); }


  // [401] @func_update: (List(HistoryLogEntry) -> HistoryLogEntry) # List(HistoryLogEntry) # HistoryLogEntry -> List(HistoryLogEntry) -> HistoryLogEntry
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_401_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)), @@X))))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf981b80) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_5 = arg_not_nf3; // S1b
        if (rewr_132_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_402_4(delayed_rewr_401_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2, local_rewrite(var_5, this_rewriter),  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@N(@@S(@var_6, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)))))), @@N(@@S(@var_5, @@N(@@S(@var_6, @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)), @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)), @@X))))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf981b80) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          return rewr_404_4(rewr_131_2(rewrite_with_arguments_in_normal_form(application(var_1, var_2), this_rewriter), var_5,  this_rewriter), var_1, rewr_402_3(var_1, var_2, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          if (rewr_132_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_404_4(rewr_131_2(rewrite_with_arguments_in_normal_form(application(var_1, var_4), this_rewriter), var_5,  this_rewriter), rewr_402_3(var_1, var_2, var_3,  this_rewriter), rewr_402_3(delayed_rewr_402_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)
          }
          else
          {
            if (rewr_403_1(var_0,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_404_4(rewr_131_2(rewrite_with_arguments_in_normal_form(application(var_0, var_4), this_rewriter), var_5,  this_rewriter), var_0, rewr_402_3(var_0, var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        const DATA_EXPR3& var_3 = arg_not_nf3; // S1b
        if (rewr_403_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_404_4(rewr_131_2(rewrite_with_arguments_in_normal_form(application(var_0, var_1), this_rewriter), var_2,  this_rewriter), var_0, rewr_402_3(var_0, var_1, var_2,  this_rewriter), local_rewrite(var_3, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)
        }
        else
        {
        }
      }
    }
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      const data_expression& var_2 = arg2; // S1a
      const data_expression& var_3 = arg3; // S1a
      if (rewr_135_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(var_0, var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return var_2; // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf981b50))), arg0, arg1, arg2), arg3);
  }

  static inline data_expression rewr_401_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_401_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_401_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_401_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [402] @func_update_stable: (List(HistoryLogEntry) -> HistoryLogEntry) # List(HistoryLogEntry) # HistoryLogEntry -> List(HistoryLogEntry) -> HistoryLogEntry
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_402_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_402_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_402_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [401] @func_update: (List(HistoryLogEntry) -> HistoryLogEntry) # List(HistoryLogEntry) # HistoryLogEntry -> List(HistoryLogEntry) -> HistoryLogEntry
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_401_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_401_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_401_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [401] @func_update: (List(HistoryLogEntry) -> HistoryLogEntry) # List(HistoryLogEntry) # HistoryLogEntry -> List(HistoryLogEntry) -> HistoryLogEntry
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_401_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2]), @@X))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf981b80) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        if (rewr_132_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_402_3(delayed_rewr_401_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2,  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2]
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])))), @@N(@@S(@var_5, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])), @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])), @@X))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf981b80) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          return rewr_404_3(rewr_131_2(rewrite_with_arguments_in_normal_form(application(var_1, var_2), this_rewriter), var_5,  this_rewriter), var_1, rewr_402_3(var_1, var_2, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          if (rewr_403_1(var_0,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_404_3(rewr_131_2(rewrite_with_arguments_in_normal_form(application(var_0, var_4), this_rewriter), var_5,  this_rewriter), var_0, rewr_402_3(var_0, var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])
          }
          else
          {
            if (rewr_132_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_404_3(rewr_131_2(rewrite_with_arguments_in_normal_form(application(var_1, var_4), this_rewriter), var_5,  this_rewriter), rewr_402_3(var_1, var_2, var_3,  this_rewriter), rewr_402_3(delayed_rewr_402_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        if (rewr_403_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_404_3(rewr_131_2(rewrite_with_arguments_in_normal_form(application(var_0, var_1), this_rewriter), var_2,  this_rewriter), var_0, rewr_402_3(var_0, var_1, var_2,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf981b50))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_401_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_401_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_401_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_401_3(t[0], t[1], t[2], this_rewriter); }


  // [401] @func_update: (List(HistoryLogEntry) -> HistoryLogEntry) # List(HistoryLogEntry) # HistoryLogEntry -> List(HistoryLogEntry) -> HistoryLogEntry
  static inline const data_expression& rewr_401_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6add0);
  }

  static inline data_expression rewr_401_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_401_0(this_rewriter); }

  static inline data_expression rewr_401_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_401_0(this_rewriter); }


  // [400] >: (Nat # List(Nat) -> Bool) # (Nat # List(Nat) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_400_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_397_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9817c0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_400_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_400_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_400_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_400_2(t[0], t[1], this_rewriter); }


  // [400] >: (Nat # List(Nat) -> Bool) # (Nat # List(Nat) -> Bool) -> Bool
  static inline const data_expression& rewr_400_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa1770);
  }

  static inline data_expression rewr_400_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_400_0(this_rewriter); }

  static inline data_expression rewr_400_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_400_0(this_rewriter); }


  // [399] >=: (Nat # List(Nat) -> Bool) # (Nat # List(Nat) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_399_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_398_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf981790))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_399_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_399_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_399_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_399_2(t[0], t[1], this_rewriter); }


  // [399] >=: (Nat # List(Nat) -> Bool) # (Nat # List(Nat) -> Bool) -> Bool
  static inline const data_expression& rewr_399_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa3450);
  }

  static inline data_expression rewr_399_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_399_0(this_rewriter); }

  static inline data_expression rewr_399_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_399_0(this_rewriter); }


  // [398] <=: (Nat # List(Nat) -> Bool) # (Nat # List(Nat) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_398_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf981760))), arg0, arg1);
  }

  static inline data_expression rewr_398_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_398_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_398_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_398_2(t[0], t[1], this_rewriter); }


  // [398] <=: (Nat # List(Nat) -> Bool) # (Nat # List(Nat) -> Bool) -> Bool
  static inline const data_expression& rewr_398_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa43e70);
  }

  static inline data_expression rewr_398_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_398_0(this_rewriter); }

  static inline data_expression rewr_398_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_398_0(this_rewriter); }


  // [397] <: (Nat # List(Nat) -> Bool) # (Nat # List(Nat) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_397_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf981730))), arg0, arg1);
  }

  static inline data_expression rewr_397_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_397_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_397_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_397_2(t[0], t[1], this_rewriter); }


  // [397] <: (Nat # List(Nat) -> Bool) # (Nat # List(Nat) -> Bool) -> Bool
  static inline const data_expression& rewr_397_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa3c10);
  }

  static inline data_expression rewr_397_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_397_0(this_rewriter); }

  static inline data_expression rewr_397_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_397_0(this_rewriter); }


  // [396] if: Bool # (Nat # List(Nat) -> Bool) # (Nat # List(Nat) -> Bool) -> Nat # List(Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_396_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_0(@var_2, @var_3)))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf981700))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_396_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_396_5(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_396_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_396_5(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], this_rewriter); }


  // [396] if: Bool # (Nat # List(Nat) -> Bool) # (Nat # List(Nat) -> Bool) -> Nat # List(Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_396_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf981700))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_396_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_396_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_396_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_396_3(t[0], t[1], t[2], this_rewriter); }


  // [396] if: Bool # (Nat # List(Nat) -> Bool) # (Nat # List(Nat) -> Bool) -> Nat # List(Nat) -> Bool
  static inline const data_expression& rewr_396_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa4b20);
  }

  static inline data_expression rewr_396_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_396_0(this_rewriter); }

  static inline data_expression rewr_396_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_396_0(this_rewriter); }


  // [395] !=: (Nat # List(Nat) -> Bool) # (Nat # List(Nat) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_395_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_394_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9816d0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_395_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_395_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_395_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_395_2(t[0], t[1], this_rewriter); }


  // [395] !=: (Nat # List(Nat) -> Bool) # (Nat # List(Nat) -> Bool) -> Bool
  static inline const data_expression& rewr_395_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa2f10);
  }

  static inline data_expression rewr_395_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_395_0(this_rewriter); }

  static inline data_expression rewr_395_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_395_0(this_rewriter); }


  // [394] ==: (Nat # List(Nat) -> Bool) # (Nat # List(Nat) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_394_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: Nat, x3: List(Nat). @var_0(x1, x3) == @var_1(x1, x3)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(12), rewr_271_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(17)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(18))), this_rewriter), delayed_application2<data_expression,data_expression,data_expression>(local_rewrite(var_1, this_rewriter),static_cast<const data_expression&>(this_rewriter->bound_variable_get(17)),static_cast<const data_expression&>(this_rewriter->bound_variable_get(18)), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: Nat, x3: List(Nat). @var_0(x1, x3) == @var_1(x1, x3)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9816a0))), arg0, arg1);
  }

  static inline data_expression rewr_394_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_394_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_394_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_394_2(t[0], t[1], this_rewriter); }


  // [394] ==: (Nat # List(Nat) -> Bool) # (Nat # List(Nat) -> Bool) -> Bool
  static inline const data_expression& rewr_394_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa4170);
  }

  static inline data_expression rewr_394_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_394_0(this_rewriter); }

  static inline data_expression rewr_394_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_394_0(this_rewriter); }


  // [393] >: (Nat # List(Nat) -> List(Nat)) # (Nat # List(Nat) -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_393_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_390_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf981310))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_393_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_393_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_393_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_393_2(t[0], t[1], this_rewriter); }


  // [393] >: (Nat # List(Nat) -> List(Nat)) # (Nat # List(Nat) -> List(Nat)) -> Bool
  static inline const data_expression& rewr_393_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa1b60);
  }

  static inline data_expression rewr_393_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_393_0(this_rewriter); }

  static inline data_expression rewr_393_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_393_0(this_rewriter); }


  // [392] >=: (Nat # List(Nat) -> List(Nat)) # (Nat # List(Nat) -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_392_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_391_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9812e0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_392_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_392_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_392_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_392_2(t[0], t[1], this_rewriter); }


  // [392] >=: (Nat # List(Nat) -> List(Nat)) # (Nat # List(Nat) -> List(Nat)) -> Bool
  static inline const data_expression& rewr_392_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa17e0);
  }

  static inline data_expression rewr_392_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_392_0(this_rewriter); }

  static inline data_expression rewr_392_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_392_0(this_rewriter); }


  // [391] <=: (Nat # List(Nat) -> List(Nat)) # (Nat # List(Nat) -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_391_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9812b0))), arg0, arg1);
  }

  static inline data_expression rewr_391_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_391_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_391_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_391_2(t[0], t[1], this_rewriter); }


  // [391] <=: (Nat # List(Nat) -> List(Nat)) # (Nat # List(Nat) -> List(Nat)) -> Bool
  static inline const data_expression& rewr_391_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa3b90);
  }

  static inline data_expression rewr_391_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_391_0(this_rewriter); }

  static inline data_expression rewr_391_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_391_0(this_rewriter); }


  // [390] <: (Nat # List(Nat) -> List(Nat)) # (Nat # List(Nat) -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_390_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf981280))), arg0, arg1);
  }

  static inline data_expression rewr_390_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_390_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_390_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_390_2(t[0], t[1], this_rewriter); }


  // [390] <: (Nat # List(Nat) -> List(Nat)) # (Nat # List(Nat) -> List(Nat)) -> Bool
  static inline const data_expression& rewr_390_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa3b30);
  }

  static inline data_expression rewr_390_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_390_0(this_rewriter); }

  static inline data_expression rewr_390_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_390_0(this_rewriter); }


  // [389] if: Bool # (Nat # List(Nat) -> List(Nat)) # (Nat # List(Nat) -> List(Nat)) -> Nat # List(Nat) -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_389_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_0(@var_2, @var_3)))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf981250))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_389_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_389_5(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_389_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_389_5(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], this_rewriter); }


  // [389] if: Bool # (Nat # List(Nat) -> List(Nat)) # (Nat # List(Nat) -> List(Nat)) -> Nat # List(Nat) -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_389_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf981250))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_389_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_389_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_389_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_389_3(t[0], t[1], t[2], this_rewriter); }


  // [389] if: Bool # (Nat # List(Nat) -> List(Nat)) # (Nat # List(Nat) -> List(Nat)) -> Nat # List(Nat) -> List(Nat)
  static inline const data_expression& rewr_389_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa42a30);
  }

  static inline data_expression rewr_389_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_389_0(this_rewriter); }

  static inline data_expression rewr_389_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_389_0(this_rewriter); }


  // [388] !=: (Nat # List(Nat) -> List(Nat)) # (Nat # List(Nat) -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_388_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_387_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf981220))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_388_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_388_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_388_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_388_2(t[0], t[1], this_rewriter); }


  // [388] !=: (Nat # List(Nat) -> List(Nat)) # (Nat # List(Nat) -> List(Nat)) -> Bool
  static inline const data_expression& rewr_388_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa3610);
  }

  static inline data_expression rewr_388_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_388_0(this_rewriter); }

  static inline data_expression rewr_388_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_388_0(this_rewriter); }


  // [387] ==: (Nat # List(Nat) -> List(Nat)) # (Nat # List(Nat) -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_387_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: Nat, x3: List(Nat). @var_0(x1, x3) == @var_1(x1, x3)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(12), rewr_39_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(17)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(18))), this_rewriter), rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(17)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(18))), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: Nat, x3: List(Nat). @var_0(x1, x3) == @var_1(x1, x3)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9811f0))), arg0, arg1);
  }

  static inline data_expression rewr_387_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_387_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_387_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_387_2(t[0], t[1], this_rewriter); }


  // [387] ==: (Nat # List(Nat) -> List(Nat)) # (Nat # List(Nat) -> List(Nat)) -> Bool
  static inline const data_expression& rewr_387_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa41320);
  }

  static inline data_expression rewr_387_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_387_0(this_rewriter); }

  static inline data_expression rewr_387_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_387_0(this_rewriter); }


  // [386] >: ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) # ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_386_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_383_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf980e60))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_386_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_386_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_386_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_386_2(t[0], t[1], this_rewriter); }


  // [386] >: ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) # ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_386_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa412c0);
  }

  static inline data_expression rewr_386_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_386_0(this_rewriter); }

  static inline data_expression rewr_386_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_386_0(this_rewriter); }


  // [385] >=: ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) # ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_385_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_384_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf980e30))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_385_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_385_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_385_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_385_2(t[0], t[1], this_rewriter); }


  // [385] >=: ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) # ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_385_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa41350);
  }

  static inline data_expression rewr_385_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_385_0(this_rewriter); }

  static inline data_expression rewr_385_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_385_0(this_rewriter); }


  // [384] <=: ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) # ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_384_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf980e00))), arg0, arg1);
  }

  static inline data_expression rewr_384_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_384_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_384_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_384_2(t[0], t[1], this_rewriter); }


  // [384] <=: ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) # ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_384_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa36d0);
  }

  static inline data_expression rewr_384_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_384_0(this_rewriter); }

  static inline data_expression rewr_384_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_384_0(this_rewriter); }


  // [383] <: ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) # ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_383_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf980dd0))), arg0, arg1);
  }

  static inline data_expression rewr_383_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_383_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_383_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_383_2(t[0], t[1], this_rewriter); }


  // [383] <: ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) # ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_383_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa413e0);
  }

  static inline data_expression rewr_383_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_383_0(this_rewriter); }

  static inline data_expression rewr_383_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_383_0(this_rewriter); }


  // [382] if: Bool # ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) # ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) -> (Place -> List(Nat)) # Trans -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4, class DATA_EXPR5>
  static inline data_expression rewr_382_6(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, const DATA_EXPR5& arg_not_nf5, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@R(@var_1(@var_2, @var_3)(@var_4)))))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@R(@var_0(@var_2, @var_3)(@var_4)))))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        const DATA_EXPR5& var_4 = arg_not_nf5; // S1b
        return rewrite_with_arguments_in_normal_form(application(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), local_rewrite(var_4, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)(@var_4)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          const DATA_EXPR5& var_4 = arg_not_nf5; // S1b
          return rewrite_with_arguments_in_normal_form(application(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), local_rewrite(var_4, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3)(@var_4)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@R(@var_1(@var_2, @var_3)(@var_4)))))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        const DATA_EXPR5& var_4 = arg_not_nf5; // S1b
        return rewrite_with_arguments_in_normal_form(application(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), local_rewrite(var_4, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)(@var_4)
      }
      else
      {
      }
    }
    return application(application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf980da0))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter)), local_rewrite(arg_not_nf5,this_rewriter));
  }

  static inline data_expression rewr_382_6_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_382_6(term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[2], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_382_6_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_382_6(down_cast<application>(down_cast<application>(t.head()).head())[0], down_cast<application>(down_cast<application>(t.head()).head())[1], down_cast<application>(down_cast<application>(t.head()).head())[2], down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], t[0], this_rewriter); }


  // [382] if: Bool # ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) # ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) -> (Place -> List(Nat)) # Trans -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_382_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_0(@var_2, @var_3)))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf980da0))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_382_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_382_5(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_382_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_382_5(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], this_rewriter); }


  // [382] if: Bool # ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) # ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) -> (Place -> List(Nat)) # Trans -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_382_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf980da0))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_382_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_382_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_382_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_382_3(t[0], t[1], t[2], this_rewriter); }


  // [382] if: Bool # ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) # ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) -> (Place -> List(Nat)) # Trans -> Place -> List(Nat)
  static inline const data_expression& rewr_382_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa40be0);
  }

  static inline data_expression rewr_382_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_382_0(this_rewriter); }

  static inline data_expression rewr_382_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_382_0(this_rewriter); }


  // [381] !=: ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) # ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_381_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_380_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf980d70))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_381_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_381_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_381_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_381_2(t[0], t[1], this_rewriter); }


  // [381] !=: ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) # ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_381_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa40d50);
  }

  static inline data_expression rewr_381_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_381_0(this_rewriter); }

  static inline data_expression rewr_381_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_381_0(this_rewriter); }


  // [380] ==: ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) # ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_380_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: Place -> List(Nat), x3: Trans. @var_0(x1, x3) == @var_1(x1, x3)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(13), rewr_182_2(delayed_application2<data_expression,data_expression,data_expression>(local_rewrite(var_0, this_rewriter),static_cast<const data_expression&>(this_rewriter->bound_variable_get(5)),static_cast<const data_expression&>(this_rewriter->bound_variable_get(13)), this_rewriter), delayed_application2<data_expression,data_expression,data_expression>(local_rewrite(var_1, this_rewriter),static_cast<const data_expression&>(this_rewriter->bound_variable_get(5)),static_cast<const data_expression&>(this_rewriter->bound_variable_get(13)), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: Place -> List(Nat), x3: Trans. @var_0(x1, x3) == @var_1(x1, x3)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf980d40))), arg0, arg1);
  }

  static inline data_expression rewr_380_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_380_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_380_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_380_2(t[0], t[1], this_rewriter); }


  // [380] ==: ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) # ((Place -> List(Nat)) # Trans -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_380_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cface270);
  }

  static inline data_expression rewr_380_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_380_0(this_rewriter); }

  static inline data_expression rewr_380_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_380_0(this_rewriter); }


  // [379] >: (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) # (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_379_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_376_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9809b0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_379_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_379_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_379_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_379_2(t[0], t[1], this_rewriter); }


  // [379] >: (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) # (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_379_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa4680);
  }

  static inline data_expression rewr_379_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_379_0(this_rewriter); }

  static inline data_expression rewr_379_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_379_0(this_rewriter); }


  // [378] >=: (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) # (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_378_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_377_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf980980))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_378_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_378_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_378_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_378_2(t[0], t[1], this_rewriter); }


  // [378] >=: (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) # (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_378_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa16f0);
  }

  static inline data_expression rewr_378_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_378_0(this_rewriter); }

  static inline data_expression rewr_378_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_378_0(this_rewriter); }


  // [377] <=: (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) # (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_377_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf980950))), arg0, arg1);
  }

  static inline data_expression rewr_377_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_377_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_377_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_377_2(t[0], t[1], this_rewriter); }


  // [377] <=: (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) # (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_377_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa4710);
  }

  static inline data_expression rewr_377_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_377_0(this_rewriter); }

  static inline data_expression rewr_377_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_377_0(this_rewriter); }


  // [376] <: (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) # (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_376_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf980920))), arg0, arg1);
  }

  static inline data_expression rewr_376_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_376_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_376_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_376_2(t[0], t[1], this_rewriter); }


  // [376] <: (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) # (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_376_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfacd8c0);
  }

  static inline data_expression rewr_376_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_376_0(this_rewriter); }

  static inline data_expression rewr_376_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_376_0(this_rewriter); }


  // [375] if: Bool # (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) # (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) -> PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_375_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_0(@var_2, @var_3)))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9808f0))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_375_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_375_5(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_375_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_375_5(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], this_rewriter); }


  // [375] if: Bool # (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) # (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) -> PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_375_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9808f0))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_375_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_375_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_375_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_375_3(t[0], t[1], t[2], this_rewriter); }


  // [375] if: Bool # (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) # (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) -> PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)
  static inline const data_expression& rewr_375_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa40ca0);
  }

  static inline data_expression rewr_375_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_375_0(this_rewriter); }

  static inline data_expression rewr_375_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_375_0(this_rewriter); }


  // [374] !=: (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) # (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_374_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_373_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9808c0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_374_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_374_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_374_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_374_2(t[0], t[1], this_rewriter); }


  // [374] !=: (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) # (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_374_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfacd790);
  }

  static inline data_expression rewr_374_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_374_0(this_rewriter); }

  static inline data_expression rewr_374_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_374_0(this_rewriter); }


  // [373] ==: (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) # (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_373_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: PlaceTokens, x3: List(PlaceTokens). @var_0(x1, x3) == @var_1(x1, x3)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(14), rewr_110_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(19)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(20))), this_rewriter), rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(19)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(20))), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: PlaceTokens, x3: List(PlaceTokens). @var_0(x1, x3) == @var_1(x1, x3)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf980890))), arg0, arg1);
  }

  static inline data_expression rewr_373_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_373_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_373_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_373_2(t[0], t[1], this_rewriter); }


  // [373] ==: (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) # (PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_373_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa40530);
  }

  static inline data_expression rewr_373_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_373_0(this_rewriter); }

  static inline data_expression rewr_373_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_373_0(this_rewriter); }


  // [372] >: (List(Nat) # List(Nat) -> List(Nat)) # (List(Nat) # List(Nat) -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_372_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_369_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf980500))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_372_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_372_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_372_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_372_2(t[0], t[1], this_rewriter); }


  // [372] >: (List(Nat) # List(Nat) -> List(Nat)) # (List(Nat) # List(Nat) -> List(Nat)) -> Bool
  static inline const data_expression& rewr_372_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa405f0);
  }

  static inline data_expression rewr_372_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_372_0(this_rewriter); }

  static inline data_expression rewr_372_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_372_0(this_rewriter); }


  // [371] >=: (List(Nat) # List(Nat) -> List(Nat)) # (List(Nat) # List(Nat) -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_371_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_370_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9804d0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_371_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_371_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_371_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_371_2(t[0], t[1], this_rewriter); }


  // [371] >=: (List(Nat) # List(Nat) -> List(Nat)) # (List(Nat) # List(Nat) -> List(Nat)) -> Bool
  static inline const data_expression& rewr_371_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa3bc0);
  }

  static inline data_expression rewr_371_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_371_0(this_rewriter); }

  static inline data_expression rewr_371_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_371_0(this_rewriter); }


  // [370] <=: (List(Nat) # List(Nat) -> List(Nat)) # (List(Nat) # List(Nat) -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_370_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9804a0))), arg0, arg1);
  }

  static inline data_expression rewr_370_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_370_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_370_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_370_2(t[0], t[1], this_rewriter); }


  // [370] <=: (List(Nat) # List(Nat) -> List(Nat)) # (List(Nat) # List(Nat) -> List(Nat)) -> Bool
  static inline const data_expression& rewr_370_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfacd920);
  }

  static inline data_expression rewr_370_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_370_0(this_rewriter); }

  static inline data_expression rewr_370_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_370_0(this_rewriter); }


  // [369] <: (List(Nat) # List(Nat) -> List(Nat)) # (List(Nat) # List(Nat) -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_369_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf980470))), arg0, arg1);
  }

  static inline data_expression rewr_369_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_369_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_369_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_369_2(t[0], t[1], this_rewriter); }


  // [369] <: (List(Nat) # List(Nat) -> List(Nat)) # (List(Nat) # List(Nat) -> List(Nat)) -> Bool
  static inline const data_expression& rewr_369_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa405c0);
  }

  static inline data_expression rewr_369_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_369_0(this_rewriter); }

  static inline data_expression rewr_369_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_369_0(this_rewriter); }


  // [368] if: Bool # (List(Nat) # List(Nat) -> List(Nat)) # (List(Nat) # List(Nat) -> List(Nat)) -> List(Nat) # List(Nat) -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_368_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_0(@var_2, @var_3)))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf980440))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_368_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_368_5(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_368_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_368_5(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], this_rewriter); }


  // [368] if: Bool # (List(Nat) # List(Nat) -> List(Nat)) # (List(Nat) # List(Nat) -> List(Nat)) -> List(Nat) # List(Nat) -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_368_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf980440))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_368_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_368_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_368_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_368_3(t[0], t[1], t[2], this_rewriter); }


  // [368] if: Bool # (List(Nat) # List(Nat) -> List(Nat)) # (List(Nat) # List(Nat) -> List(Nat)) -> List(Nat) # List(Nat) -> List(Nat)
  static inline const data_expression& rewr_368_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfacde40);
  }

  static inline data_expression rewr_368_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_368_0(this_rewriter); }

  static inline data_expression rewr_368_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_368_0(this_rewriter); }


  // [367] !=: (List(Nat) # List(Nat) -> List(Nat)) # (List(Nat) # List(Nat) -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_367_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_366_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf980410))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_367_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_367_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_367_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_367_2(t[0], t[1], this_rewriter); }


  // [367] !=: (List(Nat) # List(Nat) -> List(Nat)) # (List(Nat) # List(Nat) -> List(Nat)) -> Bool
  static inline const data_expression& rewr_367_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa51c0);
  }

  static inline data_expression rewr_367_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_367_0(this_rewriter); }

  static inline data_expression rewr_367_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_367_0(this_rewriter); }


  // [366] ==: (List(Nat) # List(Nat) -> List(Nat)) # (List(Nat) # List(Nat) -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_366_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1,x3: List(Nat). @var_0(x1, x3) == @var_1(x1, x3)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(15), rewr_39_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(21)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(18))), this_rewriter), rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(21)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(18))), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1,x3: List(Nat). @var_0(x1, x3) == @var_1(x1, x3)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9803e0))), arg0, arg1);
  }

  static inline data_expression rewr_366_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_366_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_366_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_366_2(t[0], t[1], this_rewriter); }


  // [366] ==: (List(Nat) # List(Nat) -> List(Nat)) # (List(Nat) # List(Nat) -> List(Nat)) -> Bool
  static inline const data_expression& rewr_366_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa5350);
  }

  static inline data_expression rewr_366_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_366_0(this_rewriter); }

  static inline data_expression rewr_366_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_366_0(this_rewriter); }


  // [365] >: ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) # ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_365_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_362_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf980050))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_365_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_365_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_365_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_365_2(t[0], t[1], this_rewriter); }


  // [365] >: ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) # ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_365_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa52f0);
  }

  static inline data_expression rewr_365_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_365_0(this_rewriter); }

  static inline data_expression rewr_365_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_365_0(this_rewriter); }


  // [364] >=: ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) # ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_364_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_363_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf980020))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_364_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_364_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_364_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_364_2(t[0], t[1], this_rewriter); }


  // [364] >=: ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) # ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_364_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa5380);
  }

  static inline data_expression rewr_364_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_364_0(this_rewriter); }

  static inline data_expression rewr_364_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_364_0(this_rewriter); }


  // [363] <=: ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) # ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_363_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97fff0))), arg0, arg1);
  }

  static inline data_expression rewr_363_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_363_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_363_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_363_2(t[0], t[1], this_rewriter); }


  // [363] <=: ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) # ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_363_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa51f0);
  }

  static inline data_expression rewr_363_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_363_0(this_rewriter); }

  static inline data_expression rewr_363_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_363_0(this_rewriter); }


  // [362] <: ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) # ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_362_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97ffc0))), arg0, arg1);
  }

  static inline data_expression rewr_362_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_362_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_362_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_362_2(t[0], t[1], this_rewriter); }


  // [362] <: ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) # ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_362_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3fd40);
  }

  static inline data_expression rewr_362_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_362_0(this_rewriter); }

  static inline data_expression rewr_362_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_362_0(this_rewriter); }


  // [361] if: Bool # ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) # ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) -> (Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4, class DATA_EXPR5>
  static inline data_expression rewr_361_6(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, const DATA_EXPR5& arg_not_nf5, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@R(@var_1(@var_2, @var_3)(@var_4)))))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@R(@var_0(@var_2, @var_3)(@var_4)))))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        const DATA_EXPR5& var_4 = arg_not_nf5; // S1b
        return rewrite_with_arguments_in_normal_form(application(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), local_rewrite(var_4, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)(@var_4)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          const DATA_EXPR5& var_4 = arg_not_nf5; // S1b
          return rewrite_with_arguments_in_normal_form(application(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), local_rewrite(var_4, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3)(@var_4)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@R(@var_1(@var_2, @var_3)(@var_4)))))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        const DATA_EXPR5& var_4 = arg_not_nf5; // S1b
        return rewrite_with_arguments_in_normal_form(application(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), local_rewrite(var_4, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)(@var_4)
      }
      else
      {
      }
    }
    return application(application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97ff90))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter)), local_rewrite(arg_not_nf5,this_rewriter));
  }

  static inline data_expression rewr_361_6_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_361_6(term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[2], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_361_6_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_361_6(down_cast<application>(down_cast<application>(t.head()).head())[0], down_cast<application>(down_cast<application>(t.head()).head())[1], down_cast<application>(down_cast<application>(t.head()).head())[2], down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], t[0], this_rewriter); }


  // [361] if: Bool # ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) # ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) -> (Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_361_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_0(@var_2, @var_3)))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97ff90))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_361_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_361_5(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_361_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_361_5(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], this_rewriter); }


  // [361] if: Bool # ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) # ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) -> (Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_361_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97ff90))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_361_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_361_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_361_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_361_3(t[0], t[1], t[2], this_rewriter); }


  // [361] if: Bool # ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) # ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) -> (Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)
  static inline const data_expression& rewr_361_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3fd70);
  }

  static inline data_expression rewr_361_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_361_0(this_rewriter); }

  static inline data_expression rewr_361_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_361_0(this_rewriter); }


  // [360] !=: ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) # ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_360_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_359_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97ff60))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_360_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_360_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_360_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_360_2(t[0], t[1], this_rewriter); }


  // [360] !=: ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) # ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_360_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfacd4d0);
  }

  static inline data_expression rewr_360_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_360_0(this_rewriter); }

  static inline data_expression rewr_360_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_360_0(this_rewriter); }


  // [359] ==: ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) # ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_359_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: Place -> List(Nat), x3: List(PlaceTokens). @var_0(x1, x3) == @var_1(x1, x3)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(16), rewr_182_2(delayed_application2<data_expression,data_expression,data_expression>(local_rewrite(var_0, this_rewriter),static_cast<const data_expression&>(this_rewriter->bound_variable_get(5)),static_cast<const data_expression&>(this_rewriter->bound_variable_get(20)), this_rewriter), delayed_application2<data_expression,data_expression,data_expression>(local_rewrite(var_1, this_rewriter),static_cast<const data_expression&>(this_rewriter->bound_variable_get(5)),static_cast<const data_expression&>(this_rewriter->bound_variable_get(20)), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: Place -> List(Nat), x3: List(PlaceTokens). @var_0(x1, x3) == @var_1(x1, x3)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97ff30))), arg0, arg1);
  }

  static inline data_expression rewr_359_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_359_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_359_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_359_2(t[0], t[1], this_rewriter); }


  // [359] ==: ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) # ((Place -> List(Nat)) # List(PlaceTokens) -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_359_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa404d0);
  }

  static inline data_expression rewr_359_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_359_0(this_rewriter); }

  static inline data_expression rewr_359_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_359_0(this_rewriter); }


  // [358] >: (Trans # List(Trans) -> Bool) # (Trans # List(Trans) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_358_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_355_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97fb70))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_358_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_358_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_358_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_358_2(t[0], t[1], this_rewriter); }


  // [358] >: (Trans # List(Trans) -> Bool) # (Trans # List(Trans) -> Bool) -> Bool
  static inline const data_expression& rewr_358_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa4a70);
  }

  static inline data_expression rewr_358_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_358_0(this_rewriter); }

  static inline data_expression rewr_358_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_358_0(this_rewriter); }


  // [357] >=: (Trans # List(Trans) -> Bool) # (Trans # List(Trans) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_357_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_356_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97fb40))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_357_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_357_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_357_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_357_2(t[0], t[1], this_rewriter); }


  // [357] >=: (Trans # List(Trans) -> Bool) # (Trans # List(Trans) -> Bool) -> Bool
  static inline const data_expression& rewr_357_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa47a0);
  }

  static inline data_expression rewr_357_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_357_0(this_rewriter); }

  static inline data_expression rewr_357_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_357_0(this_rewriter); }


  // [356] <=: (Trans # List(Trans) -> Bool) # (Trans # List(Trans) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_356_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97fb10))), arg0, arg1);
  }

  static inline data_expression rewr_356_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_356_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_356_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_356_2(t[0], t[1], this_rewriter); }


  // [356] <=: (Trans # List(Trans) -> Bool) # (Trans # List(Trans) -> Bool) -> Bool
  static inline const data_expression& rewr_356_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf965420);
  }

  static inline data_expression rewr_356_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_356_0(this_rewriter); }

  static inline data_expression rewr_356_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_356_0(this_rewriter); }


  // [355] <: (Trans # List(Trans) -> Bool) # (Trans # List(Trans) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_355_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97fae0))), arg0, arg1);
  }

  static inline data_expression rewr_355_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_355_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_355_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_355_2(t[0], t[1], this_rewriter); }


  // [355] <: (Trans # List(Trans) -> Bool) # (Trans # List(Trans) -> Bool) -> Bool
  static inline const data_expression& rewr_355_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa49e0);
  }

  static inline data_expression rewr_355_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_355_0(this_rewriter); }

  static inline data_expression rewr_355_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_355_0(this_rewriter); }


  // [354] if: Bool # (Trans # List(Trans) -> Bool) # (Trans # List(Trans) -> Bool) -> Trans # List(Trans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_354_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_0(@var_2, @var_3)))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97fab0))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_354_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_354_5(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_354_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_354_5(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], this_rewriter); }


  // [354] if: Bool # (Trans # List(Trans) -> Bool) # (Trans # List(Trans) -> Bool) -> Trans # List(Trans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_354_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97fab0))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_354_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_354_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_354_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_354_3(t[0], t[1], t[2], this_rewriter); }


  // [354] if: Bool # (Trans # List(Trans) -> Bool) # (Trans # List(Trans) -> Bool) -> Trans # List(Trans) -> Bool
  static inline const data_expression& rewr_354_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3fe70);
  }

  static inline data_expression rewr_354_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_354_0(this_rewriter); }

  static inline data_expression rewr_354_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_354_0(this_rewriter); }


  // [353] !=: (Trans # List(Trans) -> Bool) # (Trans # List(Trans) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_353_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_352_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97fa80))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_353_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_353_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_353_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_353_2(t[0], t[1], this_rewriter); }


  // [353] !=: (Trans # List(Trans) -> Bool) # (Trans # List(Trans) -> Bool) -> Bool
  static inline const data_expression& rewr_353_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa4c20);
  }

  static inline data_expression rewr_353_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_353_0(this_rewriter); }

  static inline data_expression rewr_353_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_353_0(this_rewriter); }


  // [352] ==: (Trans # List(Trans) -> Bool) # (Trans # List(Trans) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_352_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: Trans, x3: List(Trans). @var_0(x1, x3) == @var_1(x1, x3)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(17), rewr_271_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(12)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(22))), this_rewriter), delayed_application2<data_expression,data_expression,data_expression>(local_rewrite(var_1, this_rewriter),static_cast<const data_expression&>(this_rewriter->bound_variable_get(12)),static_cast<const data_expression&>(this_rewriter->bound_variable_get(22)), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: Trans, x3: List(Trans). @var_0(x1, x3) == @var_1(x1, x3)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97fa50))), arg0, arg1);
  }

  static inline data_expression rewr_352_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_352_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_352_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_352_2(t[0], t[1], this_rewriter); }


  // [352] ==: (Trans # List(Trans) -> Bool) # (Trans # List(Trans) -> Bool) -> Bool
  static inline const data_expression& rewr_352_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa4c50);
  }

  static inline data_expression rewr_352_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_352_0(this_rewriter); }

  static inline data_expression rewr_352_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_352_0(this_rewriter); }


  // [351] >: (Nat # Nat -> Bool) # (Nat # Nat -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_351_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_348_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97f6c0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_351_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_351_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_351_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_351_2(t[0], t[1], this_rewriter); }


  // [351] >: (Nat # Nat -> Bool) # (Nat # Nat -> Bool) -> Bool
  static inline const data_expression& rewr_351_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3f5c0);
  }

  static inline data_expression rewr_351_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_351_0(this_rewriter); }

  static inline data_expression rewr_351_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_351_0(this_rewriter); }


  // [350] >=: (Nat # Nat -> Bool) # (Nat # Nat -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_350_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_349_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97f690))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_350_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_350_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_350_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_350_2(t[0], t[1], this_rewriter); }


  // [350] >=: (Nat # Nat -> Bool) # (Nat # Nat -> Bool) -> Bool
  static inline const data_expression& rewr_350_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfacd870);
  }

  static inline data_expression rewr_350_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_350_0(this_rewriter); }

  static inline data_expression rewr_350_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_350_0(this_rewriter); }


  // [349] <=: (Nat # Nat -> Bool) # (Nat # Nat -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_349_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97f660))), arg0, arg1);
  }

  static inline data_expression rewr_349_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_349_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_349_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_349_2(t[0], t[1], this_rewriter); }


  // [349] <=: (Nat # Nat -> Bool) # (Nat # Nat -> Bool) -> Bool
  static inline const data_expression& rewr_349_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa5270);
  }

  static inline data_expression rewr_349_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_349_0(this_rewriter); }

  static inline data_expression rewr_349_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_349_0(this_rewriter); }


  // [348] <: (Nat # Nat -> Bool) # (Nat # Nat -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_348_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97f630))), arg0, arg1);
  }

  static inline data_expression rewr_348_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_348_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_348_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_348_2(t[0], t[1], this_rewriter); }


  // [348] <: (Nat # Nat -> Bool) # (Nat # Nat -> Bool) -> Bool
  static inline const data_expression& rewr_348_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3f6b0);
  }

  static inline data_expression rewr_348_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_348_0(this_rewriter); }

  static inline data_expression rewr_348_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_348_0(this_rewriter); }


  // [347] if: Bool # (Nat # Nat -> Bool) # (Nat # Nat -> Bool) -> Nat # Nat -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_347_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_0(@var_2, @var_3)))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97f600))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_347_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_347_5(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_347_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_347_5(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], this_rewriter); }


  // [347] if: Bool # (Nat # Nat -> Bool) # (Nat # Nat -> Bool) -> Nat # Nat -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_347_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97f600))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_347_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_347_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_347_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_347_3(t[0], t[1], t[2], this_rewriter); }


  // [347] if: Bool # (Nat # Nat -> Bool) # (Nat # Nat -> Bool) -> Nat # Nat -> Bool
  static inline const data_expression& rewr_347_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3ef40);
  }

  static inline data_expression rewr_347_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_347_0(this_rewriter); }

  static inline data_expression rewr_347_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_347_0(this_rewriter); }


  // [346] !=: (Nat # Nat -> Bool) # (Nat # Nat -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_346_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_345_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97f5d0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_346_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_346_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_346_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_346_2(t[0], t[1], this_rewriter); }


  // [346] !=: (Nat # Nat -> Bool) # (Nat # Nat -> Bool) -> Bool
  static inline const data_expression& rewr_346_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3f000);
  }

  static inline data_expression rewr_346_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_346_0(this_rewriter); }

  static inline data_expression rewr_346_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_346_0(this_rewriter); }


  // [345] ==: (Nat # Nat -> Bool) # (Nat # Nat -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_345_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1,x3: Nat. @var_0(x1, x3) == @var_1(x1, x3)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(18), rewr_271_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(17)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(23))), this_rewriter), delayed_application2<data_expression,data_expression,data_expression>(local_rewrite(var_1, this_rewriter),static_cast<const data_expression&>(this_rewriter->bound_variable_get(17)),static_cast<const data_expression&>(this_rewriter->bound_variable_get(23)), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1,x3: Nat. @var_0(x1, x3) == @var_1(x1, x3)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97f5a0))), arg0, arg1);
  }

  static inline data_expression rewr_345_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_345_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_345_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_345_2(t[0], t[1], this_rewriter); }


  // [345] ==: (Nat # Nat -> Bool) # (Nat # Nat -> Bool) -> Bool
  static inline const data_expression& rewr_345_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa4f40);
  }

  static inline data_expression rewr_345_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_345_0(this_rewriter); }

  static inline data_expression rewr_345_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_345_0(this_rewriter); }


  // [344] >: (Trans -> Nat) # (Trans -> Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_344_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_341_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97f2a0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_344_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_344_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_344_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_344_2(t[0], t[1], this_rewriter); }


  // [344] >: (Trans -> Nat) # (Trans -> Nat) -> Bool
  static inline const data_expression& rewr_344_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa4b90);
  }

  static inline data_expression rewr_344_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_344_0(this_rewriter); }

  static inline data_expression rewr_344_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_344_0(this_rewriter); }


  // [343] >=: (Trans -> Nat) # (Trans -> Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_343_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_342_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97f270))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_343_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_343_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_343_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_343_2(t[0], t[1], this_rewriter); }


  // [343] >=: (Trans -> Nat) # (Trans -> Nat) -> Bool
  static inline const data_expression& rewr_343_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3eee0);
  }

  static inline data_expression rewr_343_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_343_0(this_rewriter); }

  static inline data_expression rewr_343_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_343_0(this_rewriter); }


  // [342] <=: (Trans -> Nat) # (Trans -> Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_342_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97f240))), arg0, arg1);
  }

  static inline data_expression rewr_342_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_342_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_342_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_342_2(t[0], t[1], this_rewriter); }


  // [342] <=: (Trans -> Nat) # (Trans -> Nat) -> Bool
  static inline const data_expression& rewr_342_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa40d00);
  }

  static inline data_expression rewr_342_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_342_0(this_rewriter); }

  static inline data_expression rewr_342_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_342_0(this_rewriter); }


  // [341] <: (Trans -> Nat) # (Trans -> Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_341_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97f210))), arg0, arg1);
  }

  static inline data_expression rewr_341_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_341_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_341_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_341_2(t[0], t[1], this_rewriter); }


  // [341] <: (Trans -> Nat) # (Trans -> Nat) -> Bool
  static inline const data_expression& rewr_341_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3ef70);
  }

  static inline data_expression rewr_341_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_341_0(this_rewriter); }

  static inline data_expression rewr_341_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_341_0(this_rewriter); }


  // [340] if: Bool # (Trans -> Nat) # (Trans -> Nat) -> Trans -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_340_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@R(@var_0(@var_2)))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_0(@var_2)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97f1e0))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter));
  }

  static inline data_expression rewr_340_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_340_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_340_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_340_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [340] if: Bool # (Trans -> Nat) # (Trans -> Nat) -> Trans -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_340_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97f1e0))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_340_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_340_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_340_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_340_3(t[0], t[1], t[2], this_rewriter); }


  // [340] if: Bool # (Trans -> Nat) # (Trans -> Nat) -> Trans -> Nat
  static inline const data_expression& rewr_340_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa4f10);
  }

  static inline data_expression rewr_340_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_340_0(this_rewriter); }

  static inline data_expression rewr_340_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_340_0(this_rewriter); }


  // [339] !=: (Trans -> Nat) # (Trans -> Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_339_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_338_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97f1b0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_339_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_339_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_339_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_339_2(t[0], t[1], this_rewriter); }


  // [339] !=: (Trans -> Nat) # (Trans -> Nat) -> Bool
  static inline const data_expression& rewr_339_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa4e20);
  }

  static inline data_expression rewr_339_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_339_0(this_rewriter); }

  static inline data_expression rewr_339_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_339_0(this_rewriter); }


  // [338] ==: (Trans -> Nat) # (Trans -> Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_338_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: Trans. @var_0(x1) == @var_1(x1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(7), rewr_65_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(12))), this_rewriter), rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(12))), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: Trans. @var_0(x1) == @var_1(x1)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97f180))), arg0, arg1);
  }

  static inline data_expression rewr_338_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_338_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_338_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_338_2(t[0], t[1], this_rewriter); }


  // [338] ==: (Trans -> Nat) # (Trans -> Nat) -> Bool
  static inline const data_expression& rewr_338_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa4eb0);
  }

  static inline data_expression rewr_338_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_338_0(this_rewriter); }

  static inline data_expression rewr_338_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_338_0(this_rewriter); }


  // [337] @if_always_else: Bool # (Trans -> Nat) # (Trans -> Nat) -> Trans -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_337_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return rewrite_aux(application(if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter)), local_rewrite(arg_not_nf3,this_rewriter)),true,this_rewriter);  }

  static inline data_expression rewr_337_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_337_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_337_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_337_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [337] @if_always_else: Bool # (Trans -> Nat) # (Trans -> Nat) -> Trans -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_337_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter));  }

  static inline data_expression rewr_337_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_337_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_337_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_337_3(t[0], t[1], t[2], this_rewriter); }


  // [337] @if_always_else: Bool # (Trans -> Nat) # (Trans -> Nat) -> Trans -> Nat
  static inline const data_expression& rewr_337_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa4e80);
  }

  static inline data_expression rewr_337_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_337_0(this_rewriter); }

  static inline data_expression rewr_337_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_337_0(this_rewriter); }


  // [336] @is_not_an_update: (Trans -> Nat) -> Bool
  template < class DATA_EXPR0>
  static inline data_expression rewr_336_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @is_not_an_update by calling a user defined rewrite function.
    return is_not_a_function_update_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter));  }

  static inline data_expression rewr_336_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_336_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_336_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_336_1(t[0], this_rewriter); }


  // [336] @is_not_an_update: (Trans -> Nat) -> Bool
  static inline const data_expression& rewr_336_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa4d00);
  }

  static inline data_expression rewr_336_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_336_0(this_rewriter); }

  static inline data_expression rewr_336_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_336_0(this_rewriter); }


  // [335] @func_update_stable: (Trans -> Nat) # Trans # Nat -> Trans -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_335_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const data_expression& var_1 = arg1; // S1a
      const DATA_EXPR2& var_2 = arg_not_nf2; // S1b
      const data_expression& var_3 = arg3; // S1a
      if (rewr_294_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return local_rewrite(var_2, this_rewriter); // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97f090))), local_rewrite(arg_not_nf0,this_rewriter), arg1, local_rewrite(arg_not_nf2,this_rewriter)), arg3);
  }

  static inline data_expression rewr_335_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_335_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_335_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_335_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [335] @func_update_stable: (Trans -> Nat) # Trans # Nat -> Trans -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_335_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97f090))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter), local_rewrite(arg_not_nf2,this_rewriter));
  }

  static inline data_expression rewr_335_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_335_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_335_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_335_3(t[0], t[1], t[2], this_rewriter); }


  // [335] @func_update_stable: (Trans -> Nat) # Trans # Nat -> Trans -> Nat
  static inline const data_expression& rewr_335_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3f650);
  }

  static inline data_expression rewr_335_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_335_0(this_rewriter); }

  static inline data_expression rewr_335_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_335_0(this_rewriter); }


  // [334] @func_update: (Trans -> Nat) # Trans # Nat -> Trans -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_334_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)), @@X))))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf97f090) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_5 = arg_not_nf3; // S1b
        if (rewr_151_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_335_4(delayed_rewr_334_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2, local_rewrite(var_5, this_rewriter),  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@N(@@S(@var_6, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)))))), @@N(@@S(@var_5, @@N(@@S(@var_6, @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)), @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)), @@X))))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf97f090) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          return rewr_337_4(rewr_65_2(rewrite_with_arguments_in_normal_form(application(var_1, var_2), this_rewriter), var_5,  this_rewriter), var_1, rewr_335_3(var_1, var_2, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          if (rewr_151_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_337_4(rewr_65_2(rewrite_with_arguments_in_normal_form(application(var_1, var_4), this_rewriter), var_5,  this_rewriter), rewr_335_3(var_1, var_2, var_3,  this_rewriter), rewr_335_3(delayed_rewr_335_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)
          }
          else
          {
            if (rewr_336_1(var_0,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_337_4(rewr_65_2(rewrite_with_arguments_in_normal_form(application(var_0, var_4), this_rewriter), var_5,  this_rewriter), var_0, rewr_335_3(var_0, var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        const DATA_EXPR3& var_3 = arg_not_nf3; // S1b
        if (rewr_336_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_337_4(rewr_65_2(rewrite_with_arguments_in_normal_form(application(var_0, var_1), this_rewriter), var_2,  this_rewriter), var_0, rewr_335_3(var_0, var_1, var_2,  this_rewriter), local_rewrite(var_3, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)
        }
        else
        {
        }
      }
    }
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      const data_expression& var_2 = arg2; // S1a
      const data_expression& var_3 = arg3; // S1a
      if (rewr_294_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(var_0, var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return var_2; // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97f060))), arg0, arg1, arg2), arg3);
  }

  static inline data_expression rewr_334_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_334_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_334_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_334_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [335] @func_update_stable: (Trans -> Nat) # Trans # Nat -> Trans -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_335_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_335_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_335_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [334] @func_update: (Trans -> Nat) # Trans # Nat -> Trans -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_334_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_334_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_334_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [334] @func_update: (Trans -> Nat) # Trans # Nat -> Trans -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_334_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2]), @@X))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf97f090) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        if (rewr_151_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_335_3(delayed_rewr_334_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2,  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2]
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])))), @@N(@@S(@var_5, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])), @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])), @@X))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf97f090) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          return rewr_337_3(rewr_65_2(rewrite_with_arguments_in_normal_form(application(var_1, var_2), this_rewriter), var_5,  this_rewriter), var_1, rewr_335_3(var_1, var_2, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          if (rewr_336_1(var_0,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_337_3(rewr_65_2(rewrite_with_arguments_in_normal_form(application(var_0, var_4), this_rewriter), var_5,  this_rewriter), var_0, rewr_335_3(var_0, var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])
          }
          else
          {
            if (rewr_151_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_337_3(rewr_65_2(rewrite_with_arguments_in_normal_form(application(var_1, var_4), this_rewriter), var_5,  this_rewriter), rewr_335_3(var_1, var_2, var_3,  this_rewriter), rewr_335_3(delayed_rewr_335_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        if (rewr_336_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_337_3(rewr_65_2(rewrite_with_arguments_in_normal_form(application(var_0, var_1), this_rewriter), var_2,  this_rewriter), var_0, rewr_335_3(var_0, var_1, var_2,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97f060))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_334_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_334_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_334_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_334_3(t[0], t[1], t[2], this_rewriter); }


  // [334] @func_update: (Trans -> Nat) # Trans # Nat -> Trans -> Nat
  static inline const data_expression& rewr_334_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa4ee0);
  }

  static inline data_expression rewr_334_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_334_0(this_rewriter); }

  static inline data_expression rewr_334_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_334_0(this_rewriter); }


  // [333] >: (List(HistoryLogEntry) # Trans -> Bool) # (List(HistoryLogEntry) # Trans -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_333_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_330_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97ecd0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_333_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_333_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_333_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_333_2(t[0], t[1], this_rewriter); }


  // [333] >: (List(HistoryLogEntry) # Trans -> Bool) # (List(HistoryLogEntry) # Trans -> Bool) -> Bool
  static inline const data_expression& rewr_333_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf965610);
  }

  static inline data_expression rewr_333_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_333_0(this_rewriter); }

  static inline data_expression rewr_333_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_333_0(this_rewriter); }


  // [332] >=: (List(HistoryLogEntry) # Trans -> Bool) # (List(HistoryLogEntry) # Trans -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_332_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_331_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97eca0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_332_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_332_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_332_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_332_2(t[0], t[1], this_rewriter); }


  // [332] >=: (List(HistoryLogEntry) # Trans -> Bool) # (List(HistoryLogEntry) # Trans -> Bool) -> Bool
  static inline const data_expression& rewr_332_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa4df0);
  }

  static inline data_expression rewr_332_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_332_0(this_rewriter); }

  static inline data_expression rewr_332_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_332_0(this_rewriter); }


  // [331] <=: (List(HistoryLogEntry) # Trans -> Bool) # (List(HistoryLogEntry) # Trans -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_331_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97ec70))), arg0, arg1);
  }

  static inline data_expression rewr_331_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_331_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_331_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_331_2(t[0], t[1], this_rewriter); }


  // [331] <=: (List(HistoryLogEntry) # Trans -> Bool) # (List(HistoryLogEntry) # Trans -> Bool) -> Bool
  static inline const data_expression& rewr_331_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf965cf0);
  }

  static inline data_expression rewr_331_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_331_0(this_rewriter); }

  static inline data_expression rewr_331_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_331_0(this_rewriter); }


  // [330] <: (List(HistoryLogEntry) # Trans -> Bool) # (List(HistoryLogEntry) # Trans -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_330_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97ec40))), arg0, arg1);
  }

  static inline data_expression rewr_330_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_330_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_330_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_330_2(t[0], t[1], this_rewriter); }


  // [330] <: (List(HistoryLogEntry) # Trans -> Bool) # (List(HistoryLogEntry) # Trans -> Bool) -> Bool
  static inline const data_expression& rewr_330_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa4d60);
  }

  static inline data_expression rewr_330_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_330_0(this_rewriter); }

  static inline data_expression rewr_330_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_330_0(this_rewriter); }


  // [329] if: Bool # (List(HistoryLogEntry) # Trans -> Bool) # (List(HistoryLogEntry) # Trans -> Bool) -> List(HistoryLogEntry) # Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_329_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_0(@var_2, @var_3)))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97ec10))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_329_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_329_5(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_329_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_329_5(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], this_rewriter); }


  // [329] if: Bool # (List(HistoryLogEntry) # Trans -> Bool) # (List(HistoryLogEntry) # Trans -> Bool) -> List(HistoryLogEntry) # Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_329_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97ec10))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_329_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_329_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_329_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_329_3(t[0], t[1], t[2], this_rewriter); }


  // [329] if: Bool # (List(HistoryLogEntry) # Trans -> Bool) # (List(HistoryLogEntry) # Trans -> Bool) -> List(HistoryLogEntry) # Trans -> Bool
  static inline const data_expression& rewr_329_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfacd820);
  }

  static inline data_expression rewr_329_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_329_0(this_rewriter); }

  static inline data_expression rewr_329_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_329_0(this_rewriter); }


  // [328] !=: (List(HistoryLogEntry) # Trans -> Bool) # (List(HistoryLogEntry) # Trans -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_328_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_327_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97ebe0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_328_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_328_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_328_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_328_2(t[0], t[1], this_rewriter); }


  // [328] !=: (List(HistoryLogEntry) # Trans -> Bool) # (List(HistoryLogEntry) # Trans -> Bool) -> Bool
  static inline const data_expression& rewr_328_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa3270);
  }

  static inline data_expression rewr_328_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_328_0(this_rewriter); }

  static inline data_expression rewr_328_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_328_0(this_rewriter); }


  // [327] ==: (List(HistoryLogEntry) # Trans -> Bool) # (List(HistoryLogEntry) # Trans -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_327_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: List(HistoryLogEntry), x3: Trans. @var_0(x1, x3) == @var_1(x1, x3)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(19), rewr_271_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(16)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(13))), this_rewriter), delayed_application2<data_expression,data_expression,data_expression>(local_rewrite(var_1, this_rewriter),static_cast<const data_expression&>(this_rewriter->bound_variable_get(16)),static_cast<const data_expression&>(this_rewriter->bound_variable_get(13)), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: List(HistoryLogEntry), x3: Trans. @var_0(x1, x3) == @var_1(x1, x3)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97ebb0))), arg0, arg1);
  }

  static inline data_expression rewr_327_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_327_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_327_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_327_2(t[0], t[1], this_rewriter); }


  // [327] ==: (List(HistoryLogEntry) # Trans -> Bool) # (List(HistoryLogEntry) # Trans -> Bool) -> Bool
  static inline const data_expression& rewr_327_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa4dc0);
  }

  static inline data_expression rewr_327_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_327_0(this_rewriter); }

  static inline data_expression rewr_327_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_327_0(this_rewriter); }


  // [326] >: (Bool # Bool -> Bool) # (Bool # Bool -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_326_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_323_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97e7f0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_326_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_326_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_326_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_326_2(t[0], t[1], this_rewriter); }


  // [326] >: (Bool # Bool -> Bool) # (Bool # Bool -> Bool) -> Bool
  static inline const data_expression& rewr_326_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa32a0);
  }

  static inline data_expression rewr_326_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_326_0(this_rewriter); }

  static inline data_expression rewr_326_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_326_0(this_rewriter); }


  // [325] >=: (Bool # Bool -> Bool) # (Bool # Bool -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_325_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_324_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97e7c0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_325_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_325_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_325_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_325_2(t[0], t[1], this_rewriter); }


  // [325] >=: (Bool # Bool -> Bool) # (Bool # Bool -> Bool) -> Bool
  static inline const data_expression& rewr_325_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa4d30);
  }

  static inline data_expression rewr_325_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_325_0(this_rewriter); }

  static inline data_expression rewr_325_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_325_0(this_rewriter); }


  // [324] <=: (Bool # Bool -> Bool) # (Bool # Bool -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_324_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97e790))), arg0, arg1);
  }

  static inline data_expression rewr_324_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_324_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_324_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_324_2(t[0], t[1], this_rewriter); }


  // [324] <=: (Bool # Bool -> Bool) # (Bool # Bool -> Bool) -> Bool
  static inline const data_expression& rewr_324_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3ee80);
  }

  static inline data_expression rewr_324_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_324_0(this_rewriter); }

  static inline data_expression rewr_324_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_324_0(this_rewriter); }


  // [323] <: (Bool # Bool -> Bool) # (Bool # Bool -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_323_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97e760))), arg0, arg1);
  }

  static inline data_expression rewr_323_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_323_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_323_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_323_2(t[0], t[1], this_rewriter); }


  // [323] <: (Bool # Bool -> Bool) # (Bool # Bool -> Bool) -> Bool
  static inline const data_expression& rewr_323_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa3540);
  }

  static inline data_expression rewr_323_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_323_0(this_rewriter); }

  static inline data_expression rewr_323_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_323_0(this_rewriter); }


  // [322] if: Bool # (Bool # Bool -> Bool) # (Bool # Bool -> Bool) -> Bool # Bool -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_322_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_0(@var_2, @var_3)))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97e730))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_322_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_322_5(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_322_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_322_5(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], this_rewriter); }


  // [322] if: Bool # (Bool # Bool -> Bool) # (Bool # Bool -> Bool) -> Bool # Bool -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_322_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97e730))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_322_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_322_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_322_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_322_3(t[0], t[1], t[2], this_rewriter); }


  // [322] if: Bool # (Bool # Bool -> Bool) # (Bool # Bool -> Bool) -> Bool # Bool -> Bool
  static inline const data_expression& rewr_322_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf966030);
  }

  static inline data_expression rewr_322_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_322_0(this_rewriter); }

  static inline data_expression rewr_322_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_322_0(this_rewriter); }


  // [321] !=: (Bool # Bool -> Bool) # (Bool # Bool -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_321_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_320_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97e700))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_321_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_321_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_321_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_321_2(t[0], t[1], this_rewriter); }


  // [321] !=: (Bool # Bool -> Bool) # (Bool # Bool -> Bool) -> Bool
  static inline const data_expression& rewr_321_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf965e20);
  }

  static inline data_expression rewr_321_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_321_0(this_rewriter); }

  static inline data_expression rewr_321_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_321_0(this_rewriter); }


  // [320] ==: (Bool # Bool -> Bool) # (Bool # Bool -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_320_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1,x3: Bool. @var_0(x1, x3) == @var_1(x1, x3)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(20), rewr_271_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(14)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(24))), this_rewriter), delayed_application2<data_expression,data_expression,data_expression>(local_rewrite(var_1, this_rewriter),static_cast<const data_expression&>(this_rewriter->bound_variable_get(14)),static_cast<const data_expression&>(this_rewriter->bound_variable_get(24)), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1,x3: Bool. @var_0(x1, x3) == @var_1(x1, x3)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97e6d0))), arg0, arg1);
  }

  static inline data_expression rewr_320_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_320_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_320_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_320_2(t[0], t[1], this_rewriter); }


  // [320] ==: (Bool # Bool -> Bool) # (Bool # Bool -> Bool) -> Bool
  static inline const data_expression& rewr_320_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf965e50);
  }

  static inline data_expression rewr_320_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_320_0(this_rewriter); }

  static inline data_expression rewr_320_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_320_0(this_rewriter); }


  // [319] >: (PlaceTokens # List(PlaceTokens) -> Bool) # (PlaceTokens # List(PlaceTokens) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_319_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_316_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97e310))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_319_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_319_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_319_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_319_2(t[0], t[1], this_rewriter); }


  // [319] >: (PlaceTokens # List(PlaceTokens) -> Bool) # (PlaceTokens # List(PlaceTokens) -> Bool) -> Bool
  static inline const data_expression& rewr_319_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf9655b0);
  }

  static inline data_expression rewr_319_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_319_0(this_rewriter); }

  static inline data_expression rewr_319_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_319_0(this_rewriter); }


  // [318] >=: (PlaceTokens # List(PlaceTokens) -> Bool) # (PlaceTokens # List(PlaceTokens) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_318_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_317_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97e2e0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_318_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_318_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_318_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_318_2(t[0], t[1], this_rewriter); }


  // [318] >=: (PlaceTokens # List(PlaceTokens) -> Bool) # (PlaceTokens # List(PlaceTokens) -> Bool) -> Bool
  static inline const data_expression& rewr_318_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf965f60);
  }

  static inline data_expression rewr_318_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_318_0(this_rewriter); }

  static inline data_expression rewr_318_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_318_0(this_rewriter); }


  // [317] <=: (PlaceTokens # List(PlaceTokens) -> Bool) # (PlaceTokens # List(PlaceTokens) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_317_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97e2b0))), arg0, arg1);
  }

  static inline data_expression rewr_317_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_317_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_317_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_317_2(t[0], t[1], this_rewriter); }


  // [317] <=: (PlaceTokens # List(PlaceTokens) -> Bool) # (PlaceTokens # List(PlaceTokens) -> Bool) -> Bool
  static inline const data_expression& rewr_317_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3dea0);
  }

  static inline data_expression rewr_317_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_317_0(this_rewriter); }

  static inline data_expression rewr_317_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_317_0(this_rewriter); }


  // [316] <: (PlaceTokens # List(PlaceTokens) -> Bool) # (PlaceTokens # List(PlaceTokens) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_316_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97e280))), arg0, arg1);
  }

  static inline data_expression rewr_316_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_316_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_316_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_316_2(t[0], t[1], this_rewriter); }


  // [316] <: (PlaceTokens # List(PlaceTokens) -> Bool) # (PlaceTokens # List(PlaceTokens) -> Bool) -> Bool
  static inline const data_expression& rewr_316_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3de10);
  }

  static inline data_expression rewr_316_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_316_0(this_rewriter); }

  static inline data_expression rewr_316_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_316_0(this_rewriter); }


  // [315] if: Bool # (PlaceTokens # List(PlaceTokens) -> Bool) # (PlaceTokens # List(PlaceTokens) -> Bool) -> PlaceTokens # List(PlaceTokens) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_315_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_0(@var_2, @var_3)))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97e250))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_315_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_315_5(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_315_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_315_5(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], this_rewriter); }


  // [315] if: Bool # (PlaceTokens # List(PlaceTokens) -> Bool) # (PlaceTokens # List(PlaceTokens) -> Bool) -> PlaceTokens # List(PlaceTokens) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_315_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97e250))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_315_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_315_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_315_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_315_3(t[0], t[1], t[2], this_rewriter); }


  // [315] if: Bool # (PlaceTokens # List(PlaceTokens) -> Bool) # (PlaceTokens # List(PlaceTokens) -> Bool) -> PlaceTokens # List(PlaceTokens) -> Bool
  static inline const data_expression& rewr_315_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3d640);
  }

  static inline data_expression rewr_315_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_315_0(this_rewriter); }

  static inline data_expression rewr_315_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_315_0(this_rewriter); }


  // [314] !=: (PlaceTokens # List(PlaceTokens) -> Bool) # (PlaceTokens # List(PlaceTokens) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_314_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_313_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97e220))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_314_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_314_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_314_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_314_2(t[0], t[1], this_rewriter); }


  // [314] !=: (PlaceTokens # List(PlaceTokens) -> Bool) # (PlaceTokens # List(PlaceTokens) -> Bool) -> Bool
  static inline const data_expression& rewr_314_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf965480);
  }

  static inline data_expression rewr_314_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_314_0(this_rewriter); }

  static inline data_expression rewr_314_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_314_0(this_rewriter); }


  // [313] ==: (PlaceTokens # List(PlaceTokens) -> Bool) # (PlaceTokens # List(PlaceTokens) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_313_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: PlaceTokens, x3: List(PlaceTokens). @var_0(x1, x3) == @var_1(x1, x3)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(14), rewr_271_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(19)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(20))), this_rewriter), delayed_application2<data_expression,data_expression,data_expression>(local_rewrite(var_1, this_rewriter),static_cast<const data_expression&>(this_rewriter->bound_variable_get(19)),static_cast<const data_expression&>(this_rewriter->bound_variable_get(20)), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: PlaceTokens, x3: List(PlaceTokens). @var_0(x1, x3) == @var_1(x1, x3)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf97e1f0))), arg0, arg1);
  }

  static inline data_expression rewr_313_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_313_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_313_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_313_2(t[0], t[1], this_rewriter); }


  // [313] ==: (PlaceTokens # List(PlaceTokens) -> Bool) # (PlaceTokens # List(PlaceTokens) -> Bool) -> Bool
  static inline const data_expression& rewr_313_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf9662e0);
  }

  static inline data_expression rewr_313_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_313_0(this_rewriter); }

  static inline data_expression rewr_313_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_313_0(this_rewriter); }


  // [312] >: (Trans -> List(PlaceTokens)) # (Trans -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_312_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_309_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921e70))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_312_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_312_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_312_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_312_2(t[0], t[1], this_rewriter); }


  // [312] >: (Trans -> List(PlaceTokens)) # (Trans -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_312_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf966140);
  }

  static inline data_expression rewr_312_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_312_0(this_rewriter); }

  static inline data_expression rewr_312_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_312_0(this_rewriter); }


  // [311] >=: (Trans -> List(PlaceTokens)) # (Trans -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_311_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_310_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921e40))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_311_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_311_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_311_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_311_2(t[0], t[1], this_rewriter); }


  // [311] >=: (Trans -> List(PlaceTokens)) # (Trans -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_311_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3d6a0);
  }

  static inline data_expression rewr_311_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_311_0(this_rewriter); }

  static inline data_expression rewr_311_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_311_0(this_rewriter); }


  // [310] <=: (Trans -> List(PlaceTokens)) # (Trans -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_310_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921e10))), arg0, arg1);
  }

  static inline data_expression rewr_310_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_310_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_310_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_310_2(t[0], t[1], this_rewriter); }


  // [310] <=: (Trans -> List(PlaceTokens)) # (Trans -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_310_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa4940);
  }

  static inline data_expression rewr_310_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_310_0(this_rewriter); }

  static inline data_expression rewr_310_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_310_0(this_rewriter); }


  // [309] <: (Trans -> List(PlaceTokens)) # (Trans -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_309_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921de0))), arg0, arg1);
  }

  static inline data_expression rewr_309_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_309_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_309_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_309_2(t[0], t[1], this_rewriter); }


  // [309] <: (Trans -> List(PlaceTokens)) # (Trans -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_309_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3d700);
  }

  static inline data_expression rewr_309_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_309_0(this_rewriter); }

  static inline data_expression rewr_309_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_309_0(this_rewriter); }


  // [308] if: Bool # (Trans -> List(PlaceTokens)) # (Trans -> List(PlaceTokens)) -> Trans -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_308_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@R(@var_0(@var_2)))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_0(@var_2)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921db0))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter));
  }

  static inline data_expression rewr_308_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_308_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_308_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_308_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [308] if: Bool # (Trans -> List(PlaceTokens)) # (Trans -> List(PlaceTokens)) -> Trans -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_308_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921db0))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_308_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_308_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_308_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_308_3(t[0], t[1], t[2], this_rewriter); }


  // [308] if: Bool # (Trans -> List(PlaceTokens)) # (Trans -> List(PlaceTokens)) -> Trans -> List(PlaceTokens)
  static inline const data_expression& rewr_308_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3ded0);
  }

  static inline data_expression rewr_308_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_308_0(this_rewriter); }

  static inline data_expression rewr_308_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_308_0(this_rewriter); }


  // [307] !=: (Trans -> List(PlaceTokens)) # (Trans -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_307_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_306_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921d80))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_307_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_307_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_307_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_307_2(t[0], t[1], this_rewriter); }


  // [307] !=: (Trans -> List(PlaceTokens)) # (Trans -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_307_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3d760);
  }

  static inline data_expression rewr_307_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_307_0(this_rewriter); }

  static inline data_expression rewr_307_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_307_0(this_rewriter); }


  // [306] ==: (Trans -> List(PlaceTokens)) # (Trans -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_306_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: Trans. @var_0(x1) == @var_1(x1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(7), rewr_110_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(12))), this_rewriter), rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(12))), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: Trans. @var_0(x1) == @var_1(x1)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921d50))), arg0, arg1);
  }

  static inline data_expression rewr_306_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_306_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_306_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_306_2(t[0], t[1], this_rewriter); }


  // [306] ==: (Trans -> List(PlaceTokens)) # (Trans -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_306_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3cf30);
  }

  static inline data_expression rewr_306_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_306_0(this_rewriter); }

  static inline data_expression rewr_306_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_306_0(this_rewriter); }


  // [305] @if_always_else: Bool # (Trans -> List(PlaceTokens)) # (Trans -> List(PlaceTokens)) -> Trans -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_305_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return rewrite_aux(application(if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter)), local_rewrite(arg_not_nf3,this_rewriter)),true,this_rewriter);  }

  static inline data_expression rewr_305_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_305_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_305_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_305_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [305] @if_always_else: Bool # (Trans -> List(PlaceTokens)) # (Trans -> List(PlaceTokens)) -> Trans -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_305_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter));  }

  static inline data_expression rewr_305_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_305_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_305_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_305_3(t[0], t[1], t[2], this_rewriter); }


  // [305] @if_always_else: Bool # (Trans -> List(PlaceTokens)) # (Trans -> List(PlaceTokens)) -> Trans -> List(PlaceTokens)
  static inline const data_expression& rewr_305_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3cf00);
  }

  static inline data_expression rewr_305_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_305_0(this_rewriter); }

  static inline data_expression rewr_305_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_305_0(this_rewriter); }


  // [304] @is_not_an_update: (Trans -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0>
  static inline data_expression rewr_304_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @is_not_an_update by calling a user defined rewrite function.
    return is_not_a_function_update_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter));  }

  static inline data_expression rewr_304_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_304_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_304_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_304_1(t[0], this_rewriter); }


  // [304] @is_not_an_update: (Trans -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_304_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf966170);
  }

  static inline data_expression rewr_304_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_304_0(this_rewriter); }

  static inline data_expression rewr_304_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_304_0(this_rewriter); }


  // [303] @func_update_stable: (Trans -> List(PlaceTokens)) # Trans # List(PlaceTokens) -> Trans -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_303_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const data_expression& var_1 = arg1; // S1a
      const DATA_EXPR2& var_2 = arg_not_nf2; // S1b
      const data_expression& var_3 = arg3; // S1a
      if (rewr_294_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return local_rewrite(var_2, this_rewriter); // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921c60))), local_rewrite(arg_not_nf0,this_rewriter), arg1, local_rewrite(arg_not_nf2,this_rewriter)), arg3);
  }

  static inline data_expression rewr_303_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_303_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_303_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_303_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [303] @func_update_stable: (Trans -> List(PlaceTokens)) # Trans # List(PlaceTokens) -> Trans -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_303_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921c60))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter), local_rewrite(arg_not_nf2,this_rewriter));
  }

  static inline data_expression rewr_303_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_303_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_303_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_303_3(t[0], t[1], t[2], this_rewriter); }


  // [303] @func_update_stable: (Trans -> List(PlaceTokens)) # Trans # List(PlaceTokens) -> Trans -> List(PlaceTokens)
  static inline const data_expression& rewr_303_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf9661f0);
  }

  static inline data_expression rewr_303_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_303_0(this_rewriter); }

  static inline data_expression rewr_303_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_303_0(this_rewriter); }


  // [302] @func_update: (Trans -> List(PlaceTokens)) # Trans # List(PlaceTokens) -> Trans -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_302_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)), @@X))))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf921c60) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_5 = arg_not_nf3; // S1b
        if (rewr_151_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_303_4(delayed_rewr_302_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2, local_rewrite(var_5, this_rewriter),  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@N(@@S(@var_6, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)))))), @@N(@@S(@var_5, @@N(@@S(@var_6, @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)), @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)), @@X))))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf921c60) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          return rewr_305_4(rewr_110_2(rewrite_with_arguments_in_normal_form(application(var_1, var_2), this_rewriter), var_5,  this_rewriter), var_1, rewr_303_3(var_1, var_2, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          if (rewr_151_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_305_4(rewr_110_2(rewrite_with_arguments_in_normal_form(application(var_1, var_4), this_rewriter), var_5,  this_rewriter), rewr_303_3(var_1, var_2, var_3,  this_rewriter), rewr_303_3(delayed_rewr_303_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)
          }
          else
          {
            if (rewr_304_1(var_0,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_305_4(rewr_110_2(rewrite_with_arguments_in_normal_form(application(var_0, var_4), this_rewriter), var_5,  this_rewriter), var_0, rewr_303_3(var_0, var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        const DATA_EXPR3& var_3 = arg_not_nf3; // S1b
        if (rewr_304_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_305_4(rewr_110_2(rewrite_with_arguments_in_normal_form(application(var_0, var_1), this_rewriter), var_2,  this_rewriter), var_0, rewr_303_3(var_0, var_1, var_2,  this_rewriter), local_rewrite(var_3, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)
        }
        else
        {
        }
      }
    }
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      const data_expression& var_2 = arg2; // S1a
      const data_expression& var_3 = arg3; // S1a
      if (rewr_294_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(var_0, var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return var_2; // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921c30))), arg0, arg1, arg2), arg3);
  }

  static inline data_expression rewr_302_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_302_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_302_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_302_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [303] @func_update_stable: (Trans -> List(PlaceTokens)) # Trans # List(PlaceTokens) -> Trans -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_303_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_303_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_303_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [302] @func_update: (Trans -> List(PlaceTokens)) # Trans # List(PlaceTokens) -> Trans -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_302_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_302_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_302_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [302] @func_update: (Trans -> List(PlaceTokens)) # Trans # List(PlaceTokens) -> Trans -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_302_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2]), @@X))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf921c60) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        if (rewr_151_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_303_3(delayed_rewr_302_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2,  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2]
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])))), @@N(@@S(@var_5, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])), @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])), @@X))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf921c60) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          return rewr_305_3(rewr_110_2(rewrite_with_arguments_in_normal_form(application(var_1, var_2), this_rewriter), var_5,  this_rewriter), var_1, rewr_303_3(var_1, var_2, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          if (rewr_304_1(var_0,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_305_3(rewr_110_2(rewrite_with_arguments_in_normal_form(application(var_0, var_4), this_rewriter), var_5,  this_rewriter), var_0, rewr_303_3(var_0, var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])
          }
          else
          {
            if (rewr_151_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_305_3(rewr_110_2(rewrite_with_arguments_in_normal_form(application(var_1, var_4), this_rewriter), var_5,  this_rewriter), rewr_303_3(var_1, var_2, var_3,  this_rewriter), rewr_303_3(delayed_rewr_303_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        if (rewr_304_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_305_3(rewr_110_2(rewrite_with_arguments_in_normal_form(application(var_0, var_1), this_rewriter), var_2,  this_rewriter), var_0, rewr_303_3(var_0, var_1, var_2,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921c30))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_302_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_302_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_302_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_302_3(t[0], t[1], t[2], this_rewriter); }


  // [302] @func_update: (Trans -> List(PlaceTokens)) # Trans # List(PlaceTokens) -> Trans -> List(PlaceTokens)
  static inline const data_expression& rewr_302_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf966220);
  }

  static inline data_expression rewr_302_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_302_0(this_rewriter); }

  static inline data_expression rewr_302_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_302_0(this_rewriter); }


  // [301] >: (Trans -> Bool) # (Trans -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_301_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_298_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921930))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_301_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_301_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_301_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_301_2(t[0], t[1], this_rewriter); }


  // [301] >: (Trans -> Bool) # (Trans -> Bool) -> Bool
  static inline const data_expression& rewr_301_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf992ee0);
  }

  static inline data_expression rewr_301_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_301_0(this_rewriter); }

  static inline data_expression rewr_301_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_301_0(this_rewriter); }


  // [300] >=: (Trans -> Bool) # (Trans -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_300_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_299_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921900))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_300_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_300_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_300_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_300_2(t[0], t[1], this_rewriter); }


  // [300] >=: (Trans -> Bool) # (Trans -> Bool) -> Bool
  static inline const data_expression& rewr_300_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3cf60);
  }

  static inline data_expression rewr_300_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_300_0(this_rewriter); }

  static inline data_expression rewr_300_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_300_0(this_rewriter); }


  // [299] <=: (Trans -> Bool) # (Trans -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_299_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9218d0))), arg0, arg1);
  }

  static inline data_expression rewr_299_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_299_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_299_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_299_2(t[0], t[1], this_rewriter); }


  // [299] <=: (Trans -> Bool) # (Trans -> Bool) -> Bool
  static inline const data_expression& rewr_299_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3d7c0);
  }

  static inline data_expression rewr_299_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_299_0(this_rewriter); }

  static inline data_expression rewr_299_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_299_0(this_rewriter); }


  // [298] <: (Trans -> Bool) # (Trans -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_298_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9218a0))), arg0, arg1);
  }

  static inline data_expression rewr_298_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_298_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_298_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_298_2(t[0], t[1], this_rewriter); }


  // [298] <: (Trans -> Bool) # (Trans -> Bool) -> Bool
  static inline const data_expression& rewr_298_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf992e80);
  }

  static inline data_expression rewr_298_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_298_0(this_rewriter); }

  static inline data_expression rewr_298_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_298_0(this_rewriter); }


  // [297] if: Bool # (Trans -> Bool) # (Trans -> Bool) -> Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_297_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@R(@var_0(@var_2)))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_0(@var_2)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921870))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter));
  }

  static inline data_expression rewr_297_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_297_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_297_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_297_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [297] if: Bool # (Trans -> Bool) # (Trans -> Bool) -> Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_297_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921870))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_297_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_297_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_297_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_297_3(t[0], t[1], t[2], this_rewriter); }


  // [297] if: Bool # (Trans -> Bool) # (Trans -> Bool) -> Trans -> Bool
  static inline const data_expression& rewr_297_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3d790);
  }

  static inline data_expression rewr_297_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_297_0(this_rewriter); }

  static inline data_expression rewr_297_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_297_0(this_rewriter); }


  // [296] !=: (Trans -> Bool) # (Trans -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_296_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_295_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921840))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_296_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_296_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_296_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_296_2(t[0], t[1], this_rewriter); }


  // [296] !=: (Trans -> Bool) # (Trans -> Bool) -> Bool
  static inline const data_expression& rewr_296_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3d090);
  }

  static inline data_expression rewr_296_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_296_0(this_rewriter); }

  static inline data_expression rewr_296_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_296_0(this_rewriter); }


  // [295] ==: (Trans -> Bool) # (Trans -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_295_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: Trans. @var_0(x1) == @var_1(x1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(7), rewr_271_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(12))), this_rewriter), delayed_application1<data_expression,data_expression>(local_rewrite(var_1, this_rewriter),static_cast<const data_expression&>(this_rewriter->bound_variable_get(12)), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: Trans. @var_0(x1) == @var_1(x1)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921810))), arg0, arg1);
  }

  static inline data_expression rewr_295_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_295_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_295_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_295_2(t[0], t[1], this_rewriter); }


  // [295] ==: (Trans -> Bool) # (Trans -> Bool) -> Bool
  static inline const data_expression& rewr_295_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf965db0);
  }

  static inline data_expression rewr_295_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_295_0(this_rewriter); }

  static inline data_expression rewr_295_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_295_0(this_rewriter); }


  // [293] @if_always_else: Bool # (Trans -> Bool) # (Trans -> Bool) -> Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_293_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return rewrite_aux(application(if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter)), local_rewrite(arg_not_nf3,this_rewriter)),true,this_rewriter);  }

  static inline data_expression rewr_293_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_293_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_293_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_293_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [293] @if_always_else: Bool # (Trans -> Bool) # (Trans -> Bool) -> Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_293_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter));  }

  static inline data_expression rewr_293_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_293_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_293_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_293_3(t[0], t[1], t[2], this_rewriter); }


  // [293] @if_always_else: Bool # (Trans -> Bool) # (Trans -> Bool) -> Trans -> Bool
  static inline const data_expression& rewr_293_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa4970);
  }

  static inline data_expression rewr_293_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_293_0(this_rewriter); }

  static inline data_expression rewr_293_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_293_0(this_rewriter); }


  // [292] @is_not_an_update: (Trans -> Bool) -> Bool
  template < class DATA_EXPR0>
  static inline data_expression rewr_292_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @is_not_an_update by calling a user defined rewrite function.
    return is_not_a_function_update_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter));  }

  static inline data_expression rewr_292_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_292_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_292_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_292_1(t[0], this_rewriter); }


  // [292] @is_not_an_update: (Trans -> Bool) -> Bool
  static inline const data_expression& rewr_292_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf992eb0);
  }

  static inline data_expression rewr_292_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_292_0(this_rewriter); }

  static inline data_expression rewr_292_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_292_0(this_rewriter); }


  // [291] @func_update_stable: (Trans -> Bool) # Trans # Bool -> Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_291_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const data_expression& var_1 = arg1; // S1a
      const DATA_EXPR2& var_2 = arg_not_nf2; // S1b
      const data_expression& var_3 = arg3; // S1a
      if (rewr_294_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return local_rewrite(var_2, this_rewriter); // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9215a0))), local_rewrite(arg_not_nf0,this_rewriter), arg1, local_rewrite(arg_not_nf2,this_rewriter)), arg3);
  }

  static inline data_expression rewr_291_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_291_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_291_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_291_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [291] @func_update_stable: (Trans -> Bool) # Trans # Bool -> Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_291_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9215a0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter), local_rewrite(arg_not_nf2,this_rewriter));
  }

  static inline data_expression rewr_291_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_291_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_291_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_291_3(t[0], t[1], t[2], this_rewriter); }


  // [291] @func_update_stable: (Trans -> Bool) # Trans # Bool -> Trans -> Bool
  static inline const data_expression& rewr_291_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf993280);
  }

  static inline data_expression rewr_291_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_291_0(this_rewriter); }

  static inline data_expression rewr_291_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_291_0(this_rewriter); }


  // [290] @func_update: (Trans -> Bool) # Trans # Bool -> Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_290_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)), @@X))))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9215a0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_5 = arg_not_nf3; // S1b
        if (rewr_151_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_291_4(delayed_rewr_290_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2, local_rewrite(var_5, this_rewriter),  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@N(@@S(@var_6, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)))))), @@N(@@S(@var_5, @@N(@@S(@var_6, @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)), @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)), @@X))))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9215a0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          return rewr_293_4(rewr_271_2(rewrite_with_arguments_in_normal_form(application(var_1, var_2), this_rewriter), var_5,  this_rewriter), var_1, rewr_291_3(var_1, var_2, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          if (rewr_151_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_293_4(rewr_271_2(rewrite_with_arguments_in_normal_form(application(var_1, var_4), this_rewriter), var_5,  this_rewriter), rewr_291_3(var_1, var_2, var_3,  this_rewriter), rewr_291_3(delayed_rewr_291_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)
          }
          else
          {
            if (rewr_292_1(var_0,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_293_4(rewr_271_2(rewrite_with_arguments_in_normal_form(application(var_0, var_4), this_rewriter), var_5,  this_rewriter), var_0, rewr_291_3(var_0, var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        const DATA_EXPR3& var_3 = arg_not_nf3; // S1b
        if (rewr_292_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_293_4(rewr_271_2(rewrite_with_arguments_in_normal_form(application(var_0, var_1), this_rewriter), var_2,  this_rewriter), var_0, rewr_291_3(var_0, var_1, var_2,  this_rewriter), local_rewrite(var_3, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)
        }
        else
        {
        }
      }
    }
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      const data_expression& var_2 = arg2; // S1a
      const data_expression& var_3 = arg3; // S1a
      if (rewr_294_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(var_0, var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return var_2; // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921570))), arg0, arg1, arg2), arg3);
  }

  static inline data_expression rewr_290_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_290_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_290_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_290_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [291] @func_update_stable: (Trans -> Bool) # Trans # Bool -> Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_291_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_291_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_291_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [290] @func_update: (Trans -> Bool) # Trans # Bool -> Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_290_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_290_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_290_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [290] @func_update: (Trans -> Bool) # Trans # Bool -> Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_290_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2]), @@X))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9215a0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        if (rewr_151_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_291_3(delayed_rewr_290_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2,  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2]
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])))), @@N(@@S(@var_5, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])), @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])), @@X))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf9215a0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          return rewr_293_3(rewr_271_2(rewrite_with_arguments_in_normal_form(application(var_1, var_2), this_rewriter), var_5,  this_rewriter), var_1, rewr_291_3(var_1, var_2, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          if (rewr_292_1(var_0,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_293_3(rewr_271_2(rewrite_with_arguments_in_normal_form(application(var_0, var_4), this_rewriter), var_5,  this_rewriter), var_0, rewr_291_3(var_0, var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])
          }
          else
          {
            if (rewr_151_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_293_3(rewr_271_2(rewrite_with_arguments_in_normal_form(application(var_1, var_4), this_rewriter), var_5,  this_rewriter), rewr_291_3(var_1, var_2, var_3,  this_rewriter), rewr_291_3(delayed_rewr_291_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        if (rewr_292_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_293_3(rewr_271_2(rewrite_with_arguments_in_normal_form(application(var_0, var_1), this_rewriter), var_2,  this_rewriter), var_0, rewr_291_3(var_0, var_1, var_2,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921570))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_290_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_290_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_290_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_290_3(t[0], t[1], t[2], this_rewriter); }


  // [290] @func_update: (Trans -> Bool) # Trans # Bool -> Trans -> Bool
  static inline const data_expression& rewr_290_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf992f10);
  }

  static inline data_expression rewr_290_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_290_0(this_rewriter); }

  static inline data_expression rewr_290_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_290_0(this_rewriter); }


  // [289] >: (List(HistoryLogEntry) -> List(Trans)) # (List(HistoryLogEntry) -> List(Trans)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_289_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_286_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921270))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_289_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_289_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_289_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_289_2(t[0], t[1], this_rewriter); }


  // [289] >: (List(HistoryLogEntry) -> List(Trans)) # (List(HistoryLogEntry) -> List(Trans)) -> Bool
  static inline const data_expression& rewr_289_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa1630);
  }

  static inline data_expression rewr_289_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_289_0(this_rewriter); }

  static inline data_expression rewr_289_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_289_0(this_rewriter); }


  // [288] >=: (List(HistoryLogEntry) -> List(Trans)) # (List(HistoryLogEntry) -> List(Trans)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_288_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_287_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921240))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_288_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_288_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_288_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_288_2(t[0], t[1], this_rewriter); }


  // [288] >=: (List(HistoryLogEntry) -> List(Trans)) # (List(HistoryLogEntry) -> List(Trans)) -> Bool
  static inline const data_expression& rewr_288_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf992f40);
  }

  static inline data_expression rewr_288_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_288_0(this_rewriter); }

  static inline data_expression rewr_288_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_288_0(this_rewriter); }


  // [287] <=: (List(HistoryLogEntry) -> List(Trans)) # (List(HistoryLogEntry) -> List(Trans)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_287_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921210))), arg0, arg1);
  }

  static inline data_expression rewr_287_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_287_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_287_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_287_2(t[0], t[1], this_rewriter); }


  // [287] <=: (List(HistoryLogEntry) -> List(Trans)) # (List(HistoryLogEntry) -> List(Trans)) -> Bool
  static inline const data_expression& rewr_287_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa31d0);
  }

  static inline data_expression rewr_287_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_287_0(this_rewriter); }

  static inline data_expression rewr_287_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_287_0(this_rewriter); }


  // [286] <: (List(HistoryLogEntry) -> List(Trans)) # (List(HistoryLogEntry) -> List(Trans)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_286_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9211e0))), arg0, arg1);
  }

  static inline data_expression rewr_286_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_286_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_286_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_286_2(t[0], t[1], this_rewriter); }


  // [286] <: (List(HistoryLogEntry) -> List(Trans)) # (List(HistoryLogEntry) -> List(Trans)) -> Bool
  static inline const data_expression& rewr_286_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3d060);
  }

  static inline data_expression rewr_286_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_286_0(this_rewriter); }

  static inline data_expression rewr_286_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_286_0(this_rewriter); }


  // [285] if: Bool # (List(HistoryLogEntry) -> List(Trans)) # (List(HistoryLogEntry) -> List(Trans)) -> List(HistoryLogEntry) -> List(Trans)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_285_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@R(@var_0(@var_2)))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_0(@var_2)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9211b0))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter));
  }

  static inline data_expression rewr_285_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_285_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_285_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_285_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [285] if: Bool # (List(HistoryLogEntry) -> List(Trans)) # (List(HistoryLogEntry) -> List(Trans)) -> List(HistoryLogEntry) -> List(Trans)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_285_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9211b0))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_285_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_285_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_285_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_285_3(t[0], t[1], t[2], this_rewriter); }


  // [285] if: Bool # (List(HistoryLogEntry) -> List(Trans)) # (List(HistoryLogEntry) -> List(Trans)) -> List(HistoryLogEntry) -> List(Trans)
  static inline const data_expression& rewr_285_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa30e0);
  }

  static inline data_expression rewr_285_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_285_0(this_rewriter); }

  static inline data_expression rewr_285_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_285_0(this_rewriter); }


  // [284] !=: (List(HistoryLogEntry) -> List(Trans)) # (List(HistoryLogEntry) -> List(Trans)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_284_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_283_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921180))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_284_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_284_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_284_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_284_2(t[0], t[1], this_rewriter); }


  // [284] !=: (List(HistoryLogEntry) -> List(Trans)) # (List(HistoryLogEntry) -> List(Trans)) -> Bool
  static inline const data_expression& rewr_284_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3c080);
  }

  static inline data_expression rewr_284_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_284_0(this_rewriter); }

  static inline data_expression rewr_284_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_284_0(this_rewriter); }


  // [283] ==: (List(HistoryLogEntry) -> List(Trans)) # (List(HistoryLogEntry) -> List(Trans)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_283_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: List(HistoryLogEntry). @var_0(x1) == @var_1(x1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(11), rewr_149_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(16))), this_rewriter), rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(16))), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: List(HistoryLogEntry). @var_0(x1) == @var_1(x1)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921150))), arg0, arg1);
  }

  static inline data_expression rewr_283_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_283_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_283_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_283_2(t[0], t[1], this_rewriter); }


  // [283] ==: (List(HistoryLogEntry) -> List(Trans)) # (List(HistoryLogEntry) -> List(Trans)) -> Bool
  static inline const data_expression& rewr_283_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa3110);
  }

  static inline data_expression rewr_283_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_283_0(this_rewriter); }

  static inline data_expression rewr_283_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_283_0(this_rewriter); }


  // [282] @if_always_else: Bool # (List(HistoryLogEntry) -> List(Trans)) # (List(HistoryLogEntry) -> List(Trans)) -> List(HistoryLogEntry) -> List(Trans)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_282_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return rewrite_aux(application(if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter)), local_rewrite(arg_not_nf3,this_rewriter)),true,this_rewriter);  }

  static inline data_expression rewr_282_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_282_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_282_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_282_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [282] @if_always_else: Bool # (List(HistoryLogEntry) -> List(Trans)) # (List(HistoryLogEntry) -> List(Trans)) -> List(HistoryLogEntry) -> List(Trans)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_282_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter));  }

  static inline data_expression rewr_282_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_282_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_282_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_282_3(t[0], t[1], t[2], this_rewriter); }


  // [282] @if_always_else: Bool # (List(HistoryLogEntry) -> List(Trans)) # (List(HistoryLogEntry) -> List(Trans)) -> List(HistoryLogEntry) -> List(Trans)
  static inline const data_expression& rewr_282_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3c0e0);
  }

  static inline data_expression rewr_282_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_282_0(this_rewriter); }

  static inline data_expression rewr_282_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_282_0(this_rewriter); }


  // [281] @is_not_an_update: (List(HistoryLogEntry) -> List(Trans)) -> Bool
  template < class DATA_EXPR0>
  static inline data_expression rewr_281_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @is_not_an_update by calling a user defined rewrite function.
    return is_not_a_function_update_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter));  }

  static inline data_expression rewr_281_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_281_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_281_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_281_1(t[0], this_rewriter); }


  // [281] @is_not_an_update: (List(HistoryLogEntry) -> List(Trans)) -> Bool
  static inline const data_expression& rewr_281_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3c110);
  }

  static inline data_expression rewr_281_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_281_0(this_rewriter); }

  static inline data_expression rewr_281_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_281_0(this_rewriter); }


  // [280] @func_update_stable: (List(HistoryLogEntry) -> List(Trans)) # List(HistoryLogEntry) # List(Trans) -> List(HistoryLogEntry) -> List(Trans)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_280_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const data_expression& var_1 = arg1; // S1a
      const DATA_EXPR2& var_2 = arg_not_nf2; // S1b
      const data_expression& var_3 = arg3; // S1a
      if (rewr_135_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return local_rewrite(var_2, this_rewriter); // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921000))), local_rewrite(arg_not_nf0,this_rewriter), arg1, local_rewrite(arg_not_nf2,this_rewriter)), arg3);
  }

  static inline data_expression rewr_280_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_280_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_280_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_280_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [280] @func_update_stable: (List(HistoryLogEntry) -> List(Trans)) # List(HistoryLogEntry) # List(Trans) -> List(HistoryLogEntry) -> List(Trans)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_280_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf921000))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter), local_rewrite(arg_not_nf2,this_rewriter));
  }

  static inline data_expression rewr_280_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_280_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_280_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_280_3(t[0], t[1], t[2], this_rewriter); }


  // [280] @func_update_stable: (List(HistoryLogEntry) -> List(Trans)) # List(HistoryLogEntry) # List(Trans) -> List(HistoryLogEntry) -> List(Trans)
  static inline const data_expression& rewr_280_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf965ec0);
  }

  static inline data_expression rewr_280_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_280_0(this_rewriter); }

  static inline data_expression rewr_280_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_280_0(this_rewriter); }


  // [279] @func_update: (List(HistoryLogEntry) -> List(Trans)) # List(HistoryLogEntry) # List(Trans) -> List(HistoryLogEntry) -> List(Trans)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_279_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)), @@X))))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf921000) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_5 = arg_not_nf3; // S1b
        if (rewr_132_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_280_4(delayed_rewr_279_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2, local_rewrite(var_5, this_rewriter),  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@N(@@S(@var_6, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)))))), @@N(@@S(@var_5, @@N(@@S(@var_6, @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)), @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)), @@X))))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf921000) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          return rewr_282_4(rewr_149_2(rewrite_with_arguments_in_normal_form(application(var_1, var_2), this_rewriter), var_5,  this_rewriter), var_1, rewr_280_3(var_1, var_2, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          if (rewr_132_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_282_4(rewr_149_2(rewrite_with_arguments_in_normal_form(application(var_1, var_4), this_rewriter), var_5,  this_rewriter), rewr_280_3(var_1, var_2, var_3,  this_rewriter), rewr_280_3(delayed_rewr_280_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)
          }
          else
          {
            if (rewr_281_1(var_0,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_282_4(rewr_149_2(rewrite_with_arguments_in_normal_form(application(var_0, var_4), this_rewriter), var_5,  this_rewriter), var_0, rewr_280_3(var_0, var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        const DATA_EXPR3& var_3 = arg_not_nf3; // S1b
        if (rewr_281_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_282_4(rewr_149_2(rewrite_with_arguments_in_normal_form(application(var_0, var_1), this_rewriter), var_2,  this_rewriter), var_0, rewr_280_3(var_0, var_1, var_2,  this_rewriter), local_rewrite(var_3, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)
        }
        else
        {
        }
      }
    }
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      const data_expression& var_2 = arg2; // S1a
      const data_expression& var_3 = arg3; // S1a
      if (rewr_135_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(var_0, var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return var_2; // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf920fd0))), arg0, arg1, arg2), arg3);
  }

  static inline data_expression rewr_279_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_279_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_279_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_279_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [280] @func_update_stable: (List(HistoryLogEntry) -> List(Trans)) # List(HistoryLogEntry) # List(Trans) -> List(HistoryLogEntry) -> List(Trans)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_280_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_280_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_280_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [279] @func_update: (List(HistoryLogEntry) -> List(Trans)) # List(HistoryLogEntry) # List(Trans) -> List(HistoryLogEntry) -> List(Trans)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_279_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_279_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_279_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [279] @func_update: (List(HistoryLogEntry) -> List(Trans)) # List(HistoryLogEntry) # List(Trans) -> List(HistoryLogEntry) -> List(Trans)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_279_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2]), @@X))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf921000) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        if (rewr_132_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_280_3(delayed_rewr_279_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2,  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2]
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])))), @@N(@@S(@var_5, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])), @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])), @@X))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf921000) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          return rewr_282_3(rewr_149_2(rewrite_with_arguments_in_normal_form(application(var_1, var_2), this_rewriter), var_5,  this_rewriter), var_1, rewr_280_3(var_1, var_2, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          if (rewr_281_1(var_0,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_282_3(rewr_149_2(rewrite_with_arguments_in_normal_form(application(var_0, var_4), this_rewriter), var_5,  this_rewriter), var_0, rewr_280_3(var_0, var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])
          }
          else
          {
            if (rewr_132_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_282_3(rewr_149_2(rewrite_with_arguments_in_normal_form(application(var_1, var_4), this_rewriter), var_5,  this_rewriter), rewr_280_3(var_1, var_2, var_3,  this_rewriter), rewr_280_3(delayed_rewr_280_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        if (rewr_281_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_282_3(rewr_149_2(rewrite_with_arguments_in_normal_form(application(var_0, var_1), this_rewriter), var_2,  this_rewriter), var_0, rewr_280_3(var_0, var_1, var_2,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf920fd0))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_279_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_279_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_279_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_279_3(t[0], t[1], t[2], this_rewriter); }


  // [279] @func_update: (List(HistoryLogEntry) -> List(Trans)) # List(HistoryLogEntry) # List(Trans) -> List(HistoryLogEntry) -> List(Trans)
  static inline const data_expression& rewr_279_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3ba50);
  }

  static inline data_expression rewr_279_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_279_0(this_rewriter); }

  static inline data_expression rewr_279_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_279_0(this_rewriter); }


  // [278] >: (Trans # Trans # Trans # Trans -> List(Trans)) # (Trans # Trans # Trans # Trans -> List(Trans)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_278_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_275_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf920be0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_278_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_278_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_278_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_278_2(t[0], t[1], this_rewriter); }


  // [278] >: (Trans # Trans # Trans # Trans -> List(Trans)) # (Trans # Trans # Trans # Trans -> List(Trans)) -> Bool
  static inline const data_expression& rewr_278_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3d7f0);
  }

  static inline data_expression rewr_278_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_278_0(this_rewriter); }

  static inline data_expression rewr_278_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_278_0(this_rewriter); }


  // [277] >=: (Trans # Trans # Trans # Trans -> List(Trans)) # (Trans # Trans # Trans # Trans -> List(Trans)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_277_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_276_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf920bb0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_277_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_277_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_277_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_277_2(t[0], t[1], this_rewriter); }


  // [277] >=: (Trans # Trans # Trans # Trans -> List(Trans)) # (Trans # Trans # Trans # Trans -> List(Trans)) -> Bool
  static inline const data_expression& rewr_277_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3c140);
  }

  static inline data_expression rewr_277_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_277_0(this_rewriter); }

  static inline data_expression rewr_277_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_277_0(this_rewriter); }


  // [276] <=: (Trans # Trans # Trans # Trans -> List(Trans)) # (Trans # Trans # Trans # Trans -> List(Trans)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_276_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf920b80))), arg0, arg1);
  }

  static inline data_expression rewr_276_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_276_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_276_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_276_2(t[0], t[1], this_rewriter); }


  // [276] <=: (Trans # Trans # Trans # Trans -> List(Trans)) # (Trans # Trans # Trans # Trans -> List(Trans)) -> Bool
  static inline const data_expression& rewr_276_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3c230);
  }

  static inline data_expression rewr_276_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_276_0(this_rewriter); }

  static inline data_expression rewr_276_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_276_0(this_rewriter); }


  // [275] <: (Trans # Trans # Trans # Trans -> List(Trans)) # (Trans # Trans # Trans # Trans -> List(Trans)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_275_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf920b50))), arg0, arg1);
  }

  static inline data_expression rewr_275_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_275_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_275_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_275_2(t[0], t[1], this_rewriter); }


  // [275] <: (Trans # Trans # Trans # Trans -> List(Trans)) # (Trans # Trans # Trans # Trans -> List(Trans)) -> Bool
  static inline const data_expression& rewr_275_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa4260);
  }

  static inline data_expression rewr_275_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_275_0(this_rewriter); }

  static inline data_expression rewr_275_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_275_0(this_rewriter); }


  // [274] if: Bool # (Trans # Trans # Trans # Trans -> List(Trans)) # (Trans # Trans # Trans # Trans -> List(Trans)) -> Trans # Trans # Trans # Trans -> List(Trans)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4, class DATA_EXPR5, class DATA_EXPR6>
  static inline data_expression rewr_274_7(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, const DATA_EXPR5& arg_not_nf5, const DATA_EXPR6& arg_not_nf6, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@R(@var_1(@var_2, @var_3, @var_4, @var_5)))))))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@R(@var_0(@var_2, @var_3, @var_4, @var_5)))))))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        const DATA_EXPR5& var_4 = arg_not_nf5; // S1b
        const DATA_EXPR6& var_5 = arg_not_nf6; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter), local_rewrite(var_4, this_rewriter), local_rewrite(var_5, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3, @var_4, @var_5)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          const DATA_EXPR5& var_4 = arg_not_nf5; // S1b
          const DATA_EXPR6& var_5 = arg_not_nf6; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter), local_rewrite(var_4, this_rewriter), local_rewrite(var_5, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3, @var_4, @var_5)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@R(@var_1(@var_2, @var_3, @var_4, @var_5)))))))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        const DATA_EXPR5& var_4 = arg_not_nf5; // S1b
        const DATA_EXPR6& var_5 = arg_not_nf6; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter), local_rewrite(var_4, this_rewriter), local_rewrite(var_5, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3, @var_4, @var_5)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf920b20))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter), local_rewrite(arg_not_nf5,this_rewriter), local_rewrite(arg_not_nf6,this_rewriter));
  }

  static inline data_expression rewr_274_7_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_274_7(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), term_not_in_normal_form(t[3], this_rewriter), this_rewriter); }

  static inline data_expression rewr_274_7_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_274_7(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], t[2], t[3], this_rewriter); }


  // [274] if: Bool # (Trans # Trans # Trans # Trans -> List(Trans)) # (Trans # Trans # Trans # Trans -> List(Trans)) -> Trans # Trans # Trans # Trans -> List(Trans)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_274_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf920b20))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_274_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_274_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_274_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_274_3(t[0], t[1], t[2], this_rewriter); }


  // [274] if: Bool # (Trans # Trans # Trans # Trans -> List(Trans)) # (Trans # Trans # Trans # Trans -> List(Trans)) -> Trans # Trans # Trans # Trans -> List(Trans)
  static inline const data_expression& rewr_274_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3c0b0);
  }

  static inline data_expression rewr_274_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_274_0(this_rewriter); }

  static inline data_expression rewr_274_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_274_0(this_rewriter); }


  // [273] !=: (Trans # Trans # Trans # Trans -> List(Trans)) # (Trans # Trans # Trans # Trans -> List(Trans)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_273_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_272_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf920af0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_273_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_273_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_273_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_273_2(t[0], t[1], this_rewriter); }


  // [273] !=: (Trans # Trans # Trans # Trans -> List(Trans)) # (Trans # Trans # Trans # Trans -> List(Trans)) -> Bool
  static inline const data_expression& rewr_273_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa5160);
  }

  static inline data_expression rewr_273_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_273_0(this_rewriter); }

  static inline data_expression rewr_273_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_273_0(this_rewriter); }


  // [272] ==: (Trans # Trans # Trans # Trans -> List(Trans)) # (Trans # Trans # Trans # Trans -> List(Trans)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_272_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1,x2,x3,x7: Trans. @var_0(x1, x2, x3, x7) == @var_1(x1, x2, x3, x7)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(21), rewr_149_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(12)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(25)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(13)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(26))), this_rewriter), rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(12)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(25)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(13)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(26))), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1,x2,x3,x7: Trans. @var_0(x1, x2, x3, x7) == @var_1(x1, x2, x3, x7)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf920ac0))), arg0, arg1);
  }

  static inline data_expression rewr_272_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_272_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_272_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_272_2(t[0], t[1], this_rewriter); }


  // [272] ==: (Trans # Trans # Trans # Trans -> List(Trans)) # (Trans # Trans # Trans # Trans -> List(Trans)) -> Bool
  static inline const data_expression& rewr_272_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf965ef0);
  }

  static inline data_expression rewr_272_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_272_0(this_rewriter); }

  static inline data_expression rewr_272_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_272_0(this_rewriter); }


  // [270] >: (List(Nat) # List(Nat) -> Bool) # (List(Nat) # List(Nat) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_270_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_267_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9206d0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_270_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_270_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_270_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_270_2(t[0], t[1], this_rewriter); }


  // [270] >: (List(Nat) # List(Nat) -> Bool) # (List(Nat) # List(Nat) -> Bool) -> Bool
  static inline const data_expression& rewr_270_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf9931d0);
  }

  static inline data_expression rewr_270_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_270_0(this_rewriter); }

  static inline data_expression rewr_270_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_270_0(this_rewriter); }


  // [269] >=: (List(Nat) # List(Nat) -> Bool) # (List(Nat) # List(Nat) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_269_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_268_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9206a0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_269_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_269_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_269_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_269_2(t[0], t[1], this_rewriter); }


  // [269] >=: (List(Nat) # List(Nat) -> Bool) # (List(Nat) # List(Nat) -> Bool) -> Bool
  static inline const data_expression& rewr_269_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa5190);
  }

  static inline data_expression rewr_269_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_269_0(this_rewriter); }

  static inline data_expression rewr_269_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_269_0(this_rewriter); }


  // [268] <=: (List(Nat) # List(Nat) -> Bool) # (List(Nat) # List(Nat) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_268_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf920670))), arg0, arg1);
  }

  static inline data_expression rewr_268_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_268_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_268_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_268_2(t[0], t[1], this_rewriter); }


  // [268] <=: (List(Nat) # List(Nat) -> Bool) # (List(Nat) # List(Nat) -> Bool) -> Bool
  static inline const data_expression& rewr_268_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf993200);
  }

  static inline data_expression rewr_268_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_268_0(this_rewriter); }

  static inline data_expression rewr_268_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_268_0(this_rewriter); }


  // [267] <: (List(Nat) # List(Nat) -> Bool) # (List(Nat) # List(Nat) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_267_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf920640))), arg0, arg1);
  }

  static inline data_expression rewr_267_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_267_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_267_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_267_2(t[0], t[1], this_rewriter); }


  // [267] <: (List(Nat) # List(Nat) -> Bool) # (List(Nat) # List(Nat) -> Bool) -> Bool
  static inline const data_expression& rewr_267_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf993a70);
  }

  static inline data_expression rewr_267_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_267_0(this_rewriter); }

  static inline data_expression rewr_267_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_267_0(this_rewriter); }


  // [266] if: Bool # (List(Nat) # List(Nat) -> Bool) # (List(Nat) # List(Nat) -> Bool) -> List(Nat) # List(Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_266_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_0(@var_2, @var_3)))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf920610))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_266_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_266_5(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_266_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_266_5(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], this_rewriter); }


  // [266] if: Bool # (List(Nat) # List(Nat) -> Bool) # (List(Nat) # List(Nat) -> Bool) -> List(Nat) # List(Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_266_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf920610))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_266_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_266_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_266_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_266_3(t[0], t[1], t[2], this_rewriter); }


  // [266] if: Bool # (List(Nat) # List(Nat) -> Bool) # (List(Nat) # List(Nat) -> Bool) -> List(Nat) # List(Nat) -> Bool
  static inline const data_expression& rewr_266_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3cf90);
  }

  static inline data_expression rewr_266_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_266_0(this_rewriter); }

  static inline data_expression rewr_266_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_266_0(this_rewriter); }


  // [265] !=: (List(Nat) # List(Nat) -> Bool) # (List(Nat) # List(Nat) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_265_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_264_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9205e0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_265_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_265_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_265_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_265_2(t[0], t[1], this_rewriter); }


  // [265] !=: (List(Nat) # List(Nat) -> Bool) # (List(Nat) # List(Nat) -> Bool) -> Bool
  static inline const data_expression& rewr_265_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2b910);
  }

  static inline data_expression rewr_265_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_265_0(this_rewriter); }

  static inline data_expression rewr_265_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_265_0(this_rewriter); }


  // [264] ==: (List(Nat) # List(Nat) -> Bool) # (List(Nat) # List(Nat) -> Bool) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_264_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1,x3: List(Nat). @var_0(x1, x3) == @var_1(x1, x3)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(15), rewr_271_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(21)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(18))), this_rewriter), delayed_application2<data_expression,data_expression,data_expression>(local_rewrite(var_1, this_rewriter),static_cast<const data_expression&>(this_rewriter->bound_variable_get(21)),static_cast<const data_expression&>(this_rewriter->bound_variable_get(18)), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1,x3: List(Nat). @var_0(x1, x3) == @var_1(x1, x3)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9205b0))), arg0, arg1);
  }

  static inline data_expression rewr_264_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_264_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_264_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_264_2(t[0], t[1], this_rewriter); }


  // [264] ==: (List(Nat) # List(Nat) -> Bool) # (List(Nat) # List(Nat) -> Bool) -> Bool
  static inline const data_expression& rewr_264_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2b970);
  }

  static inline data_expression rewr_264_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_264_0(this_rewriter); }

  static inline data_expression rewr_264_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_264_0(this_rewriter); }


  // [263] >: (List(HistoryLogEntry) -> Place -> List(Nat)) # (List(HistoryLogEntry) -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_263_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_260_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf920280))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_263_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_263_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_263_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_263_2(t[0], t[1], this_rewriter); }


  // [263] >: (List(HistoryLogEntry) -> Place -> List(Nat)) # (List(HistoryLogEntry) -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_263_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf992f70);
  }

  static inline data_expression rewr_263_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_263_0(this_rewriter); }

  static inline data_expression rewr_263_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_263_0(this_rewriter); }


  // [262] >=: (List(HistoryLogEntry) -> Place -> List(Nat)) # (List(HistoryLogEntry) -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_262_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_261_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf920250))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_262_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_262_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_262_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_262_2(t[0], t[1], this_rewriter); }


  // [262] >=: (List(HistoryLogEntry) -> Place -> List(Nat)) # (List(HistoryLogEntry) -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_262_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2b9a0);
  }

  static inline data_expression rewr_262_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_262_0(this_rewriter); }

  static inline data_expression rewr_262_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_262_0(this_rewriter); }


  // [261] <=: (List(HistoryLogEntry) -> Place -> List(Nat)) # (List(HistoryLogEntry) -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_261_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf920220))), arg0, arg1);
  }

  static inline data_expression rewr_261_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_261_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_261_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_261_2(t[0], t[1], this_rewriter); }


  // [261] <=: (List(HistoryLogEntry) -> Place -> List(Nat)) # (List(HistoryLogEntry) -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_261_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2b8b0);
  }

  static inline data_expression rewr_261_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_261_0(this_rewriter); }

  static inline data_expression rewr_261_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_261_0(this_rewriter); }


  // [260] <: (List(HistoryLogEntry) -> Place -> List(Nat)) # (List(HistoryLogEntry) -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_260_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9201f0))), arg0, arg1);
  }

  static inline data_expression rewr_260_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_260_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_260_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_260_2(t[0], t[1], this_rewriter); }


  // [260] <: (List(HistoryLogEntry) -> Place -> List(Nat)) # (List(HistoryLogEntry) -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_260_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2b9d0);
  }

  static inline data_expression rewr_260_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_260_0(this_rewriter); }

  static inline data_expression rewr_260_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_260_0(this_rewriter); }


  // [259] if: Bool # (List(HistoryLogEntry) -> Place -> List(Nat)) # (List(HistoryLogEntry) -> Place -> List(Nat)) -> List(HistoryLogEntry) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_259_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2)(@var_3)))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_0(@var_2)(@var_3)))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter)), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)(@var_3)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          return rewrite_with_arguments_in_normal_form(application(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter)), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_0(@var_2)(@var_3)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2)(@var_3)))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(application(var_1, local_rewrite(var_2, this_rewriter)), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)(@var_3)
      }
      else
      {
      }
    }
    return application(application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9201c0))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter)), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_259_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_259_5(term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[2], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_259_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_259_5(down_cast<application>(down_cast<application>(t.head()).head())[0], down_cast<application>(down_cast<application>(t.head()).head())[1], down_cast<application>(down_cast<application>(t.head()).head())[2], down_cast<application>(t.head())[0], t[0], this_rewriter); }


  // [259] if: Bool # (List(HistoryLogEntry) -> Place -> List(Nat)) # (List(HistoryLogEntry) -> Place -> List(Nat)) -> List(HistoryLogEntry) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_259_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@R(@var_0(@var_2)))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_0(@var_2)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9201c0))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter));
  }

  static inline data_expression rewr_259_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_259_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_259_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_259_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [259] if: Bool # (List(HistoryLogEntry) -> Place -> List(Nat)) # (List(HistoryLogEntry) -> Place -> List(Nat)) -> List(HistoryLogEntry) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_259_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9201c0))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_259_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_259_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_259_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_259_3(t[0], t[1], t[2], this_rewriter); }


  // [259] if: Bool # (List(HistoryLogEntry) -> Place -> List(Nat)) # (List(HistoryLogEntry) -> Place -> List(Nat)) -> List(HistoryLogEntry) -> Place -> List(Nat)
  static inline const data_expression& rewr_259_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3aac0);
  }

  static inline data_expression rewr_259_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_259_0(this_rewriter); }

  static inline data_expression rewr_259_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_259_0(this_rewriter); }


  // [258] !=: (List(HistoryLogEntry) -> Place -> List(Nat)) # (List(HistoryLogEntry) -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_258_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_257_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf920190))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_258_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_258_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_258_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_258_2(t[0], t[1], this_rewriter); }


  // [258] !=: (List(HistoryLogEntry) -> Place -> List(Nat)) # (List(HistoryLogEntry) -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_258_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3ab80);
  }

  static inline data_expression rewr_258_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_258_0(this_rewriter); }

  static inline data_expression rewr_258_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_258_0(this_rewriter); }


  // [257] ==: (List(HistoryLogEntry) -> Place -> List(Nat)) # (List(HistoryLogEntry) -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_257_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: List(HistoryLogEntry). @var_0(x1) == @var_1(x1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(11), rewr_182_2(delayed_application1<data_expression,data_expression>(local_rewrite(var_0, this_rewriter),static_cast<const data_expression&>(this_rewriter->bound_variable_get(16)), this_rewriter), delayed_application1<data_expression,data_expression>(local_rewrite(var_1, this_rewriter),static_cast<const data_expression&>(this_rewriter->bound_variable_get(16)), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: List(HistoryLogEntry). @var_0(x1) == @var_1(x1)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf920160))), arg0, arg1);
  }

  static inline data_expression rewr_257_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_257_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_257_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_257_2(t[0], t[1], this_rewriter); }


  // [257] ==: (List(HistoryLogEntry) -> Place -> List(Nat)) # (List(HistoryLogEntry) -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_257_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3ac40);
  }

  static inline data_expression rewr_257_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_257_0(this_rewriter); }

  static inline data_expression rewr_257_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_257_0(this_rewriter); }


  // [256] @if_always_else: Bool # (List(HistoryLogEntry) -> Place -> List(Nat)) # (List(HistoryLogEntry) -> Place -> List(Nat)) -> List(HistoryLogEntry) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_256_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return rewrite_aux(application(application(if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter)), local_rewrite(arg_not_nf3,this_rewriter)), local_rewrite(arg_not_nf4,this_rewriter)),true,this_rewriter);  }

  static inline data_expression rewr_256_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_256_5(term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[2], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_256_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_256_5(down_cast<application>(down_cast<application>(t.head()).head())[0], down_cast<application>(down_cast<application>(t.head()).head())[1], down_cast<application>(down_cast<application>(t.head()).head())[2], down_cast<application>(t.head())[0], t[0], this_rewriter); }


  // [256] @if_always_else: Bool # (List(HistoryLogEntry) -> Place -> List(Nat)) # (List(HistoryLogEntry) -> Place -> List(Nat)) -> List(HistoryLogEntry) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_256_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return rewrite_aux(application(if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter)), local_rewrite(arg_not_nf3,this_rewriter)),true,this_rewriter);  }

  static inline data_expression rewr_256_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_256_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_256_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_256_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [256] @if_always_else: Bool # (List(HistoryLogEntry) -> Place -> List(Nat)) # (List(HistoryLogEntry) -> Place -> List(Nat)) -> List(HistoryLogEntry) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_256_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter));  }

  static inline data_expression rewr_256_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_256_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_256_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_256_3(t[0], t[1], t[2], this_rewriter); }


  // [256] @if_always_else: Bool # (List(HistoryLogEntry) -> Place -> List(Nat)) # (List(HistoryLogEntry) -> Place -> List(Nat)) -> List(HistoryLogEntry) -> Place -> List(Nat)
  static inline const data_expression& rewr_256_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3aaf0);
  }

  static inline data_expression rewr_256_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_256_0(this_rewriter); }

  static inline data_expression rewr_256_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_256_0(this_rewriter); }


  // [255] @is_not_an_update: (List(HistoryLogEntry) -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0>
  static inline data_expression rewr_255_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @is_not_an_update by calling a user defined rewrite function.
    return is_not_a_function_update_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter));  }

  static inline data_expression rewr_255_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_255_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_255_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_255_1(t[0], this_rewriter); }


  // [255] @is_not_an_update: (List(HistoryLogEntry) -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_255_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3ac70);
  }

  static inline data_expression rewr_255_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_255_0(this_rewriter); }

  static inline data_expression rewr_255_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_255_0(this_rewriter); }


  // [254] @func_update_stable: (List(HistoryLogEntry) -> Place -> List(Nat)) # List(HistoryLogEntry) # (Place -> List(Nat)) -> List(HistoryLogEntry) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_254_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@M(@var_1, @@N(@@S(@var_4, @@R(@var_2(@var_4)))), @@N(@@S(@var_4, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)(@var_4)), @@X)))))))))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const data_expression& var_1 = arg1; // S1a
      const DATA_EXPR2& var_2 = arg_not_nf2; // S1b
      const data_expression& var_3 = arg3; // S1a
      if (var_1 == arg3) // M
      {
        const DATA_EXPR4& var_4 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_2, this_rewriter), local_rewrite(var_4, this_rewriter)), this_rewriter); // R1 @var_2(@var_4)
      }
      else
      {
        const DATA_EXPR4& var_4 = arg_not_nf4; // S1b
        if (rewr_135_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewrite_with_arguments_in_normal_form(application(application(local_rewrite(var_0, this_rewriter), var_3), local_rewrite(var_4, this_rewriter)), this_rewriter); // R1 @var_0(@var_3)(@var_4)
        }
        else
        {
        }
      }
    }
    return application(application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91ffe0))), local_rewrite(arg_not_nf0,this_rewriter), arg1, local_rewrite(arg_not_nf2,this_rewriter)), arg3), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_254_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_254_5(term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[2], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_254_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_254_5(down_cast<application>(down_cast<application>(t.head()).head())[0], down_cast<application>(down_cast<application>(t.head()).head())[1], down_cast<application>(down_cast<application>(t.head()).head())[2], down_cast<application>(t.head())[0], t[0], this_rewriter); }


  // [254] @func_update_stable: (List(HistoryLogEntry) -> Place -> List(Nat)) # List(HistoryLogEntry) # (Place -> List(Nat)) -> List(HistoryLogEntry) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_254_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const data_expression& var_1 = arg1; // S1a
      const DATA_EXPR2& var_2 = arg_not_nf2; // S1b
      const data_expression& var_3 = arg3; // S1a
      if (rewr_135_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return local_rewrite(var_2, this_rewriter); // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91ffe0))), local_rewrite(arg_not_nf0,this_rewriter), arg1, local_rewrite(arg_not_nf2,this_rewriter)), arg3);
  }

  static inline data_expression rewr_254_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_254_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_254_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_254_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [254] @func_update_stable: (List(HistoryLogEntry) -> Place -> List(Nat)) # List(HistoryLogEntry) # (Place -> List(Nat)) -> List(HistoryLogEntry) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_254_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91ffe0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter), local_rewrite(arg_not_nf2,this_rewriter));
  }

  static inline data_expression rewr_254_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_254_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_254_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_254_3(t[0], t[1], t[2], this_rewriter); }


  // [254] @func_update_stable: (List(HistoryLogEntry) -> Place -> List(Nat)) # List(HistoryLogEntry) # (Place -> List(Nat)) -> List(HistoryLogEntry) -> Place -> List(Nat)
  static inline const data_expression& rewr_254_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf993060);
  }

  static inline data_expression rewr_254_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_254_0(this_rewriter); }

  static inline data_expression rewr_254_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_254_0(this_rewriter); }


  // [253] @func_update: (List(HistoryLogEntry) -> Place -> List(Nat)) # List(HistoryLogEntry) # (Place -> List(Nat)) -> List(HistoryLogEntry) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_253_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@N(@@S(@var_6, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)(@var_6)), @@X))))))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91ffe0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_5 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_6 = arg_not_nf4; // S1b
        if (rewr_132_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_254_5(delayed_rewr_253_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2, local_rewrite(var_5, this_rewriter), var_6,  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)(@var_6)
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@N(@@S(@var_6, @@N(@@S(@var_7, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)(@var_7)))))))), @@N(@@S(@var_5, @@N(@@S(@var_6, @@N(@@S(@var_7, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)(@var_7)), @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)(@var_7)), @@X))))))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)(@var_4)), @@X)))))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91ffe0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_7 = arg_not_nf4; // S1b
          return rewr_256_5(rewr_182_2(delayed_application1<data_expression,data_expression>(var_1,var_2, this_rewriter), var_5,  this_rewriter), var_1, rewr_254_3(var_1, var_2, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter), local_rewrite(var_7, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)(@var_7)
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_7 = arg_not_nf4; // S1b
          if (rewr_255_1(var_0,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_256_5(rewr_182_2(delayed_application1<data_expression,data_expression>(var_0,var_4, this_rewriter), var_5,  this_rewriter), var_0, rewr_254_3(var_0, var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter), local_rewrite(var_7, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)(@var_7)
          }
          else
          {
            if (rewr_132_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_256_5(rewr_182_2(delayed_application1<data_expression,data_expression>(var_1,var_4, this_rewriter), var_5,  this_rewriter), rewr_254_3(var_1, var_2, var_3,  this_rewriter), rewr_254_3(delayed_rewr_254_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter), local_rewrite(var_7, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)(@var_7)
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        const DATA_EXPR3& var_3 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_4 = arg_not_nf4; // S1b
        if (rewr_255_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_256_5(rewr_182_2(delayed_application1<data_expression,data_expression>(var_0,var_1, this_rewriter), var_2,  this_rewriter), var_0, rewr_254_3(var_0, var_1, var_2,  this_rewriter), local_rewrite(var_3, this_rewriter), local_rewrite(var_4, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)(@var_4)
        }
        else
        {
        }
      }
    }
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@M(@var_1, @@N(@@S(@var_4, @@R(@var_2(@var_4)))), @@N(@@S(@var_4, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)(@var_4)), @@X)))))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      const data_expression& var_2 = arg2; // S1a
      const data_expression& var_3 = arg3; // S1a
      if (var_1 == arg3) // M
      {
        const DATA_EXPR4& var_4 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_2, local_rewrite(var_4, this_rewriter)), this_rewriter); // R1 @var_2(@var_4)
      }
      else
      {
        const DATA_EXPR4& var_4 = arg_not_nf4; // S1b
        if (rewr_135_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewrite_with_arguments_in_normal_form(application(application(var_0, var_3), local_rewrite(var_4, this_rewriter)), this_rewriter); // R1 @var_0(@var_3)(@var_4)
        }
        else
        {
        }
      }
    }
    return application(application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91ffb0))), arg0, arg1, arg2), arg3), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_253_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_253_5(term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[2], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_253_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_253_5(down_cast<application>(down_cast<application>(t.head()).head())[0], down_cast<application>(down_cast<application>(t.head()).head())[1], down_cast<application>(down_cast<application>(t.head()).head())[2], down_cast<application>(t.head())[0], t[0], this_rewriter); }


  // [254] @func_update_stable: (List(HistoryLogEntry) -> Place -> List(Nat)) # List(HistoryLogEntry) # (Place -> List(Nat)) -> List(HistoryLogEntry) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_254_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_254_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_254_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [253] @func_update: (List(HistoryLogEntry) -> Place -> List(Nat)) # List(HistoryLogEntry) # (Place -> List(Nat)) -> List(HistoryLogEntry) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_253_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_253_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_253_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [253] @func_update: (List(HistoryLogEntry) -> Place -> List(Nat)) # List(HistoryLogEntry) # (Place -> List(Nat)) -> List(HistoryLogEntry) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_253_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)), @@X))))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91ffe0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_5 = arg_not_nf3; // S1b
        if (rewr_132_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_254_4(delayed_rewr_253_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2, local_rewrite(var_5, this_rewriter),  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@N(@@S(@var_6, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)))))), @@N(@@S(@var_5, @@N(@@S(@var_6, @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)), @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)), @@X))))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91ffe0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          return rewr_256_4(rewr_182_2(delayed_application1<data_expression,data_expression>(var_1,var_2, this_rewriter), var_5,  this_rewriter), var_1, rewr_254_3(var_1, var_2, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          if (rewr_132_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_256_4(rewr_182_2(delayed_application1<data_expression,data_expression>(var_1,var_4, this_rewriter), var_5,  this_rewriter), rewr_254_3(var_1, var_2, var_3,  this_rewriter), rewr_254_3(delayed_rewr_254_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)
          }
          else
          {
            if (rewr_255_1(var_0,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_256_4(rewr_182_2(delayed_application1<data_expression,data_expression>(var_0,var_4, this_rewriter), var_5,  this_rewriter), var_0, rewr_254_3(var_0, var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        const DATA_EXPR3& var_3 = arg_not_nf3; // S1b
        if (rewr_255_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_256_4(rewr_182_2(delayed_application1<data_expression,data_expression>(var_0,var_1, this_rewriter), var_2,  this_rewriter), var_0, rewr_254_3(var_0, var_1, var_2,  this_rewriter), local_rewrite(var_3, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)
        }
        else
        {
        }
      }
    }
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      const data_expression& var_2 = arg2; // S1a
      const data_expression& var_3 = arg3; // S1a
      if (rewr_135_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(var_0, var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return var_2; // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91ffb0))), arg0, arg1, arg2), arg3);
  }

  static inline data_expression rewr_253_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_253_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_253_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_253_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [253] @func_update: (List(HistoryLogEntry) -> Place -> List(Nat)) # List(HistoryLogEntry) # (Place -> List(Nat)) -> List(HistoryLogEntry) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_253_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2]), @@X))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91ffe0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        if (rewr_132_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_254_3(delayed_rewr_253_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2,  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2]
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])))), @@N(@@S(@var_5, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])), @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])), @@X))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91ffe0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          return rewr_256_3(rewr_182_2(delayed_application1<data_expression,data_expression>(var_1,var_2, this_rewriter), var_5,  this_rewriter), var_1, rewr_254_3(var_1, var_2, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          if (rewr_255_1(var_0,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_256_3(rewr_182_2(delayed_application1<data_expression,data_expression>(var_0,var_4, this_rewriter), var_5,  this_rewriter), var_0, rewr_254_3(var_0, var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])
          }
          else
          {
            if (rewr_132_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_256_3(rewr_182_2(delayed_application1<data_expression,data_expression>(var_1,var_4, this_rewriter), var_5,  this_rewriter), rewr_254_3(var_1, var_2, var_3,  this_rewriter), rewr_254_3(delayed_rewr_254_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        if (rewr_255_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_256_3(rewr_182_2(delayed_application1<data_expression,data_expression>(var_0,var_1, this_rewriter), var_2,  this_rewriter), var_0, rewr_254_3(var_0, var_1, var_2,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91ffb0))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_253_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_253_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_253_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_253_3(t[0], t[1], t[2], this_rewriter); }


  // [253] @func_update: (List(HistoryLogEntry) -> Place -> List(Nat)) # List(HistoryLogEntry) # (Place -> List(Nat)) -> List(HistoryLogEntry) -> Place -> List(Nat)
  static inline const data_expression& rewr_253_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3a4d0);
  }

  static inline data_expression rewr_253_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_253_0(this_rewriter); }

  static inline data_expression rewr_253_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_253_0(this_rewriter); }


  // [252] >: (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) # (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_252_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_249_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91fbc0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_252_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_252_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_252_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_252_2(t[0], t[1], this_rewriter); }


  // [252] >: (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) # (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) -> Bool
  static inline const data_expression& rewr_252_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa31a0);
  }

  static inline data_expression rewr_252_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_252_0(this_rewriter); }

  static inline data_expression rewr_252_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_252_0(this_rewriter); }


  // [251] >=: (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) # (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_251_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_250_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91fb90))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_251_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_251_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_251_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_251_2(t[0], t[1], this_rewriter); }


  // [251] >=: (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) # (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) -> Bool
  static inline const data_expression& rewr_251_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3b260);
  }

  static inline data_expression rewr_251_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_251_0(this_rewriter); }

  static inline data_expression rewr_251_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_251_0(this_rewriter); }


  // [250] <=: (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) # (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_250_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91fb60))), arg0, arg1);
  }

  static inline data_expression rewr_250_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_250_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_250_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_250_2(t[0], t[1], this_rewriter); }


  // [250] <=: (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) # (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) -> Bool
  static inline const data_expression& rewr_250_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3ab50);
  }

  static inline data_expression rewr_250_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_250_0(this_rewriter); }

  static inline data_expression rewr_250_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_250_0(this_rewriter); }


  // [249] <: (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) # (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_249_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91fb30))), arg0, arg1);
  }

  static inline data_expression rewr_249_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_249_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_249_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_249_2(t[0], t[1], this_rewriter); }


  // [249] <: (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) # (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) -> Bool
  static inline const data_expression& rewr_249_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2c5c0);
  }

  static inline data_expression rewr_249_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_249_0(this_rewriter); }

  static inline data_expression rewr_249_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_249_0(this_rewriter); }


  // [248] if: Bool # (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) # (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) -> Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4, class DATA_EXPR5, class DATA_EXPR6, class DATA_EXPR7>
  static inline data_expression rewr_248_8(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, const DATA_EXPR5& arg_not_nf5, const DATA_EXPR6& arg_not_nf6, const DATA_EXPR7& arg_not_nf7, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@N(@@S(@var_6, @@R(@var_1(@var_2, @var_3, @var_4, @var_5, @var_6)))))))))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@N(@@S(@var_6, @@R(@var_0(@var_2, @var_3, @var_4, @var_5, @var_6)))))))))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        const DATA_EXPR5& var_4 = arg_not_nf5; // S1b
        const DATA_EXPR6& var_5 = arg_not_nf6; // S1b
        const DATA_EXPR7& var_6 = arg_not_nf7; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter), local_rewrite(var_4, this_rewriter), local_rewrite(var_5, this_rewriter), local_rewrite(var_6, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3, @var_4, @var_5, @var_6)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          const DATA_EXPR5& var_4 = arg_not_nf5; // S1b
          const DATA_EXPR6& var_5 = arg_not_nf6; // S1b
          const DATA_EXPR7& var_6 = arg_not_nf7; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter), local_rewrite(var_4, this_rewriter), local_rewrite(var_5, this_rewriter), local_rewrite(var_6, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3, @var_4, @var_5, @var_6)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@N(@@S(@var_6, @@R(@var_1(@var_2, @var_3, @var_4, @var_5, @var_6)))))))))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        const DATA_EXPR5& var_4 = arg_not_nf5; // S1b
        const DATA_EXPR6& var_5 = arg_not_nf6; // S1b
        const DATA_EXPR7& var_6 = arg_not_nf7; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter), local_rewrite(var_4, this_rewriter), local_rewrite(var_5, this_rewriter), local_rewrite(var_6, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3, @var_4, @var_5, @var_6)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91fb00))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter), local_rewrite(arg_not_nf5,this_rewriter), local_rewrite(arg_not_nf6,this_rewriter), local_rewrite(arg_not_nf7,this_rewriter));
  }

  static inline data_expression rewr_248_8_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_248_8(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), term_not_in_normal_form(t[3], this_rewriter), term_not_in_normal_form(t[4], this_rewriter), this_rewriter); }

  static inline data_expression rewr_248_8_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_248_8(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], t[2], t[3], t[4], this_rewriter); }


  // [248] if: Bool # (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) # (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) -> Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_248_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91fb00))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_248_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_248_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_248_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_248_3(t[0], t[1], t[2], this_rewriter); }


  // [248] if: Bool # (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) # (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) -> Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans
  static inline const data_expression& rewr_248_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf993870);
  }

  static inline data_expression rewr_248_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_248_0(this_rewriter); }

  static inline data_expression rewr_248_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_248_0(this_rewriter); }


  // [247] !=: (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) # (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_247_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_246_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91fad0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_247_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_247_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_247_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_247_2(t[0], t[1], this_rewriter); }


  // [247] !=: (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) # (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) -> Bool
  static inline const data_expression& rewr_247_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2d110);
  }

  static inline data_expression rewr_247_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_247_0(this_rewriter); }

  static inline data_expression rewr_247_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_247_0(this_rewriter); }


  // [246] ==: (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) # (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_246_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: Trans_name, x2: Bool, x3: Nat, x4,x9: List(PlaceTokens). @var_0(x1, x2, x3, x4, x9) == @var_1(x1, x2, x3, x4, x9)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(22), rewr_92_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(11)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(27)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(23)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(28)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(29))), this_rewriter), rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(11)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(27)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(23)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(28)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(29))), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: Trans_name, x2: Bool, x3: Nat, x4,x9: List(PlaceTokens). @var_0(x1, x2, x3, x4, x9) == @var_1(x1, x2, x3, x4, x9)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91faa0))), arg0, arg1);
  }

  static inline data_expression rewr_246_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_246_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_246_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_246_2(t[0], t[1], this_rewriter); }


  // [246] ==: (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) # (Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans) -> Bool
  static inline const data_expression& rewr_246_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf9657b0);
  }

  static inline data_expression rewr_246_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_246_0(this_rewriter); }

  static inline data_expression rewr_246_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_246_0(this_rewriter); }


  // [245] >: (PlaceTokens # PlaceTokens -> List(PlaceTokens)) # (PlaceTokens # PlaceTokens -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_245_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_242_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91f6e0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_245_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_245_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_245_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_245_2(t[0], t[1], this_rewriter); }


  // [245] >: (PlaceTokens # PlaceTokens -> List(PlaceTokens)) # (PlaceTokens # PlaceTokens -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_245_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2cfc0);
  }

  static inline data_expression rewr_245_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_245_0(this_rewriter); }

  static inline data_expression rewr_245_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_245_0(this_rewriter); }


  // [244] >=: (PlaceTokens # PlaceTokens -> List(PlaceTokens)) # (PlaceTokens # PlaceTokens -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_244_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_243_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91f6b0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_244_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_244_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_244_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_244_2(t[0], t[1], this_rewriter); }


  // [244] >=: (PlaceTokens # PlaceTokens -> List(PlaceTokens)) # (PlaceTokens # PlaceTokens -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_244_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3a3e0);
  }

  static inline data_expression rewr_244_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_244_0(this_rewriter); }

  static inline data_expression rewr_244_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_244_0(this_rewriter); }


  // [243] <=: (PlaceTokens # PlaceTokens -> List(PlaceTokens)) # (PlaceTokens # PlaceTokens -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_243_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91f680))), arg0, arg1);
  }

  static inline data_expression rewr_243_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_243_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_243_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_243_2(t[0], t[1], this_rewriter); }


  // [243] <=: (PlaceTokens # PlaceTokens -> List(PlaceTokens)) # (PlaceTokens # PlaceTokens -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_243_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa3b380);
  }

  static inline data_expression rewr_243_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_243_0(this_rewriter); }

  static inline data_expression rewr_243_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_243_0(this_rewriter); }


  // [242] <: (PlaceTokens # PlaceTokens -> List(PlaceTokens)) # (PlaceTokens # PlaceTokens -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_242_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91f650))), arg0, arg1);
  }

  static inline data_expression rewr_242_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_242_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_242_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_242_2(t[0], t[1], this_rewriter); }


  // [242] <: (PlaceTokens # PlaceTokens -> List(PlaceTokens)) # (PlaceTokens # PlaceTokens -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_242_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf993810);
  }

  static inline data_expression rewr_242_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_242_0(this_rewriter); }

  static inline data_expression rewr_242_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_242_0(this_rewriter); }


  // [241] if: Bool # (PlaceTokens # PlaceTokens -> List(PlaceTokens)) # (PlaceTokens # PlaceTokens -> List(PlaceTokens)) -> PlaceTokens # PlaceTokens -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_241_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_0(@var_2, @var_3)))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91f620))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_241_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_241_5(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_241_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_241_5(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], this_rewriter); }


  // [241] if: Bool # (PlaceTokens # PlaceTokens -> List(PlaceTokens)) # (PlaceTokens # PlaceTokens -> List(PlaceTokens)) -> PlaceTokens # PlaceTokens -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_241_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91f620))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_241_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_241_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_241_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_241_3(t[0], t[1], t[2], this_rewriter); }


  // [241] if: Bool # (PlaceTokens # PlaceTokens -> List(PlaceTokens)) # (PlaceTokens # PlaceTokens -> List(PlaceTokens)) -> PlaceTokens # PlaceTokens -> List(PlaceTokens)
  static inline const data_expression& rewr_241_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2c040);
  }

  static inline data_expression rewr_241_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_241_0(this_rewriter); }

  static inline data_expression rewr_241_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_241_0(this_rewriter); }


  // [240] !=: (PlaceTokens # PlaceTokens -> List(PlaceTokens)) # (PlaceTokens # PlaceTokens -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_240_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_239_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91f5f0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_240_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_240_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_240_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_240_2(t[0], t[1], this_rewriter); }


  // [240] !=: (PlaceTokens # PlaceTokens -> List(PlaceTokens)) # (PlaceTokens # PlaceTokens -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_240_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf9656c0);
  }

  static inline data_expression rewr_240_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_240_0(this_rewriter); }

  static inline data_expression rewr_240_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_240_0(this_rewriter); }


  // [239] ==: (PlaceTokens # PlaceTokens -> List(PlaceTokens)) # (PlaceTokens # PlaceTokens -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_239_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1,x3: PlaceTokens. @var_0(x1, x3) == @var_1(x1, x3)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(23), rewr_110_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(19)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(30))), this_rewriter), rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(19)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(30))), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1,x3: PlaceTokens. @var_0(x1, x3) == @var_1(x1, x3)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91f5c0))), arg0, arg1);
  }

  static inline data_expression rewr_239_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_239_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_239_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_239_2(t[0], t[1], this_rewriter); }


  // [239] ==: (PlaceTokens # PlaceTokens -> List(PlaceTokens)) # (PlaceTokens # PlaceTokens -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_239_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2d050);
  }

  static inline data_expression rewr_239_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_239_0(this_rewriter); }

  static inline data_expression rewr_239_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_239_0(this_rewriter); }


  // [238] >: (PlaceTokens -> List(PlaceTokens)) # (PlaceTokens -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_238_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_235_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91f290))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_238_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_238_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_238_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_238_2(t[0], t[1], this_rewriter); }


  // [238] >: (PlaceTokens -> List(PlaceTokens)) # (PlaceTokens -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_238_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf993690);
  }

  static inline data_expression rewr_238_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_238_0(this_rewriter); }

  static inline data_expression rewr_238_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_238_0(this_rewriter); }


  // [237] >=: (PlaceTokens -> List(PlaceTokens)) # (PlaceTokens -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_237_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_236_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91f260))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_237_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_237_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_237_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_237_2(t[0], t[1], this_rewriter); }


  // [237] >=: (PlaceTokens -> List(PlaceTokens)) # (PlaceTokens -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_237_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf993340);
  }

  static inline data_expression rewr_237_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_237_0(this_rewriter); }

  static inline data_expression rewr_237_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_237_0(this_rewriter); }


  // [236] <=: (PlaceTokens -> List(PlaceTokens)) # (PlaceTokens -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_236_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91f230))), arg0, arg1);
  }

  static inline data_expression rewr_236_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_236_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_236_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_236_2(t[0], t[1], this_rewriter); }


  // [236] <=: (PlaceTokens -> List(PlaceTokens)) # (PlaceTokens -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_236_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2d0b0);
  }

  static inline data_expression rewr_236_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_236_0(this_rewriter); }

  static inline data_expression rewr_236_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_236_0(this_rewriter); }


  // [235] <: (PlaceTokens -> List(PlaceTokens)) # (PlaceTokens -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_235_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91f200))), arg0, arg1);
  }

  static inline data_expression rewr_235_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_235_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_235_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_235_2(t[0], t[1], this_rewriter); }


  // [235] <: (PlaceTokens -> List(PlaceTokens)) # (PlaceTokens -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_235_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2ba60);
  }

  static inline data_expression rewr_235_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_235_0(this_rewriter); }

  static inline data_expression rewr_235_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_235_0(this_rewriter); }


  // [234] if: Bool # (PlaceTokens -> List(PlaceTokens)) # (PlaceTokens -> List(PlaceTokens)) -> PlaceTokens -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_234_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@R(@var_0(@var_2)))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_0(@var_2)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91f1d0))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter));
  }

  static inline data_expression rewr_234_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_234_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_234_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_234_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [234] if: Bool # (PlaceTokens -> List(PlaceTokens)) # (PlaceTokens -> List(PlaceTokens)) -> PlaceTokens -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_234_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91f1d0))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_234_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_234_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_234_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_234_3(t[0], t[1], t[2], this_rewriter); }


  // [234] if: Bool # (PlaceTokens -> List(PlaceTokens)) # (PlaceTokens -> List(PlaceTokens)) -> PlaceTokens -> List(PlaceTokens)
  static inline const data_expression& rewr_234_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2d080);
  }

  static inline data_expression rewr_234_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_234_0(this_rewriter); }

  static inline data_expression rewr_234_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_234_0(this_rewriter); }


  // [233] !=: (PlaceTokens -> List(PlaceTokens)) # (PlaceTokens -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_233_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_232_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91f1a0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_233_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_233_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_233_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_233_2(t[0], t[1], this_rewriter); }


  // [233] !=: (PlaceTokens -> List(PlaceTokens)) # (PlaceTokens -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_233_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2cff0);
  }

  static inline data_expression rewr_233_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_233_0(this_rewriter); }

  static inline data_expression rewr_233_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_233_0(this_rewriter); }


  // [232] ==: (PlaceTokens -> List(PlaceTokens)) # (PlaceTokens -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_232_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: PlaceTokens. @var_0(x1) == @var_1(x1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(24), rewr_110_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(19))), this_rewriter), rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(19))), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: PlaceTokens. @var_0(x1) == @var_1(x1)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91f170))), arg0, arg1);
  }

  static inline data_expression rewr_232_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_232_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_232_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_232_2(t[0], t[1], this_rewriter); }


  // [232] ==: (PlaceTokens -> List(PlaceTokens)) # (PlaceTokens -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_232_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf993310);
  }

  static inline data_expression rewr_232_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_232_0(this_rewriter); }

  static inline data_expression rewr_232_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_232_0(this_rewriter); }


  // [230] @if_always_else: Bool # (PlaceTokens -> List(PlaceTokens)) # (PlaceTokens -> List(PlaceTokens)) -> PlaceTokens -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_230_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return rewrite_aux(application(if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter)), local_rewrite(arg_not_nf3,this_rewriter)),true,this_rewriter);  }

  static inline data_expression rewr_230_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_230_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_230_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_230_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [230] @if_always_else: Bool # (PlaceTokens -> List(PlaceTokens)) # (PlaceTokens -> List(PlaceTokens)) -> PlaceTokens -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_230_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter));  }

  static inline data_expression rewr_230_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_230_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_230_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_230_3(t[0], t[1], t[2], this_rewriter); }


  // [230] @if_always_else: Bool # (PlaceTokens -> List(PlaceTokens)) # (PlaceTokens -> List(PlaceTokens)) -> PlaceTokens -> List(PlaceTokens)
  static inline const data_expression& rewr_230_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2d020);
  }

  static inline data_expression rewr_230_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_230_0(this_rewriter); }

  static inline data_expression rewr_230_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_230_0(this_rewriter); }


  // [229] @is_not_an_update: (PlaceTokens -> List(PlaceTokens)) -> Bool
  template < class DATA_EXPR0>
  static inline data_expression rewr_229_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @is_not_an_update by calling a user defined rewrite function.
    return is_not_a_function_update_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter));  }

  static inline data_expression rewr_229_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_229_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_229_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_229_1(t[0], this_rewriter); }


  // [229] @is_not_an_update: (PlaceTokens -> List(PlaceTokens)) -> Bool
  static inline const data_expression& rewr_229_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa39500);
  }

  static inline data_expression rewr_229_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_229_0(this_rewriter); }

  static inline data_expression rewr_229_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_229_0(this_rewriter); }


  // [228] @func_update_stable: (PlaceTokens -> List(PlaceTokens)) # PlaceTokens # List(PlaceTokens) -> PlaceTokens -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_228_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const data_expression& var_1 = arg1; // S1a
      const DATA_EXPR2& var_2 = arg_not_nf2; // S1b
      const data_expression& var_3 = arg3; // S1a
      if (rewr_231_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return local_rewrite(var_2, this_rewriter); // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91ef00))), local_rewrite(arg_not_nf0,this_rewriter), arg1, local_rewrite(arg_not_nf2,this_rewriter)), arg3);
  }

  static inline data_expression rewr_228_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_228_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_228_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_228_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [228] @func_update_stable: (PlaceTokens -> List(PlaceTokens)) # PlaceTokens # List(PlaceTokens) -> PlaceTokens -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_228_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91ef00))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter), local_rewrite(arg_not_nf2,this_rewriter));
  }

  static inline data_expression rewr_228_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_228_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_228_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_228_3(t[0], t[1], t[2], this_rewriter); }


  // [228] @func_update_stable: (PlaceTokens -> List(PlaceTokens)) # PlaceTokens # List(PlaceTokens) -> PlaceTokens -> List(PlaceTokens)
  static inline const data_expression& rewr_228_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa39590);
  }

  static inline data_expression rewr_228_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_228_0(this_rewriter); }

  static inline data_expression rewr_228_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_228_0(this_rewriter); }


  // [227] @func_update: (PlaceTokens -> List(PlaceTokens)) # PlaceTokens # List(PlaceTokens) -> PlaceTokens -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_227_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)), @@X))))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91ef00) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_5 = arg_not_nf3; // S1b
        if (rewr_113_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_228_4(delayed_rewr_227_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2, local_rewrite(var_5, this_rewriter),  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@N(@@S(@var_6, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)))))), @@N(@@S(@var_5, @@N(@@S(@var_6, @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)), @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)), @@X))))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91ef00) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          return rewr_230_4(rewr_110_2(rewrite_with_arguments_in_normal_form(application(var_1, var_2), this_rewriter), var_5,  this_rewriter), var_1, rewr_228_3(var_1, var_2, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          if (rewr_113_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_230_4(rewr_110_2(rewrite_with_arguments_in_normal_form(application(var_1, var_4), this_rewriter), var_5,  this_rewriter), rewr_228_3(var_1, var_2, var_3,  this_rewriter), rewr_228_3(delayed_rewr_228_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)
          }
          else
          {
            if (rewr_229_1(var_0,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_230_4(rewr_110_2(rewrite_with_arguments_in_normal_form(application(var_0, var_4), this_rewriter), var_5,  this_rewriter), var_0, rewr_228_3(var_0, var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        const DATA_EXPR3& var_3 = arg_not_nf3; // S1b
        if (rewr_229_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_230_4(rewr_110_2(rewrite_with_arguments_in_normal_form(application(var_0, var_1), this_rewriter), var_2,  this_rewriter), var_0, rewr_228_3(var_0, var_1, var_2,  this_rewriter), local_rewrite(var_3, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)
        }
        else
        {
        }
      }
    }
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      const data_expression& var_2 = arg2; // S1a
      const data_expression& var_3 = arg3; // S1a
      if (rewr_231_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(var_0, var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return var_2; // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91eed0))), arg0, arg1, arg2), arg3);
  }

  static inline data_expression rewr_227_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_227_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_227_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_227_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [228] @func_update_stable: (PlaceTokens -> List(PlaceTokens)) # PlaceTokens # List(PlaceTokens) -> PlaceTokens -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_228_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_228_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_228_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [227] @func_update: (PlaceTokens -> List(PlaceTokens)) # PlaceTokens # List(PlaceTokens) -> PlaceTokens -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_227_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_227_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_227_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [227] @func_update: (PlaceTokens -> List(PlaceTokens)) # PlaceTokens # List(PlaceTokens) -> PlaceTokens -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_227_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2]), @@X))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91ef00) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        if (rewr_113_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_228_3(delayed_rewr_227_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2,  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2]
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])))), @@N(@@S(@var_5, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])), @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])), @@X))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91ef00) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          return rewr_230_3(rewr_110_2(rewrite_with_arguments_in_normal_form(application(var_1, var_2), this_rewriter), var_5,  this_rewriter), var_1, rewr_228_3(var_1, var_2, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          if (rewr_229_1(var_0,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_230_3(rewr_110_2(rewrite_with_arguments_in_normal_form(application(var_0, var_4), this_rewriter), var_5,  this_rewriter), var_0, rewr_228_3(var_0, var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])
          }
          else
          {
            if (rewr_113_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_230_3(rewr_110_2(rewrite_with_arguments_in_normal_form(application(var_1, var_4), this_rewriter), var_5,  this_rewriter), rewr_228_3(var_1, var_2, var_3,  this_rewriter), rewr_228_3(delayed_rewr_228_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        if (rewr_229_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_230_3(rewr_110_2(rewrite_with_arguments_in_normal_form(application(var_0, var_1), this_rewriter), var_2,  this_rewriter), var_0, rewr_228_3(var_0, var_1, var_2,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91eed0))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_227_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_227_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_227_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_227_3(t[0], t[1], t[2], this_rewriter); }


  // [227] @func_update: (PlaceTokens -> List(PlaceTokens)) # PlaceTokens # List(PlaceTokens) -> PlaceTokens -> List(PlaceTokens)
  static inline const data_expression& rewr_227_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2d370);
  }

  static inline data_expression rewr_227_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_227_0(this_rewriter); }

  static inline data_expression rewr_227_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_227_0(this_rewriter); }


  // [226] >: (Place # List(Nat) -> PlaceTokens) # (Place # List(Nat) -> PlaceTokens) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_226_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_223_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91eb10))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_226_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_226_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_226_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_226_2(t[0], t[1], this_rewriter); }


  // [226] >: (Place # List(Nat) -> PlaceTokens) # (Place # List(Nat) -> PlaceTokens) -> Bool
  static inline const data_expression& rewr_226_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa50c0);
  }

  static inline data_expression rewr_226_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_226_0(this_rewriter); }

  static inline data_expression rewr_226_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_226_0(this_rewriter); }


  // [225] >=: (Place # List(Nat) -> PlaceTokens) # (Place # List(Nat) -> PlaceTokens) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_225_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_224_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91eae0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_225_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_225_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_225_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_225_2(t[0], t[1], this_rewriter); }


  // [225] >=: (Place # List(Nat) -> PlaceTokens) # (Place # List(Nat) -> PlaceTokens) -> Bool
  static inline const data_expression& rewr_225_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf965a30);
  }

  static inline data_expression rewr_225_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_225_0(this_rewriter); }

  static inline data_expression rewr_225_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_225_0(this_rewriter); }


  // [224] <=: (Place # List(Nat) -> PlaceTokens) # (Place # List(Nat) -> PlaceTokens) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_224_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91eab0))), arg0, arg1);
  }

  static inline data_expression rewr_224_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_224_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_224_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_224_2(t[0], t[1], this_rewriter); }


  // [224] <=: (Place # List(Nat) -> PlaceTokens) # (Place # List(Nat) -> PlaceTokens) -> Bool
  static inline const data_expression& rewr_224_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2d2d0);
  }

  static inline data_expression rewr_224_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_224_0(this_rewriter); }

  static inline data_expression rewr_224_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_224_0(this_rewriter); }


  // [223] <: (Place # List(Nat) -> PlaceTokens) # (Place # List(Nat) -> PlaceTokens) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_223_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91ea80))), arg0, arg1);
  }

  static inline data_expression rewr_223_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_223_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_223_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_223_2(t[0], t[1], this_rewriter); }


  // [223] <: (Place # List(Nat) -> PlaceTokens) # (Place # List(Nat) -> PlaceTokens) -> Bool
  static inline const data_expression& rewr_223_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa39530);
  }

  static inline data_expression rewr_223_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_223_0(this_rewriter); }

  static inline data_expression rewr_223_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_223_0(this_rewriter); }


  // [222] if: Bool # (Place # List(Nat) -> PlaceTokens) # (Place # List(Nat) -> PlaceTokens) -> Place # List(Nat) -> PlaceTokens
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_222_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_0(@var_2, @var_3)))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@R(@var_1(@var_2, @var_3)))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91ea50))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_222_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_222_5(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_222_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_222_5(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], this_rewriter); }


  // [222] if: Bool # (Place # List(Nat) -> PlaceTokens) # (Place # List(Nat) -> PlaceTokens) -> Place # List(Nat) -> PlaceTokens
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_222_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91ea50))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_222_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_222_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_222_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_222_3(t[0], t[1], t[2], this_rewriter); }


  // [222] if: Bool # (Place # List(Nat) -> PlaceTokens) # (Place # List(Nat) -> PlaceTokens) -> Place # List(Nat) -> PlaceTokens
  static inline const data_expression& rewr_222_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa39650);
  }

  static inline data_expression rewr_222_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_222_0(this_rewriter); }

  static inline data_expression rewr_222_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_222_0(this_rewriter); }


  // [221] !=: (Place # List(Nat) -> PlaceTokens) # (Place # List(Nat) -> PlaceTokens) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_221_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_220_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91ea20))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_221_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_221_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_221_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_221_2(t[0], t[1], this_rewriter); }


  // [221] !=: (Place # List(Nat) -> PlaceTokens) # (Place # List(Nat) -> PlaceTokens) -> Bool
  static inline const data_expression& rewr_221_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa38dc0);
  }

  static inline data_expression rewr_221_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_221_0(this_rewriter); }

  static inline data_expression rewr_221_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_221_0(this_rewriter); }


  // [220] ==: (Place # List(Nat) -> PlaceTokens) # (Place # List(Nat) -> PlaceTokens) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_220_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: Place, x3: List(Nat). @var_0(x1, x3) == @var_1(x1, x3)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(25), rewr_111_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(31)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(18))), this_rewriter), rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(31)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(18))), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: Place, x3: List(Nat). @var_0(x1, x3) == @var_1(x1, x3)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91e9f0))), arg0, arg1);
  }

  static inline data_expression rewr_220_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_220_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_220_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_220_2(t[0], t[1], this_rewriter); }


  // [220] ==: (Place # List(Nat) -> PlaceTokens) # (Place # List(Nat) -> PlaceTokens) -> Bool
  static inline const data_expression& rewr_220_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2bfe0);
  }

  static inline data_expression rewr_220_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_220_0(this_rewriter); }

  static inline data_expression rewr_220_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_220_0(this_rewriter); }


  // [219] >: (Nat -> List(Nat)) # (Nat -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_219_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_216_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91e6f0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_219_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_219_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_219_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_219_2(t[0], t[1], this_rewriter); }


  // [219] >: (Nat -> List(Nat)) # (Nat -> List(Nat)) -> Bool
  static inline const data_expression& rewr_219_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf992fd0);
  }

  static inline data_expression rewr_219_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_219_0(this_rewriter); }

  static inline data_expression rewr_219_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_219_0(this_rewriter); }


  // [218] >=: (Nat -> List(Nat)) # (Nat -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_218_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_217_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91e6c0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_218_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_218_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_218_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_218_2(t[0], t[1], this_rewriter); }


  // [218] >=: (Nat -> List(Nat)) # (Nat -> List(Nat)) -> Bool
  static inline const data_expression& rewr_218_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf9657e0);
  }

  static inline data_expression rewr_218_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_218_0(this_rewriter); }

  static inline data_expression rewr_218_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_218_0(this_rewriter); }


  // [217] <=: (Nat -> List(Nat)) # (Nat -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_217_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91e690))), arg0, arg1);
  }

  static inline data_expression rewr_217_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_217_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_217_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_217_2(t[0], t[1], this_rewriter); }


  // [217] <=: (Nat -> List(Nat)) # (Nat -> List(Nat)) -> Bool
  static inline const data_expression& rewr_217_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2bfb0);
  }

  static inline data_expression rewr_217_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_217_0(this_rewriter); }

  static inline data_expression rewr_217_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_217_0(this_rewriter); }


  // [216] <: (Nat -> List(Nat)) # (Nat -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_216_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91e660))), arg0, arg1);
  }

  static inline data_expression rewr_216_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_216_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_216_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_216_2(t[0], t[1], this_rewriter); }


  // [216] <: (Nat -> List(Nat)) # (Nat -> List(Nat)) -> Bool
  static inline const data_expression& rewr_216_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf993e90);
  }

  static inline data_expression rewr_216_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_216_0(this_rewriter); }

  static inline data_expression rewr_216_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_216_0(this_rewriter); }


  // [215] if: Bool # (Nat -> List(Nat)) # (Nat -> List(Nat)) -> Nat -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_215_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@R(@var_0(@var_2)))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_0(@var_2)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91e630))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter));
  }

  static inline data_expression rewr_215_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_215_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_215_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_215_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [215] if: Bool # (Nat -> List(Nat)) # (Nat -> List(Nat)) -> Nat -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_215_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91e630))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_215_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_215_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_215_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_215_3(t[0], t[1], t[2], this_rewriter); }


  // [215] if: Bool # (Nat -> List(Nat)) # (Nat -> List(Nat)) -> Nat -> List(Nat)
  static inline const data_expression& rewr_215_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa39d60);
  }

  static inline data_expression rewr_215_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_215_0(this_rewriter); }

  static inline data_expression rewr_215_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_215_0(this_rewriter); }


  // [214] !=: (Nat -> List(Nat)) # (Nat -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_214_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_213_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91e600))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_214_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_214_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_214_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_214_2(t[0], t[1], this_rewriter); }


  // [214] !=: (Nat -> List(Nat)) # (Nat -> List(Nat)) -> Bool
  static inline const data_expression& rewr_214_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa38df0);
  }

  static inline data_expression rewr_214_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_214_0(this_rewriter); }

  static inline data_expression rewr_214_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_214_0(this_rewriter); }


  // [213] ==: (Nat -> List(Nat)) # (Nat -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_213_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: Nat. @var_0(x1) == @var_1(x1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(26), rewr_39_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(17))), this_rewriter), rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(17))), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: Nat. @var_0(x1) == @var_1(x1)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91e5d0))), arg0, arg1);
  }

  static inline data_expression rewr_213_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_213_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_213_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_213_2(t[0], t[1], this_rewriter); }


  // [213] ==: (Nat -> List(Nat)) # (Nat -> List(Nat)) -> Bool
  static inline const data_expression& rewr_213_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2bf80);
  }

  static inline data_expression rewr_213_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_213_0(this_rewriter); }

  static inline data_expression rewr_213_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_213_0(this_rewriter); }


  // [212] @if_always_else: Bool # (Nat -> List(Nat)) # (Nat -> List(Nat)) -> Nat -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_212_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return rewrite_aux(application(if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter)), local_rewrite(arg_not_nf3,this_rewriter)),true,this_rewriter);  }

  static inline data_expression rewr_212_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_212_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_212_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_212_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [212] @if_always_else: Bool # (Nat -> List(Nat)) # (Nat -> List(Nat)) -> Nat -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_212_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter));  }

  static inline data_expression rewr_212_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_212_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_212_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_212_3(t[0], t[1], t[2], this_rewriter); }


  // [212] @if_always_else: Bool # (Nat -> List(Nat)) # (Nat -> List(Nat)) -> Nat -> List(Nat)
  static inline const data_expression& rewr_212_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa38e50);
  }

  static inline data_expression rewr_212_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_212_0(this_rewriter); }

  static inline data_expression rewr_212_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_212_0(this_rewriter); }


  // [211] @is_not_an_update: (Nat -> List(Nat)) -> Bool
  template < class DATA_EXPR0>
  static inline data_expression rewr_211_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @is_not_an_update by calling a user defined rewrite function.
    return is_not_a_function_update_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter));  }

  static inline data_expression rewr_211_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_211_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_211_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_211_1(t[0], this_rewriter); }


  // [211] @is_not_an_update: (Nat -> List(Nat)) -> Bool
  static inline const data_expression& rewr_211_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa38f40);
  }

  static inline data_expression rewr_211_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_211_0(this_rewriter); }

  static inline data_expression rewr_211_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_211_0(this_rewriter); }


  // [210] @func_update_stable: (Nat -> List(Nat)) # Nat # List(Nat) -> Nat -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_210_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const data_expression& var_1 = arg1; // S1a
      const DATA_EXPR2& var_2 = arg_not_nf2; // S1b
      const data_expression& var_3 = arg3; // S1a
      if (rewr_66_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return local_rewrite(var_2, this_rewriter); // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91e3f0))), local_rewrite(arg_not_nf0,this_rewriter), arg1, local_rewrite(arg_not_nf2,this_rewriter)), arg3);
  }

  static inline data_expression rewr_210_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_210_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_210_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_210_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [210] @func_update_stable: (Nat -> List(Nat)) # Nat # List(Nat) -> Nat -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_210_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91e3f0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter), local_rewrite(arg_not_nf2,this_rewriter));
  }

  static inline data_expression rewr_210_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_210_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_210_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_210_3(t[0], t[1], t[2], this_rewriter); }


  // [210] @func_update_stable: (Nat -> List(Nat)) # Nat # List(Nat) -> Nat -> List(Nat)
  static inline const data_expression& rewr_210_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa39df0);
  }

  static inline data_expression rewr_210_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_210_0(this_rewriter); }

  static inline data_expression rewr_210_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_210_0(this_rewriter); }


  // [209] @func_update: (Nat -> List(Nat)) # Nat # List(Nat) -> Nat -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_209_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)), @@X))))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91e3f0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_5 = arg_not_nf3; // S1b
        if (rewr_165_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_210_4(delayed_rewr_209_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2, local_rewrite(var_5, this_rewriter),  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@N(@@S(@var_6, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)))))), @@N(@@S(@var_5, @@N(@@S(@var_6, @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)), @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)), @@X))))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91e3f0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          return rewr_212_4(rewr_39_2(rewrite_with_arguments_in_normal_form(application(var_1, var_2), this_rewriter), var_5,  this_rewriter), var_1, rewr_210_3(var_1, var_2, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          if (rewr_165_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_212_4(rewr_39_2(rewrite_with_arguments_in_normal_form(application(var_1, var_4), this_rewriter), var_5,  this_rewriter), rewr_210_3(var_1, var_2, var_3,  this_rewriter), rewr_210_3(delayed_rewr_210_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)
          }
          else
          {
            if (rewr_211_1(var_0,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_212_4(rewr_39_2(rewrite_with_arguments_in_normal_form(application(var_0, var_4), this_rewriter), var_5,  this_rewriter), var_0, rewr_210_3(var_0, var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        const DATA_EXPR3& var_3 = arg_not_nf3; // S1b
        if (rewr_211_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_212_4(rewr_39_2(rewrite_with_arguments_in_normal_form(application(var_0, var_1), this_rewriter), var_2,  this_rewriter), var_0, rewr_210_3(var_0, var_1, var_2,  this_rewriter), local_rewrite(var_3, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)
        }
        else
        {
        }
      }
    }
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      const data_expression& var_2 = arg2; // S1a
      const data_expression& var_3 = arg3; // S1a
      if (rewr_66_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(var_0, var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return var_2; // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91e3c0))), arg0, arg1, arg2), arg3);
  }

  static inline data_expression rewr_209_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_209_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_209_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_209_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [210] @func_update_stable: (Nat -> List(Nat)) # Nat # List(Nat) -> Nat -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_210_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_210_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_210_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [209] @func_update: (Nat -> List(Nat)) # Nat # List(Nat) -> Nat -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_209_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_209_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_209_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [209] @func_update: (Nat -> List(Nat)) # Nat # List(Nat) -> Nat -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_209_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2]), @@X))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91e3f0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        if (rewr_165_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_210_3(delayed_rewr_209_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2,  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2]
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])))), @@N(@@S(@var_5, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])), @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])), @@X))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91e3f0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          return rewr_212_3(rewr_39_2(rewrite_with_arguments_in_normal_form(application(var_1, var_2), this_rewriter), var_5,  this_rewriter), var_1, rewr_210_3(var_1, var_2, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          if (rewr_211_1(var_0,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_212_3(rewr_39_2(rewrite_with_arguments_in_normal_form(application(var_0, var_4), this_rewriter), var_5,  this_rewriter), var_0, rewr_210_3(var_0, var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])
          }
          else
          {
            if (rewr_165_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_212_3(rewr_39_2(rewrite_with_arguments_in_normal_form(application(var_1, var_4), this_rewriter), var_5,  this_rewriter), rewr_210_3(var_1, var_2, var_3,  this_rewriter), rewr_210_3(delayed_rewr_210_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        if (rewr_211_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_212_3(rewr_39_2(rewrite_with_arguments_in_normal_form(application(var_0, var_1), this_rewriter), var_2,  this_rewriter), var_0, rewr_210_3(var_0, var_1, var_2,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91e3c0))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_209_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_209_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_209_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_209_3(t[0], t[1], t[2], this_rewriter); }


  // [209] @func_update: (Nat -> List(Nat)) # Nat # List(Nat) -> Nat -> List(Nat)
  static inline const data_expression& rewr_209_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf993660);
  }

  static inline data_expression rewr_209_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_209_0(this_rewriter); }

  static inline data_expression rewr_209_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_209_0(this_rewriter); }


  // [208] >: (Pos -> Nat) # (Pos -> Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_208_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_205_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91e090))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_208_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_208_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_208_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_208_2(t[0], t[1], this_rewriter); }


  // [208] >: (Pos -> Nat) # (Pos -> Nat) -> Bool
  static inline const data_expression& rewr_208_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2d440);
  }

  static inline data_expression rewr_208_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_208_0(this_rewriter); }

  static inline data_expression rewr_208_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_208_0(this_rewriter); }


  // [207] >=: (Pos -> Nat) # (Pos -> Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_207_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_206_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91e060))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_207_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_207_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_207_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_207_2(t[0], t[1], this_rewriter); }


  // [207] >=: (Pos -> Nat) # (Pos -> Nat) -> Bool
  static inline const data_expression& rewr_207_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa386e0);
  }

  static inline data_expression rewr_207_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_207_0(this_rewriter); }

  static inline data_expression rewr_207_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_207_0(this_rewriter); }


  // [206] <=: (Pos -> Nat) # (Pos -> Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_206_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91e030))), arg0, arg1);
  }

  static inline data_expression rewr_206_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_206_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_206_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_206_2(t[0], t[1], this_rewriter); }


  // [206] <=: (Pos -> Nat) # (Pos -> Nat) -> Bool
  static inline const data_expression& rewr_206_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf9935a0);
  }

  static inline data_expression rewr_206_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_206_0(this_rewriter); }

  static inline data_expression rewr_206_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_206_0(this_rewriter); }


  // [205] <: (Pos -> Nat) # (Pos -> Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_205_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91e000))), arg0, arg1);
  }

  static inline data_expression rewr_205_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_205_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_205_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_205_2(t[0], t[1], this_rewriter); }


  // [205] <: (Pos -> Nat) # (Pos -> Nat) -> Bool
  static inline const data_expression& rewr_205_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa38e20);
  }

  static inline data_expression rewr_205_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_205_0(this_rewriter); }

  static inline data_expression rewr_205_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_205_0(this_rewriter); }


  // [204] if: Bool # (Pos -> Nat) # (Pos -> Nat) -> Pos -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_204_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@R(@var_0(@var_2)))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_0(@var_2)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91dfd0))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter));
  }

  static inline data_expression rewr_204_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_204_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_204_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_204_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [204] if: Bool # (Pos -> Nat) # (Pos -> Nat) -> Pos -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_204_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91dfd0))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_204_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_204_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_204_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_204_3(t[0], t[1], t[2], this_rewriter); }


  // [204] if: Bool # (Pos -> Nat) # (Pos -> Nat) -> Pos -> Nat
  static inline const data_expression& rewr_204_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa386b0);
  }

  static inline data_expression rewr_204_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_204_0(this_rewriter); }

  static inline data_expression rewr_204_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_204_0(this_rewriter); }


  // [203] !=: (Pos -> Nat) # (Pos -> Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_203_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_202_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91dfa0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_203_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_203_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_203_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_203_2(t[0], t[1], this_rewriter); }


  // [203] !=: (Pos -> Nat) # (Pos -> Nat) -> Bool
  static inline const data_expression& rewr_203_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf993600);
  }

  static inline data_expression rewr_203_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_203_0(this_rewriter); }

  static inline data_expression rewr_203_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_203_0(this_rewriter); }


  // [202] ==: (Pos -> Nat) # (Pos -> Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_202_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: Pos. @var_0(x1) == @var_1(x1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(27), rewr_65_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(32))), this_rewriter), rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(32))), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: Pos. @var_0(x1) == @var_1(x1)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91df70))), arg0, arg1);
  }

  static inline data_expression rewr_202_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_202_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_202_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_202_2(t[0], t[1], this_rewriter); }


  // [202] ==: (Pos -> Nat) # (Pos -> Nat) -> Bool
  static inline const data_expression& rewr_202_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa37fa0);
  }

  static inline data_expression rewr_202_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_202_0(this_rewriter); }

  static inline data_expression rewr_202_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_202_0(this_rewriter); }


  // [199] @if_always_else: Bool # (Pos -> Nat) # (Pos -> Nat) -> Pos -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_199_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return rewrite_aux(application(if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter)), local_rewrite(arg_not_nf3,this_rewriter)),true,this_rewriter);  }

  static inline data_expression rewr_199_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_199_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_199_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_199_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [199] @if_always_else: Bool # (Pos -> Nat) # (Pos -> Nat) -> Pos -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_199_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter));  }

  static inline data_expression rewr_199_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_199_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_199_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_199_3(t[0], t[1], t[2], this_rewriter); }


  // [199] @if_always_else: Bool # (Pos -> Nat) # (Pos -> Nat) -> Pos -> Nat
  static inline const data_expression& rewr_199_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa37f70);
  }

  static inline data_expression rewr_199_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_199_0(this_rewriter); }

  static inline data_expression rewr_199_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_199_0(this_rewriter); }


  // [198] @is_not_an_update: (Pos -> Nat) -> Bool
  template < class DATA_EXPR0>
  static inline data_expression rewr_198_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @is_not_an_update by calling a user defined rewrite function.
    return is_not_a_function_update_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter));  }

  static inline data_expression rewr_198_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_198_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_198_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_198_1(t[0], this_rewriter); }


  // [198] @is_not_an_update: (Pos -> Nat) -> Bool
  static inline const data_expression& rewr_198_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa38770);
  }

  static inline data_expression rewr_198_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_198_0(this_rewriter); }

  static inline data_expression rewr_198_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_198_0(this_rewriter); }


  // [197] @func_update_stable: (Pos -> Nat) # Pos # Nat -> Pos -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_197_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const data_expression& var_1 = arg1; // S1a
      const DATA_EXPR2& var_2 = arg_not_nf2; // S1b
      const data_expression& var_3 = arg3; // S1a
      if (rewr_201_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return local_rewrite(var_2, this_rewriter); // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91dcd0))), local_rewrite(arg_not_nf0,this_rewriter), arg1, local_rewrite(arg_not_nf2,this_rewriter)), arg3);
  }

  static inline data_expression rewr_197_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_197_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_197_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_197_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [197] @func_update_stable: (Pos -> Nat) # Pos # Nat -> Pos -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_197_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91dcd0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter), local_rewrite(arg_not_nf2,this_rewriter));
  }

  static inline data_expression rewr_197_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_197_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_197_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_197_3(t[0], t[1], t[2], this_rewriter); }


  // [197] @func_update_stable: (Pos -> Nat) # Pos # Nat -> Pos -> Nat
  static inline const data_expression& rewr_197_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf9934e0);
  }

  static inline data_expression rewr_197_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_197_0(this_rewriter); }

  static inline data_expression rewr_197_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_197_0(this_rewriter); }


  // [196] @func_update: (Pos -> Nat) # Pos # Nat -> Pos -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_196_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)), @@X))))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91dcd0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_5 = arg_not_nf3; // S1b
        if (rewr_200_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_197_4(delayed_rewr_196_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2, local_rewrite(var_5, this_rewriter),  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@N(@@S(@var_6, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)))))), @@N(@@S(@var_5, @@N(@@S(@var_6, @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)), @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)), @@X))))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91dcd0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          return rewr_199_4(rewr_65_2(rewrite_with_arguments_in_normal_form(application(var_1, var_2), this_rewriter), var_5,  this_rewriter), var_1, rewr_197_3(var_1, var_2, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          if (rewr_200_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_199_4(rewr_65_2(rewrite_with_arguments_in_normal_form(application(var_1, var_4), this_rewriter), var_5,  this_rewriter), rewr_197_3(var_1, var_2, var_3,  this_rewriter), rewr_197_3(delayed_rewr_197_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)
          }
          else
          {
            if (rewr_198_1(var_0,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_199_4(rewr_65_2(rewrite_with_arguments_in_normal_form(application(var_0, var_4), this_rewriter), var_5,  this_rewriter), var_0, rewr_197_3(var_0, var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        const DATA_EXPR3& var_3 = arg_not_nf3; // S1b
        if (rewr_198_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_199_4(rewr_65_2(rewrite_with_arguments_in_normal_form(application(var_0, var_1), this_rewriter), var_2,  this_rewriter), var_0, rewr_197_3(var_0, var_1, var_2,  this_rewriter), local_rewrite(var_3, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)
        }
        else
        {
        }
      }
    }
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      const data_expression& var_2 = arg2; // S1a
      const data_expression& var_3 = arg3; // S1a
      if (rewr_201_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(var_0, var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return var_2; // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91dca0))), arg0, arg1, arg2), arg3);
  }

  static inline data_expression rewr_196_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_196_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_196_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_196_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [197] @func_update_stable: (Pos -> Nat) # Pos # Nat -> Pos -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_197_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_197_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_197_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [196] @func_update: (Pos -> Nat) # Pos # Nat -> Pos -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_196_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_196_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_196_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [196] @func_update: (Pos -> Nat) # Pos # Nat -> Pos -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_196_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2]), @@X))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91dcd0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        if (rewr_200_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_197_3(delayed_rewr_196_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2,  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2]
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])))), @@N(@@S(@var_5, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])), @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])), @@X))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91dcd0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          return rewr_199_3(rewr_65_2(rewrite_with_arguments_in_normal_form(application(var_1, var_2), this_rewriter), var_5,  this_rewriter), var_1, rewr_197_3(var_1, var_2, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          if (rewr_198_1(var_0,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_199_3(rewr_65_2(rewrite_with_arguments_in_normal_form(application(var_0, var_4), this_rewriter), var_5,  this_rewriter), var_0, rewr_197_3(var_0, var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])
          }
          else
          {
            if (rewr_200_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_199_3(rewr_65_2(rewrite_with_arguments_in_normal_form(application(var_1, var_4), this_rewriter), var_5,  this_rewriter), rewr_197_3(var_1, var_2, var_3,  this_rewriter), rewr_197_3(delayed_rewr_197_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        if (rewr_198_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_199_3(rewr_65_2(rewrite_with_arguments_in_normal_form(application(var_0, var_1), this_rewriter), var_2,  this_rewriter), var_0, rewr_197_3(var_0, var_1, var_2,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91dca0))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_196_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_196_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_196_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_196_3(t[0], t[1], t[2], this_rewriter); }


  // [196] @func_update: (Pos -> Nat) # Pos # Nat -> Pos -> Nat
  static inline const data_expression& rewr_196_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa380c0);
  }

  static inline data_expression rewr_196_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_196_0(this_rewriter); }

  static inline data_expression rewr_196_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_196_0(this_rewriter); }


  // [195] >: ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) # ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_195_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_192_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91d8e0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_195_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_195_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_195_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_195_2(t[0], t[1], this_rewriter); }


  // [195] >: ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) # ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_195_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa39cd0);
  }

  static inline data_expression rewr_195_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_195_0(this_rewriter); }

  static inline data_expression rewr_195_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_195_0(this_rewriter); }


  // [194] >=: ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) # ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_194_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_193_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91d8b0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_194_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_194_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_194_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_194_2(t[0], t[1], this_rewriter); }


  // [194] >=: ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) # ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_194_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa37fd0);
  }

  static inline data_expression rewr_194_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_194_0(this_rewriter); }

  static inline data_expression rewr_194_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_194_0(this_rewriter); }


  // [193] <=: ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) # ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_193_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91d880))), arg0, arg1);
  }

  static inline data_expression rewr_193_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_193_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_193_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_193_2(t[0], t[1], this_rewriter); }


  // [193] <=: ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) # ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_193_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa38f10);
  }

  static inline data_expression rewr_193_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_193_0(this_rewriter); }

  static inline data_expression rewr_193_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_193_0(this_rewriter); }


  // [192] <: ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) # ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_192_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91d850))), arg0, arg1);
  }

  static inline data_expression rewr_192_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_192_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_192_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_192_2(t[0], t[1], this_rewriter); }


  // [192] <: ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) # ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_192_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2c480);
  }

  static inline data_expression rewr_192_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_192_0(this_rewriter); }

  static inline data_expression rewr_192_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_192_0(this_rewriter); }


  // [191] if: Bool # ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) # ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) -> (Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4, class DATA_EXPR5, class DATA_EXPR6>
  static inline data_expression rewr_191_7(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, const DATA_EXPR5& arg_not_nf5, const DATA_EXPR6& arg_not_nf6, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@R(@var_1(@var_2, @var_3, @var_4)(@var_5)))))))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@R(@var_0(@var_2, @var_3, @var_4)(@var_5)))))))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        const DATA_EXPR5& var_4 = arg_not_nf5; // S1b
        const DATA_EXPR6& var_5 = arg_not_nf6; // S1b
        return rewrite_with_arguments_in_normal_form(application(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter), local_rewrite(var_4, this_rewriter)), local_rewrite(var_5, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3, @var_4)(@var_5)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          const DATA_EXPR5& var_4 = arg_not_nf5; // S1b
          const DATA_EXPR6& var_5 = arg_not_nf6; // S1b
          return rewrite_with_arguments_in_normal_form(application(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter), local_rewrite(var_4, this_rewriter)), local_rewrite(var_5, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3, @var_4)(@var_5)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@R(@var_1(@var_2, @var_3, @var_4)(@var_5)))))))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        const DATA_EXPR5& var_4 = arg_not_nf5; // S1b
        const DATA_EXPR6& var_5 = arg_not_nf6; // S1b
        return rewrite_with_arguments_in_normal_form(application(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter), local_rewrite(var_4, this_rewriter)), local_rewrite(var_5, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3, @var_4)(@var_5)
      }
      else
      {
      }
    }
    return application(application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91d820))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter), local_rewrite(arg_not_nf5,this_rewriter)), local_rewrite(arg_not_nf6,this_rewriter));
  }

  static inline data_expression rewr_191_7_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_191_7(term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(down_cast<application>(t.head()).head())[2], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_191_7_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_191_7(down_cast<application>(down_cast<application>(t.head()).head())[0], down_cast<application>(down_cast<application>(t.head()).head())[1], down_cast<application>(down_cast<application>(t.head()).head())[2], down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [191] if: Bool # ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) # ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) -> (Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4, class DATA_EXPR5>
  static inline data_expression rewr_191_6(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, const DATA_EXPR5& arg_not_nf5, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@R(@var_1(@var_2, @var_3, @var_4)))))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@R(@var_0(@var_2, @var_3, @var_4)))))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        const DATA_EXPR5& var_4 = arg_not_nf5; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter), local_rewrite(var_4, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3, @var_4)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          const DATA_EXPR5& var_4 = arg_not_nf5; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter), local_rewrite(var_4, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3, @var_4)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@R(@var_1(@var_2, @var_3, @var_4)))))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        const DATA_EXPR5& var_4 = arg_not_nf5; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter), local_rewrite(var_4, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3, @var_4)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91d820))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter), local_rewrite(arg_not_nf5,this_rewriter));
  }

  static inline data_expression rewr_191_6_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_191_6(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_191_6_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_191_6(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], t[2], this_rewriter); }


  // [191] if: Bool # ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) # ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) -> (Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_191_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91d820))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_191_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_191_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_191_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_191_3(t[0], t[1], t[2], this_rewriter); }


  // [191] if: Bool # ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) # ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) -> (Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)
  static inline const data_expression& rewr_191_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa37850);
  }

  static inline data_expression rewr_191_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_191_0(this_rewriter); }

  static inline data_expression rewr_191_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_191_0(this_rewriter); }


  // [190] !=: ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) # ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_190_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_189_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91d7f0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_190_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_190_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_190_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_190_2(t[0], t[1], this_rewriter); }


  // [190] !=: ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) # ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_190_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2c2a0);
  }

  static inline data_expression rewr_190_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_190_0(this_rewriter); }

  static inline data_expression rewr_190_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_190_0(this_rewriter); }


  // [189] ==: ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) # ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_189_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: Place -> List(Nat), x2: Place, x5: List(Nat). @var_0(x1, x2, x5) == @var_1(x1, x2, x5)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(28), rewr_182_2(delayed_application3<data_expression,data_expression,data_expression,data_expression>(local_rewrite(var_0, this_rewriter),static_cast<const data_expression&>(this_rewriter->bound_variable_get(5)),static_cast<const data_expression&>(this_rewriter->bound_variable_get(33)),static_cast<const data_expression&>(this_rewriter->bound_variable_get(34)), this_rewriter), delayed_application3<data_expression,data_expression,data_expression,data_expression>(local_rewrite(var_1, this_rewriter),static_cast<const data_expression&>(this_rewriter->bound_variable_get(5)),static_cast<const data_expression&>(this_rewriter->bound_variable_get(33)),static_cast<const data_expression&>(this_rewriter->bound_variable_get(34)), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: Place -> List(Nat), x2: Place, x5: List(Nat). @var_0(x1, x2, x5) == @var_1(x1, x2, x5)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91d7c0))), arg0, arg1);
  }

  static inline data_expression rewr_189_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_189_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_189_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_189_2(t[0], t[1], this_rewriter); }


  // [189] ==: ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) # ((Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_189_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2c330);
  }

  static inline data_expression rewr_189_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_189_0(this_rewriter); }

  static inline data_expression rewr_189_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_189_0(this_rewriter); }


  // [188] >: (Place -> List(Nat)) # (Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_188_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_185_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91d490))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_188_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_188_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_188_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_188_2(t[0], t[1], this_rewriter); }


  // [188] >: (Place -> List(Nat)) # (Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_188_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2c590);
  }

  static inline data_expression rewr_188_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_188_0(this_rewriter); }

  static inline data_expression rewr_188_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_188_0(this_rewriter); }


  // [187] >=: (Place -> List(Nat)) # (Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_187_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_186_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91d460))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_187_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_187_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_187_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_187_2(t[0], t[1], this_rewriter); }


  // [187] >=: (Place -> List(Nat)) # (Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_187_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf965a90);
  }

  static inline data_expression rewr_187_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_187_0(this_rewriter); }

  static inline data_expression rewr_187_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_187_0(this_rewriter); }


  // [186] <=: (Place -> List(Nat)) # (Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_186_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91d430))), arg0, arg1);
  }

  static inline data_expression rewr_186_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_186_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_186_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_186_2(t[0], t[1], this_rewriter); }


  // [186] <=: (Place -> List(Nat)) # (Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_186_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf965a60);
  }

  static inline data_expression rewr_186_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_186_0(this_rewriter); }

  static inline data_expression rewr_186_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_186_0(this_rewriter); }


  // [185] <: (Place -> List(Nat)) # (Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_185_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91d400))), arg0, arg1);
  }

  static inline data_expression rewr_185_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_185_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_185_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_185_2(t[0], t[1], this_rewriter); }


  // [185] <: (Place -> List(Nat)) # (Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_185_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2d990);
  }

  static inline data_expression rewr_185_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_185_0(this_rewriter); }

  static inline data_expression rewr_185_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_185_0(this_rewriter); }


  // [184] if: Bool # (Place -> List(Nat)) # (Place -> List(Nat)) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_184_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@R(@var_0(@var_2)))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_0(@var_2)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@R(@var_1(@var_2)))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter)), this_rewriter); // R1 @var_1(@var_2)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91d3d0))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter));
  }

  static inline data_expression rewr_184_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_184_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_184_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_184_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [184] if: Bool # (Place -> List(Nat)) # (Place -> List(Nat)) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_184_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91d3d0))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_184_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_184_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_184_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_184_3(t[0], t[1], t[2], this_rewriter); }


  // [184] if: Bool # (Place -> List(Nat)) # (Place -> List(Nat)) -> Place -> List(Nat)
  static inline const data_expression& rewr_184_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf965b20);
  }

  static inline data_expression rewr_184_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_184_0(this_rewriter); }

  static inline data_expression rewr_184_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_184_0(this_rewriter); }


  // [183] !=: (Place -> List(Nat)) # (Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_183_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_182_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91d3a0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_183_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_183_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_183_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_183_2(t[0], t[1], this_rewriter); }


  // [183] !=: (Place -> List(Nat)) # (Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_183_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa36fe0);
  }

  static inline data_expression rewr_183_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_183_0(this_rewriter); }

  static inline data_expression rewr_183_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_183_0(this_rewriter); }


  // [182] ==: (Place -> List(Nat)) # (Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_182_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1: Place. @var_0(x1) == @var_1(x1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(29), rewr_39_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(31))), this_rewriter), rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(31))), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1: Place. @var_0(x1) == @var_1(x1)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91d370))), arg0, arg1);
  }

  static inline data_expression rewr_182_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_182_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_182_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_182_2(t[0], t[1], this_rewriter); }


  // [182] ==: (Place -> List(Nat)) # (Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_182_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa37010);
  }

  static inline data_expression rewr_182_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_182_0(this_rewriter); }

  static inline data_expression rewr_182_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_182_0(this_rewriter); }


  // [179] @if_always_else: Bool # (Place -> List(Nat)) # (Place -> List(Nat)) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_179_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return rewrite_aux(application(if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter)), local_rewrite(arg_not_nf3,this_rewriter)),true,this_rewriter);  }

  static inline data_expression rewr_179_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_179_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_179_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_179_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [179] @if_always_else: Bool # (Place -> List(Nat)) # (Place -> List(Nat)) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_179_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @if_always_else by calling a user defined rewrite function.
    return if_always_else_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter),local_rewrite(arg_not_nf1,this_rewriter),local_rewrite(arg_not_nf2,this_rewriter));  }

  static inline data_expression rewr_179_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_179_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_179_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_179_3(t[0], t[1], t[2], this_rewriter); }


  // [179] @if_always_else: Bool # (Place -> List(Nat)) # (Place -> List(Nat)) -> Place -> List(Nat)
  static inline const data_expression& rewr_179_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf965c60);
  }

  static inline data_expression rewr_179_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_179_0(this_rewriter); }

  static inline data_expression rewr_179_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_179_0(this_rewriter); }


  // [178] @is_not_an_update: (Place -> List(Nat)) -> Bool
  template < class DATA_EXPR0>
  static inline data_expression rewr_178_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // Implement function @is_not_an_update by calling a user defined rewrite function.
    return is_not_a_function_update_manual_implementation(local_rewrite(arg_not_nf0,this_rewriter));  }

  static inline data_expression rewr_178_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_178_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_178_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_178_1(t[0], this_rewriter); }


  // [178] @is_not_an_update: (Place -> List(Nat)) -> Bool
  static inline const data_expression& rewr_178_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa37070);
  }

  static inline data_expression rewr_178_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_178_0(this_rewriter); }

  static inline data_expression rewr_178_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_178_0(this_rewriter); }


  // [100] @func_update_stable: (Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_100_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const data_expression& var_1 = arg1; // S1a
      const DATA_EXPR2& var_2 = arg_not_nf2; // S1b
      const data_expression& var_3 = arg3; // S1a
      if (rewr_181_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return local_rewrite(var_2, this_rewriter); // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf919320))), local_rewrite(arg_not_nf0,this_rewriter), arg1, local_rewrite(arg_not_nf2,this_rewriter)), arg3);
  }

  static inline data_expression rewr_100_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_100_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_100_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_100_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [100] @func_update_stable: (Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_100_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf919320))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter), local_rewrite(arg_not_nf2,this_rewriter));
  }

  static inline data_expression rewr_100_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_100_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_100_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_100_3(t[0], t[1], t[2], this_rewriter); }


  // [100] @func_update_stable: (Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)
  static inline const data_expression& rewr_100_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2c360);
  }

  static inline data_expression rewr_100_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_100_0(this_rewriter); }

  static inline data_expression rewr_100_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_100_0(this_rewriter); }


  // [16] @func_update: (Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3>
  static inline data_expression rewr_16_4(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@N(@@S(@var_5, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)), @@X))))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf919320) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_5 = arg_not_nf3; // S1b
        if (rewr_180_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_100_4(delayed_rewr_16_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2, local_rewrite(var_5, this_rewriter),  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2](@var_5)
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@N(@@S(@var_6, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)))))), @@N(@@S(@var_5, @@N(@@S(@var_6, @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)), @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)), @@X))))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf919320) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          return rewr_179_4(rewr_39_2(rewrite_with_arguments_in_normal_form(application(var_1, var_2), this_rewriter), var_5,  this_rewriter), var_1, rewr_100_3(var_1, var_2, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])(@var_6)
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          const DATA_EXPR3& var_6 = arg_not_nf3; // S1b
          if (rewr_180_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_179_4(rewr_39_2(rewrite_with_arguments_in_normal_form(application(var_1, var_4), this_rewriter), var_5,  this_rewriter), rewr_100_3(var_1, var_2, var_3,  this_rewriter), rewr_100_3(delayed_rewr_100_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])(@var_6)
          }
          else
          {
            if (rewr_178_1(var_0,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_179_4(rewr_39_2(rewrite_with_arguments_in_normal_form(application(var_0, var_4), this_rewriter), var_5,  this_rewriter), var_0, rewr_100_3(var_0, var_4, var_5,  this_rewriter), local_rewrite(var_6, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])(@var_6)
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        const DATA_EXPR3& var_3 = arg_not_nf3; // S1b
        if (rewr_178_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_179_4(rewr_39_2(rewrite_with_arguments_in_normal_form(application(var_0, var_1), this_rewriter), var_2,  this_rewriter), var_0, rewr_100_3(var_0, var_1, var_2,  this_rewriter), local_rewrite(var_3, this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])(@var_3)
        }
        else
        {
        }
      }
    }
    // @@A(3)
    const data_expression& arg3 = local_rewrite(arg_not_nf3,this_rewriter);
    // Considering argument 3
    // @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@C(@var_1 != @var_3, @@R(@var_0(@var_3)), @@M(@var_1, @@R(@var_2), @@X)))))))))
    {
      const data_expression& var_0 = arg0; // S1a
      const data_expression& var_1 = arg1; // S1a
      const data_expression& var_2 = arg2; // S1a
      const data_expression& var_3 = arg3; // S1a
      if (rewr_181_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
      {
        return rewrite_with_arguments_in_normal_form(application(var_0, var_3), this_rewriter); // R1 @var_0(@var_3)
      }
      else
      {
        if (var_1 == arg3) // M
        {
          return var_2; // R1 @var_2
        }
        else
        {
        }
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf916830))), arg0, arg1, arg2), arg3);
  }

  static inline data_expression rewr_16_4_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_16_4(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_16_4_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_16_4(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], this_rewriter); }


  // [100] @func_update_stable: (Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_100_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_100_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_100_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [16] @func_update: (Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  class delayed_rewr_16_3
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      const DATA_EXPR2& m_t2;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_16_3(const DATA_EXPR0& t0, const DATA_EXPR1& t1, const DATA_EXPR2& t2, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), m_t2(t2), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_16_3(m_t0, m_t1, m_t2, this_rewriter);
      }
  };
  
  // [16] @func_update: (Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_16_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(@func_update_stable, @@S(@var_0, @@N(@@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@S(@var_3, @@N(@@S(@var_4, @@C(@var_1 < @var_3, @@R(@var_0[@var_3 -> @var_4][@var_1 -> @var_2]), @@X))))))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf919320) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_3 = arg1; // S1a
        const DATA_EXPR2& var_4 = arg_not_nf2; // S1b
        if (rewr_180_2(var_1, var_3,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_100_3(delayed_rewr_16_3<data_expression, data_expression, DATA_EXPR2>(var_0, var_3, var_4,  this_rewriter), var_1, var_2,  this_rewriter); // R1 @var_0[@var_3 -> @var_4][@var_1 -> @var_2]
        }
        else
        {
        }
      }
      else
      {
      }
    }
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@S(@var_0, @@F(@func_update_stable, @@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@D(@@N(@@S(@var_4, @@M(@var_2, @@N(@@S(@var_5, @@R(@if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])))), @@N(@@S(@var_5, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])), @@C(@var_4 < @var_2, @@R(@if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])), @@X))))))))))))), @@N(@@S(@var_1, @@N(@@S(@var_2, @@C(@is_not_an_update(@var_0), @@R(@if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])), @@X)))))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf919320) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        const data_expression& var_3 = down_cast<data_expression>(arg0[3]); // S2
        const data_expression& var_4 = arg1; // S1a
        if (var_2 == arg1) // M
        {
          const data_expression& var_5 = arg2; // S1a
          return rewr_179_3(rewr_39_2(rewrite_with_arguments_in_normal_form(application(var_1, var_2), this_rewriter), var_5,  this_rewriter), var_1, rewr_100_3(var_1, var_2, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_2) == @var_5, @var_1, @var_1[@var_2 -> @var_5])
        }
        else
        {
          const data_expression& var_5 = arg2; // S1a
          if (rewr_178_1(var_0,  this_rewriter) == sort_bool::true_()) // C
          {
            return rewr_179_3(rewr_39_2(rewrite_with_arguments_in_normal_form(application(var_0, var_4), this_rewriter), var_5,  this_rewriter), var_0, rewr_100_3(var_0, var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_4) == @var_5, @var_0, @var_0[@var_4 -> @var_5])
          }
          else
          {
            if (rewr_180_2(var_4, var_2,  this_rewriter) == sort_bool::true_()) // C
            {
              return rewr_179_3(rewr_39_2(rewrite_with_arguments_in_normal_form(application(var_1, var_4), this_rewriter), var_5,  this_rewriter), rewr_100_3(var_1, var_2, var_3,  this_rewriter), rewr_100_3(delayed_rewr_100_3<data_expression, data_expression, data_expression>(var_1, var_2, var_3,  this_rewriter), var_4, var_5,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_1(@var_4) == @var_5, @var_1[@var_2 -> @var_3], @var_1[@var_2 -> @var_3][@var_4 -> @var_5])
            }
            else
            {
            }
          }
        }
      }
      else
      {
        const data_expression& var_1 = arg1; // S1a
        const data_expression& var_2 = arg2; // S1a
        if (rewr_178_1(var_0,  this_rewriter) == sort_bool::true_()) // C
        {
          return rewr_179_3(rewr_39_2(rewrite_with_arguments_in_normal_form(application(var_0, var_1), this_rewriter), var_2,  this_rewriter), var_0, rewr_100_3(var_0, var_1, var_2,  this_rewriter),  this_rewriter); // R1 @if_always_else(@var_0(@var_1) == @var_2, @var_0, @var_0[@var_1 -> @var_2])
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf916830))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_16_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_16_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_16_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_16_3(t[0], t[1], t[2], this_rewriter); }


  // [16] @func_update: (Place -> List(Nat)) # Place # List(Nat) -> Place -> List(Nat)
  static inline const data_expression& rewr_16_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2c670);
  }

  static inline data_expression rewr_16_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_16_0(this_rewriter); }

  static inline data_expression rewr_16_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_16_0(this_rewriter); }


  // [177] >: (Nat # Nat # Nat -> List(Nat)) # (Nat # Nat # Nat -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_177_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_174_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91cd40))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_177_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_177_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_177_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_177_2(t[0], t[1], this_rewriter); }


  // [177] >: (Nat # Nat # Nat -> List(Nat)) # (Nat # Nat # Nat -> List(Nat)) -> Bool
  static inline const data_expression& rewr_177_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf965c00);
  }

  static inline data_expression rewr_177_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_177_0(this_rewriter); }

  static inline data_expression rewr_177_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_177_0(this_rewriter); }


  // [176] >=: (Nat # Nat # Nat -> List(Nat)) # (Nat # Nat # Nat -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_176_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_175_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91cd10))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_176_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_176_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_176_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_176_2(t[0], t[1], this_rewriter); }


  // [176] >=: (Nat # Nat # Nat -> List(Nat)) # (Nat # Nat # Nat -> List(Nat)) -> Bool
  static inline const data_expression& rewr_176_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa38e80);
  }

  static inline data_expression rewr_176_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_176_0(this_rewriter); }

  static inline data_expression rewr_176_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_176_0(this_rewriter); }


  // [175] <=: (Nat # Nat # Nat -> List(Nat)) # (Nat # Nat # Nat -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_175_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91cce0))), arg0, arg1);
  }

  static inline data_expression rewr_175_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_175_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_175_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_175_2(t[0], t[1], this_rewriter); }


  // [175] <=: (Nat # Nat # Nat -> List(Nat)) # (Nat # Nat # Nat -> List(Nat)) -> Bool
  static inline const data_expression& rewr_175_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf965bd0);
  }

  static inline data_expression rewr_175_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_175_0(this_rewriter); }

  static inline data_expression rewr_175_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_175_0(this_rewriter); }


  // [174] <: (Nat # Nat # Nat -> List(Nat)) # (Nat # Nat # Nat -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_174_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(false), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91ccb0))), arg0, arg1);
  }

  static inline data_expression rewr_174_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_174_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_174_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_174_2(t[0], t[1], this_rewriter); }


  // [174] <: (Nat # Nat # Nat -> List(Nat)) # (Nat # Nat # Nat -> List(Nat)) -> Bool
  static inline const data_expression& rewr_174_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2c7b0);
  }

  static inline data_expression rewr_174_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_174_0(this_rewriter); }

  static inline data_expression rewr_174_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_174_0(this_rewriter); }


  // [173] if: Bool # (Nat # Nat # Nat -> List(Nat)) # (Nat # Nat # Nat -> List(Nat)) -> Nat # Nat # Nat -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4, class DATA_EXPR5>
  static inline data_expression rewr_173_6(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, const DATA_EXPR5& arg_not_nf5, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@R(@var_1(@var_2, @var_3, @var_4)))))))))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@R(@var_0(@var_2, @var_3, @var_4)))))))))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        const DATA_EXPR5& var_4 = arg_not_nf5; // S1b
        return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter), local_rewrite(var_4, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3, @var_4)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
          const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
          const DATA_EXPR5& var_4 = arg_not_nf5; // S1b
          return rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter), local_rewrite(var_4, this_rewriter)), this_rewriter); // R1 @var_0(@var_2, @var_3, @var_4)
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@N(@@S(@var_2, @@N(@@S(@var_3, @@N(@@S(@var_4, @@R(@var_1(@var_2, @var_3, @var_4)))))))), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        const DATA_EXPR3& var_2 = arg_not_nf3; // S1b
        const DATA_EXPR4& var_3 = arg_not_nf4; // S1b
        const DATA_EXPR5& var_4 = arg_not_nf5; // S1b
        return rewrite_with_arguments_in_normal_form(application(var_1, local_rewrite(var_2, this_rewriter), local_rewrite(var_3, this_rewriter), local_rewrite(var_4, this_rewriter)), this_rewriter); // R1 @var_1(@var_2, @var_3, @var_4)
      }
      else
      {
      }
    }
    return application(application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91cc80))), arg0, arg1, arg2), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter), local_rewrite(arg_not_nf5,this_rewriter));
  }

  static inline data_expression rewr_173_6_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_173_6(term_not_in_normal_form(down_cast<application>(t.head())[0], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[1], this_rewriter), term_not_in_normal_form(down_cast<application>(t.head())[2], this_rewriter), term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_173_6_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_173_6(down_cast<application>(t.head())[0], down_cast<application>(t.head())[1], down_cast<application>(t.head())[2], t[0], t[1], t[2], this_rewriter); }


  // [173] if: Bool # (Nat # Nat # Nat -> List(Nat)) # (Nat # Nat # Nat -> List(Nat)) -> Nat # Nat # Nat -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_173_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91cc80))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_173_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_173_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_173_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_173_3(t[0], t[1], t[2], this_rewriter); }


  // [173] if: Bool # (Nat # Nat # Nat -> List(Nat)) # (Nat # Nat # Nat -> List(Nat)) -> Nat # Nat # Nat -> List(Nat)
  static inline const data_expression& rewr_173_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa36900);
  }

  static inline data_expression rewr_173_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_173_0(this_rewriter); }

  static inline data_expression rewr_173_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_173_0(this_rewriter); }


  // [172] !=: (Nat # Nat # Nat -> List(Nat)) # (Nat # Nat # Nat -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_172_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_171_2(var_0, var_1,  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91cc50))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_172_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_172_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_172_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_172_2(t[0], t[1], this_rewriter); }


  // [172] !=: (Nat # Nat # Nat -> List(Nat)) # (Nat # Nat # Nat -> List(Nat)) -> Bool
  static inline const data_expression& rewr_172_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf965c30);
  }

  static inline data_expression rewr_172_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_172_0(this_rewriter); }

  static inline data_expression rewr_172_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_172_0(this_rewriter); }


  // [171] ==: (Nat # Nat # Nat -> List(Nat)) # (Nat # Nat # Nat -> List(Nat)) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_171_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(forall x1,x2,x5: Nat. @var_0(x1, x2, x5) == @var_1(x1, x2, x5)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return static_cast<const data_expression&>(this_rewriter->universal_quantifier_enumeration(this_rewriter->binding_variable_list_get(30), rewr_39_2(rewrite_with_arguments_in_normal_form(application(local_rewrite(var_0, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(17)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(35)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(36))), this_rewriter), rewrite_with_arguments_in_normal_form(application(local_rewrite(var_1, this_rewriter), static_cast<const data_expression&>(this_rewriter->bound_variable_get(17)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(35)), static_cast<const data_expression&>(this_rewriter->bound_variable_get(36))), this_rewriter),  this_rewriter), true, sigma(this_rewriter))); // R1 forall x1,x2,x5: Nat. @var_0(x1, x2, x5) == @var_1(x1, x2, x5)
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@M(@var_0, @@R(true), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (var_0 == arg1) // M
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91cc20))), arg0, arg1);
  }

  static inline data_expression rewr_171_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_171_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_171_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_171_2(t[0], t[1], this_rewriter); }


  // [171] ==: (Nat # Nat # Nat -> List(Nat)) # (Nat # Nat # Nat -> List(Nat)) -> Bool
  static inline const data_expression& rewr_171_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa370a0);
  }

  static inline data_expression rewr_171_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_171_0(this_rewriter); }

  static inline data_expression rewr_171_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_171_0(this_rewriter); }


  // [170] >: List(Nat) # List(Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_170_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_164_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91c9e0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_170_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_170_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_170_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_170_2(t[0], t[1], this_rewriter); }


  // [170] >: List(Nat) # List(Nat) -> Bool
  static inline const data_expression& rewr_170_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2e2a0);
  }

  static inline data_expression rewr_170_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_170_0(this_rewriter); }

  static inline data_expression rewr_170_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_170_0(this_rewriter); }


  // [169] >=: List(Nat) # List(Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_169_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_166_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91c9b0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_169_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_169_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_169_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_169_2(t[0], t[1], this_rewriter); }


  // [169] >=: List(Nat) # List(Nat) -> Bool
  static inline const data_expression& rewr_169_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2e240);
  }

  static inline data_expression rewr_169_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_169_0(this_rewriter); }

  static inline data_expression rewr_169_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_169_0(this_rewriter); }


  // [168] if: Bool # List(Nat) # List(Nat) -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_168_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91c980))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_168_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_168_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_168_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_168_3(t[0], t[1], t[2], this_rewriter); }


  // [168] if: Bool # List(Nat) # List(Nat) -> List(Nat)
  static inline const data_expression& rewr_168_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2e580);
  }

  static inline data_expression rewr_168_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_168_0(this_rewriter); }

  static inline data_expression rewr_168_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_168_0(this_rewriter); }


  // [167] !=: List(Nat) # List(Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_167_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_39_2(local_rewrite(var_0, this_rewriter), local_rewrite(var_1, this_rewriter),  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91c950))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_167_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_167_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_167_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_167_2(t[0], t[1], this_rewriter); }


  // [167] !=: List(Nat) # List(Nat) -> Bool
  static inline const data_expression& rewr_167_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2c780);
  }

  static inline data_expression rewr_167_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_167_0(this_rewriter); }

  static inline data_expression rewr_167_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_167_0(this_rewriter); }


  // [166] <=: List(Nat) # List(Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_166_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(true), @@F([], @@R(false), @@F(|>, @@S(@var_3, @@N(@@S(@var_4, @@R(@var_1 == @var_3 && @var_2 <= @var_4 || @var_1 < @var_3)))), @@X)))))))), @@F([], @@D(@@N(@@M(@var_0, @@R(true), @@F(|>, @@N(@@R(true)), @@X)))), @@N(@@M(@var_0, @@R(true), @@X)))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917ac0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
          if (uint_address(arg1) == 0x55a6cf9167a0) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf917ac0) // F1
            {
              const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
              const data_expression& var_4 = down_cast<data_expression>(arg1[2]); // S2
              return rewr_93_2(rewr_49_2(rewr_65_2(var_1, var_3,  this_rewriter), delayed_rewr_166_2<data_expression, data_expression>(var_2, var_4,  this_rewriter),  this_rewriter), delayed_rewr_165_2<data_expression, data_expression>(var_1, var_3,  this_rewriter),  this_rewriter); // R1 @var_1 == @var_3 && @var_2 <= @var_4 || @var_1 < @var_3
            }
            else
            {
            }
          }
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf9167a0) // F1
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf917ac0) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
            }
          }
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91c440))), arg0, arg1);
  }

  static inline data_expression rewr_166_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_166_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_166_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_166_2(t[0], t[1], this_rewriter); }


  // [166] <=: List(Nat) # List(Nat) -> Bool
  static inline const data_expression& rewr_166_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2e150);
  }

  static inline data_expression rewr_166_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_166_0(this_rewriter); }

  static inline data_expression rewr_166_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_166_0(this_rewriter); }


  // [164] <: List(Nat) # List(Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_164_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(false), @@F([], @@R(false), @@F(|>, @@S(@var_3, @@N(@@S(@var_4, @@R(@var_1 == @var_3 && @var_2 < @var_4 || @var_1 < @var_3)))), @@X)))))))), @@F([], @@D(@@N(@@M(@var_0, @@R(false), @@F(|>, @@N(@@R(true)), @@X)))), @@N(@@M(@var_0, @@R(false), @@X)))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917ac0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
        }
        else
        {
          if (uint_address(arg1) == 0x55a6cf9167a0) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf917ac0) // F1
            {
              const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
              const data_expression& var_4 = down_cast<data_expression>(arg1[2]); // S2
              return rewr_93_2(rewr_49_2(rewr_65_2(var_1, var_3,  this_rewriter), delayed_rewr_164_2<data_expression, data_expression>(var_2, var_4,  this_rewriter),  this_rewriter), delayed_rewr_165_2<data_expression, data_expression>(var_1, var_3,  this_rewriter),  this_rewriter); // R1 @var_1 == @var_3 && @var_2 < @var_4 || @var_1 < @var_3
            }
            else
            {
            }
          }
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf9167a0) // F1
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf917ac0) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
            }
          }
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91c290))), arg0, arg1);
  }

  static inline data_expression rewr_164_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_164_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_164_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_164_2(t[0], t[1], this_rewriter); }


  // [164] <: List(Nat) # List(Nat) -> Bool
  static inline const data_expression& rewr_164_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2e0f0);
  }

  static inline data_expression rewr_164_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_164_0(this_rewriter); }

  static inline data_expression rewr_164_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_164_0(this_rewriter); }


  // [163] rtail: List(Nat) -> List(Nat)
  template < class DATA_EXPR0>
  static inline data_expression rewr_163_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@S(@var_0, @@N(@@F([], @@R([]), @@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@R(@var_0 |> rtail(@var_1 |> @var_2))))), @@D(@@X))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917ac0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        if (uint_address(arg0[2]) == 0x55a6cf9167a0) // F2a "[]"
        {
          const data_expression& t1 = down_cast<data_expression>(arg0[2]);
          return *reinterpret_cast<const data_expression*>(0x55a6cfa67920); // R1 []
        }
        else
        {
          if (is_application_no_check(down_cast<data_expression>(arg0[2])) && uint_address(down_cast<data_expression>(arg0[2])[0]) == 0x55a6cf917ac0) // F2b |>
          {
            const data_expression& t1 = down_cast<data_expression>(arg0[2]);
            const data_expression& var_1 = down_cast<data_expression>(t1[1]); // S2
            const data_expression& var_2 = down_cast<data_expression>(t1[2]); // S2
            return rewr_64_2(var_0, rewr_163_1(rewr_64_2(var_1, var_2,  this_rewriter),  this_rewriter),  this_rewriter); // R1 @var_0 |> rtail(@var_1 |> @var_2)
          }
          else
          {
          }
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91c020))), arg0);
  }

  static inline data_expression rewr_163_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_163_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_163_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_163_1(t[0], this_rewriter); }


  // [163] rtail: List(Nat) -> List(Nat)
  static inline const data_expression& rewr_163_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2e0c0);
  }

  static inline data_expression rewr_163_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_163_0(this_rewriter); }

  static inline data_expression rewr_163_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_163_0(this_rewriter); }


  // [162] rhead: List(Nat) -> Nat
  template < class DATA_EXPR0>
  static inline data_expression rewr_162_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@S(@var_0, @@N(@@F([], @@R(@var_0), @@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@R(rhead(@var_1 |> @var_2))))), @@D(@@X))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917ac0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        if (uint_address(arg0[2]) == 0x55a6cf9167a0) // F2a "[]"
        {
          const data_expression& t1 = down_cast<data_expression>(arg0[2]);
          return var_0; // R1 @var_0
        }
        else
        {
          if (is_application_no_check(down_cast<data_expression>(arg0[2])) && uint_address(down_cast<data_expression>(arg0[2])[0]) == 0x55a6cf917ac0) // F2b |>
          {
            const data_expression& t1 = down_cast<data_expression>(arg0[2]);
            const data_expression& var_1 = down_cast<data_expression>(t1[1]); // S2
            const data_expression& var_2 = down_cast<data_expression>(t1[2]); // S2
            return rewr_162_1(rewr_64_2(var_1, var_2,  this_rewriter),  this_rewriter); // R1 rhead(@var_1 |> @var_2)
          }
          else
          {
          }
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91bff0))), arg0);
  }

  static inline data_expression rewr_162_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_162_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_162_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_162_1(t[0], this_rewriter); }


  // [162] rhead: List(Nat) -> Nat
  static inline const data_expression& rewr_162_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2e210);
  }

  static inline data_expression rewr_162_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_162_0(this_rewriter); }

  static inline data_expression rewr_162_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_162_0(this_rewriter); }


  // [161] tail: List(Nat) -> List(Nat)
  template < class DATA_EXPR0>
  static inline data_expression rewr_161_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@N(@@S(@var_1, @@R(@var_1))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917ac0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91bfc0))), arg0);
  }

  static inline data_expression rewr_161_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_161_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_161_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_161_1(t[0], this_rewriter); }


  // [161] tail: List(Nat) -> List(Nat)
  static inline const data_expression& rewr_161_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2e1b0);
  }

  static inline data_expression rewr_161_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_161_0(this_rewriter); }

  static inline data_expression rewr_161_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_161_0(this_rewriter); }


  // [160] head: List(Nat) -> Nat
  template < class DATA_EXPR0>
  static inline data_expression rewr_160_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@S(@var_0, @@N(@@R(@var_0))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917ac0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        return var_0; // R1 @var_0
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91bf90))), arg0);
  }

  static inline data_expression rewr_160_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_160_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_160_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_160_1(t[0], this_rewriter); }


  // [160] head: List(Nat) -> Nat
  static inline const data_expression& rewr_160_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2e1e0);
  }

  static inline data_expression rewr_160_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_160_0(this_rewriter); }

  static inline data_expression rewr_160_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_160_0(this_rewriter); }


  // [159] .: List(Nat) # Nat -> Nat
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_159_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(|>, @@S(@var_0, @@N(@@S(@var_1, @@D(@@N(@@F(0, @@R(@var_0), @@F(@cNat, @@S(@var_2, @@R(@var_1 . pred(@var_2))), @@X))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917ac0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        if (uint_address(arg1) == 0x55a6cf918b40) // F1
        {
          return var_0; // R1 @var_0
        }
        else
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
          {
            const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
            return rewr_159_2(var_1, rewr_116_1(var_2,  this_rewriter),  this_rewriter); // R1 @var_1 . pred(@var_2)
          }
          else
          {
          }
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91bf60))), arg0, arg1);
  }

  static inline data_expression rewr_159_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_159_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_159_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_159_2(t[0], t[1], this_rewriter); }


  // [159] .: List(Nat) # Nat -> Nat
  static inline const data_expression& rewr_159_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2e650);
  }

  static inline data_expression rewr_159_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_159_0(this_rewriter); }

  static inline data_expression rewr_159_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_159_0(this_rewriter); }


  // [158] <|: List(Nat) # Nat -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_158_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@S(@var_0, @@N(@@S(@var_1, @@D(@@N(@@S(@var_2, @@R(@var_0 |> @var_1 <| @var_2))))))), @@F([], @@D(@@N(@@S(@var_0, @@R([@var_0])))), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917ac0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const DATA_EXPR1& var_2 = arg_not_nf1; // S1b
        return rewr_64_2(var_0, rewr_158_2(var_1, var_2,  this_rewriter),  this_rewriter); // R1 @var_0 |> @var_1 <| @var_2
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf9167a0) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return rewr_64_2(local_rewrite(var_0, this_rewriter), *reinterpret_cast<const data_expression*>(0x55a6cfa67920),  this_rewriter); // R1 [@var_0]
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91bf30))), arg0, local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_158_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_158_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_158_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_158_2(t[0], t[1], this_rewriter); }


  // [158] <|: List(Nat) # Nat -> List(Nat)
  static inline const data_expression& rewr_158_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa37760);
  }

  static inline data_expression rewr_158_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_158_0(this_rewriter); }

  static inline data_expression rewr_158_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_158_0(this_rewriter); }


  // [157] #: List(Nat) -> Nat
  template < class DATA_EXPR0>
  static inline data_expression rewr_157_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@N(@@S(@var_1, @@R(succ(#@var_1)))), @@F([], @@R(0), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917ac0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        return rewr_20_1(rewr_115_1(rewr_157_1(var_1,  this_rewriter),  this_rewriter),  this_rewriter); // R1 succ(#@var_1)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf9167a0) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a570); // R1 0
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91bf00))), arg0);
  }

  static inline data_expression rewr_157_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_157_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_157_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_157_1(t[0], this_rewriter); }


  // [157] #: List(Nat) -> Nat
  static inline const data_expression& rewr_157_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa37800);
  }

  static inline data_expression rewr_157_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_157_0(this_rewriter); }

  static inline data_expression rewr_157_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_157_0(this_rewriter); }


  // [67] in: Nat # List(Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_67_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@N(@@F([], @@R(false), @@X))
    {
      if (uint_address(arg1) == 0x55a6cf9167a0) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@S(@var_0, @@N(@@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@R(@var_0 == @var_1 || @var_0 in @var_2)))), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf917ac0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg1[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg1[2]); // S2
        return rewr_93_2(rewr_65_2(var_0, var_1,  this_rewriter), delayed_rewr_67_2<data_expression, data_expression>(var_0, var_2,  this_rewriter),  this_rewriter); // R1 @var_0 == @var_1 || @var_0 in @var_2
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf917d60))), arg0, arg1);
  }

  static inline data_expression rewr_67_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_67_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_67_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_67_2(t[0], t[1], this_rewriter); }


  // [67] in: Nat # List(Nat) -> Bool
  static inline const data_expression& rewr_67_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa36160);
  }

  static inline data_expression rewr_67_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_67_0(this_rewriter); }

  static inline data_expression rewr_67_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_67_0(this_rewriter); }


  // [60] ++: List(Nat) # List(Nat) -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_60_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@S(@var_0, @@N(@@S(@var_1, @@D(@@N(@@S(@var_2, @@R(@var_0 |> @var_1 ++ @var_2))))))), @@F([], @@D(@@N(@@S(@var_0, @@R(@var_0)))), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917ac0) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const DATA_EXPR1& var_2 = arg_not_nf1; // S1b
        return rewr_64_2(var_0, rewr_60_2(var_1, var_2,  this_rewriter),  this_rewriter); // R1 @var_0 |> @var_1 ++ @var_2
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf9167a0) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@F([], @@R(@var_0), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address(arg1) == 0x55a6cf9167a0) // F1
      {
        return var_0; // R1 @var_0
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf917850))), arg0, arg1);
  }

  static inline data_expression rewr_60_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_60_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_60_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_60_2(t[0], t[1], this_rewriter); }


  // [60] ++: List(Nat) # List(Nat) -> List(Nat)
  static inline const data_expression& rewr_60_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2e680);
  }

  static inline data_expression rewr_60_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_60_0(this_rewriter); }

  static inline data_expression rewr_60_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_60_0(this_rewriter); }


  // [39] ==: List(Nat) # List(Nat) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_39_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(true), @@F([], @@R(false), @@F(|>, @@S(@var_3, @@N(@@S(@var_4, @@R(@var_1 == @var_3 && @var_2 == @var_4)))), @@X)))))))), @@F([], @@D(@@N(@@M(@var_0, @@R(true), @@F(|>, @@N(@@R(false)), @@X)))), @@N(@@M(@var_0, @@R(true), @@X)))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917ac0) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
          if (uint_address(arg1) == 0x55a6cf9167a0) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf917ac0) // F1
            {
              const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
              const data_expression& var_4 = down_cast<data_expression>(arg1[2]); // S2
              return rewr_49_2(rewr_65_2(var_1, var_3,  this_rewriter), delayed_rewr_39_2<data_expression, data_expression>(var_2, var_4,  this_rewriter),  this_rewriter); // R1 @var_1 == @var_3 && @var_2 == @var_4
            }
            else
            {
            }
          }
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf9167a0) // F1
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf917ac0) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
            }
            else
            {
            }
          }
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf916f80))), arg0, arg1);
  }

  static inline data_expression rewr_39_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_39_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_39_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_39_2(t[0], t[1], this_rewriter); }


  // [39] ==: List(Nat) # List(Nat) -> Bool
  static inline const data_expression& rewr_39_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa36190);
  }

  static inline data_expression rewr_39_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_39_0(this_rewriter); }

  static inline data_expression rewr_39_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_39_0(this_rewriter); }


  // [156] >: List(Trans) # List(Trans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_156_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_150_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91bcc0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_156_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_156_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_156_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_156_2(t[0], t[1], this_rewriter); }


  // [156] >: List(Trans) # List(Trans) -> Bool
  static inline const data_expression& rewr_156_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa36840);
  }

  static inline data_expression rewr_156_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_156_0(this_rewriter); }

  static inline data_expression rewr_156_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_156_0(this_rewriter); }


  // [155] >=: List(Trans) # List(Trans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_155_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_152_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91bc90))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_155_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_155_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_155_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_155_2(t[0], t[1], this_rewriter); }


  // [155] >=: List(Trans) # List(Trans) -> Bool
  static inline const data_expression& rewr_155_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa36280);
  }

  static inline data_expression rewr_155_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_155_0(this_rewriter); }

  static inline data_expression rewr_155_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_155_0(this_rewriter); }


  // [154] if: Bool # List(Trans) # List(Trans) -> List(Trans)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_154_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91bc60))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_154_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_154_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_154_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_154_3(t[0], t[1], t[2], this_rewriter); }


  // [154] if: Bool # List(Trans) # List(Trans) -> List(Trans)
  static inline const data_expression& rewr_154_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa36100);
  }

  static inline data_expression rewr_154_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_154_0(this_rewriter); }

  static inline data_expression rewr_154_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_154_0(this_rewriter); }


  // [153] !=: List(Trans) # List(Trans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_153_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_149_2(local_rewrite(var_0, this_rewriter), local_rewrite(var_1, this_rewriter),  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91bc30))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_153_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_153_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_153_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_153_2(t[0], t[1], this_rewriter); }


  // [153] !=: List(Trans) # List(Trans) -> Bool
  static inline const data_expression& rewr_153_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa35a50);
  }

  static inline data_expression rewr_153_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_153_0(this_rewriter); }

  static inline data_expression rewr_153_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_153_0(this_rewriter); }


  // [152] <=: List(Trans) # List(Trans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_152_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(true), @@F([], @@R(false), @@F(|>, @@S(@var_3, @@N(@@S(@var_4, @@R(@var_1 == @var_3 && @var_2 <= @var_4 || @var_1 < @var_3)))), @@X)))))))), @@F([], @@D(@@N(@@M(@var_0, @@R(true), @@F(|>, @@N(@@R(true)), @@X)))), @@N(@@M(@var_0, @@R(true), @@X)))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91b150) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
          if (uint_address(arg1) == 0x55a6cf91b120) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf91b150) // F1
            {
              const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
              const data_expression& var_4 = down_cast<data_expression>(arg1[2]); // S2
              return rewr_93_2(rewr_49_2(rewr_92_2(var_1, var_3,  this_rewriter), delayed_rewr_152_2<data_expression, data_expression>(var_2, var_4,  this_rewriter),  this_rewriter), delayed_rewr_151_2<data_expression, data_expression>(var_1, var_3,  this_rewriter),  this_rewriter); // R1 @var_1 == @var_3 && @var_2 <= @var_4 || @var_1 < @var_3
            }
            else
            {
            }
          }
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf91b120) // F1
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf91b150) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
            }
          }
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91b720))), arg0, arg1);
  }

  static inline data_expression rewr_152_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_152_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_152_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_152_2(t[0], t[1], this_rewriter); }


  // [151] <: Trans # Trans -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_151_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_151_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_151_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [152] <=: List(Trans) # List(Trans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_152_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_152_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_152_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [152] <=: List(Trans) # List(Trans) -> Bool
  static inline const data_expression& rewr_152_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa36250);
  }

  static inline data_expression rewr_152_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_152_0(this_rewriter); }

  static inline data_expression rewr_152_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_152_0(this_rewriter); }


  // [150] <: List(Trans) # List(Trans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_150_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(false), @@F([], @@R(false), @@F(|>, @@S(@var_3, @@N(@@S(@var_4, @@R(@var_1 == @var_3 && @var_2 < @var_4 || @var_1 < @var_3)))), @@X)))))))), @@F([], @@D(@@N(@@M(@var_0, @@R(false), @@F(|>, @@N(@@R(true)), @@X)))), @@N(@@M(@var_0, @@R(false), @@X)))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91b150) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
        }
        else
        {
          if (uint_address(arg1) == 0x55a6cf91b120) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf91b150) // F1
            {
              const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
              const data_expression& var_4 = down_cast<data_expression>(arg1[2]); // S2
              return rewr_93_2(rewr_49_2(rewr_92_2(var_1, var_3,  this_rewriter), delayed_rewr_150_2<data_expression, data_expression>(var_2, var_4,  this_rewriter),  this_rewriter), delayed_rewr_151_2<data_expression, data_expression>(var_1, var_3,  this_rewriter),  this_rewriter); // R1 @var_1 == @var_3 && @var_2 < @var_4 || @var_1 < @var_3
            }
            else
            {
            }
          }
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf91b120) // F1
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf91b150) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
            }
          }
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91b570))), arg0, arg1);
  }

  static inline data_expression rewr_150_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_150_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_150_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_150_2(t[0], t[1], this_rewriter); }


  // [150] <: List(Trans) # List(Trans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_150_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_150_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_150_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [150] <: List(Trans) # List(Trans) -> Bool
  static inline const data_expression& rewr_150_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2e6b0);
  }

  static inline data_expression rewr_150_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_150_0(this_rewriter); }

  static inline data_expression rewr_150_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_150_0(this_rewriter); }


  // [149] ==: List(Trans) # List(Trans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_149_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(true), @@F([], @@R(false), @@F(|>, @@S(@var_3, @@N(@@S(@var_4, @@R(@var_1 == @var_3 && @var_2 == @var_4)))), @@X)))))))), @@F([], @@D(@@N(@@M(@var_0, @@R(true), @@F(|>, @@N(@@R(false)), @@X)))), @@N(@@M(@var_0, @@R(true), @@X)))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91b150) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
          if (uint_address(arg1) == 0x55a6cf91b120) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf91b150) // F1
            {
              const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
              const data_expression& var_4 = down_cast<data_expression>(arg1[2]); // S2
              return rewr_49_2(rewr_92_2(var_1, var_3,  this_rewriter), delayed_rewr_149_2<data_expression, data_expression>(var_2, var_4,  this_rewriter),  this_rewriter); // R1 @var_1 == @var_3 && @var_2 == @var_4
            }
            else
            {
            }
          }
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf91b120) // F1
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf91b150) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
            }
            else
            {
            }
          }
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91b3f0))), arg0, arg1);
  }

  static inline data_expression rewr_149_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_149_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_149_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_149_2(t[0], t[1], this_rewriter); }


  // [149] ==: List(Trans) # List(Trans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_149_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_149_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_149_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [149] ==: List(Trans) # List(Trans) -> Bool
  static inline const data_expression& rewr_149_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa362b0);
  }

  static inline data_expression rewr_149_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_149_0(this_rewriter); }

  static inline data_expression rewr_149_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_149_0(this_rewriter); }


  // [148] rtail: List(Trans) -> List(Trans)
  template < class DATA_EXPR0>
  static inline data_expression rewr_148_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@S(@var_0, @@N(@@F([], @@R([]), @@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@R(@var_0 |> rtail(@var_1 |> @var_2))))), @@D(@@X))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91b150) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        if (uint_address(arg0[2]) == 0x55a6cf91b120) // F2a "[]"
        {
          const data_expression& t1 = down_cast<data_expression>(arg0[2]);
          return *reinterpret_cast<const data_expression*>(0x55a6cfb2d930); // R1 []
        }
        else
        {
          if (is_application_no_check(down_cast<data_expression>(arg0[2])) && uint_address(down_cast<data_expression>(arg0[2])[0]) == 0x55a6cf91b150) // F2b |>
          {
            const data_expression& t1 = down_cast<data_expression>(arg0[2]);
            const data_expression& var_1 = down_cast<data_expression>(t1[1]); // S2
            const data_expression& var_2 = down_cast<data_expression>(t1[2]); // S2
            return rewr_140_2(var_0, rewr_148_1(rewr_140_2(var_1, var_2,  this_rewriter),  this_rewriter),  this_rewriter); // R1 @var_0 |> rtail(@var_1 |> @var_2)
          }
          else
          {
          }
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91b2d0))), arg0);
  }

  static inline data_expression rewr_148_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_148_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_148_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_148_1(t[0], this_rewriter); }


  // [148] rtail: List(Trans) -> List(Trans)
  static inline const data_expression& rewr_148_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa376f0);
  }

  static inline data_expression rewr_148_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_148_0(this_rewriter); }

  static inline data_expression rewr_148_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_148_0(this_rewriter); }


  // [147] rhead: List(Trans) -> Trans
  template < class DATA_EXPR0>
  static inline data_expression rewr_147_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@S(@var_0, @@N(@@F([], @@R(@var_0), @@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@R(rhead(@var_1 |> @var_2))))), @@D(@@X))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91b150) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        if (uint_address(arg0[2]) == 0x55a6cf91b120) // F2a "[]"
        {
          const data_expression& t1 = down_cast<data_expression>(arg0[2]);
          return var_0; // R1 @var_0
        }
        else
        {
          if (is_application_no_check(down_cast<data_expression>(arg0[2])) && uint_address(down_cast<data_expression>(arg0[2])[0]) == 0x55a6cf91b150) // F2b |>
          {
            const data_expression& t1 = down_cast<data_expression>(arg0[2]);
            const data_expression& var_1 = down_cast<data_expression>(t1[1]); // S2
            const data_expression& var_2 = down_cast<data_expression>(t1[2]); // S2
            return rewr_147_1(rewr_140_2(var_1, var_2,  this_rewriter),  this_rewriter); // R1 rhead(@var_1 |> @var_2)
          }
          else
          {
          }
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91b2a0))), arg0);
  }

  static inline data_expression rewr_147_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_147_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_147_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_147_1(t[0], this_rewriter); }


  // [147] rhead: List(Trans) -> Trans
  static inline const data_expression& rewr_147_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2e120);
  }

  static inline data_expression rewr_147_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_147_0(this_rewriter); }

  static inline data_expression rewr_147_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_147_0(this_rewriter); }


  // [146] tail: List(Trans) -> List(Trans)
  template < class DATA_EXPR0>
  static inline data_expression rewr_146_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@N(@@S(@var_1, @@R(@var_1))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91b150) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91b270))), arg0);
  }

  static inline data_expression rewr_146_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_146_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_146_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_146_1(t[0], this_rewriter); }


  // [146] tail: List(Trans) -> List(Trans)
  static inline const data_expression& rewr_146_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa361f0);
  }

  static inline data_expression rewr_146_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_146_0(this_rewriter); }

  static inline data_expression rewr_146_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_146_0(this_rewriter); }


  // [145] head: List(Trans) -> Trans
  template < class DATA_EXPR0>
  static inline data_expression rewr_145_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@S(@var_0, @@N(@@R(@var_0))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91b150) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        return var_0; // R1 @var_0
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91b240))), arg0);
  }

  static inline data_expression rewr_145_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_145_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_145_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_145_1(t[0], this_rewriter); }


  // [145] head: List(Trans) -> Trans
  static inline const data_expression& rewr_145_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa35a80);
  }

  static inline data_expression rewr_145_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_145_0(this_rewriter); }

  static inline data_expression rewr_145_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_145_0(this_rewriter); }


  // [144] .: List(Trans) # Nat -> Trans
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_144_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(|>, @@S(@var_0, @@N(@@S(@var_1, @@D(@@N(@@F(0, @@R(@var_0), @@F(@cNat, @@S(@var_2, @@R(@var_1 . pred(@var_2))), @@X))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91b150) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        if (uint_address(arg1) == 0x55a6cf918b40) // F1
        {
          return var_0; // R1 @var_0
        }
        else
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
          {
            const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
            return rewr_144_2(var_1, rewr_116_1(var_2,  this_rewriter),  this_rewriter); // R1 @var_1 . pred(@var_2)
          }
          else
          {
          }
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91b210))), arg0, arg1);
  }

  static inline data_expression rewr_144_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_144_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_144_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_144_2(t[0], t[1], this_rewriter); }


  // [144] .: List(Trans) # Nat -> Trans
  static inline const data_expression& rewr_144_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa37790);
  }

  static inline data_expression rewr_144_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_144_0(this_rewriter); }

  static inline data_expression rewr_144_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_144_0(this_rewriter); }


  // [143] ++: List(Trans) # List(Trans) -> List(Trans)
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_143_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@S(@var_0, @@N(@@S(@var_1, @@D(@@N(@@S(@var_2, @@R(@var_0 |> @var_1 ++ @var_2))))))), @@F([], @@D(@@N(@@S(@var_0, @@R(@var_0)))), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91b150) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const DATA_EXPR1& var_2 = arg_not_nf1; // S1b
        return rewr_140_2(var_0, rewr_143_2(var_1, var_2,  this_rewriter),  this_rewriter); // R1 @var_0 |> @var_1 ++ @var_2
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf91b120) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@F([], @@R(@var_0), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address(arg1) == 0x55a6cf91b120) // F1
      {
        return var_0; // R1 @var_0
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91b1e0))), arg0, arg1);
  }

  static inline data_expression rewr_143_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_143_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_143_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_143_2(t[0], t[1], this_rewriter); }


  // [143] ++: List(Trans) # List(Trans) -> List(Trans)
  static inline const data_expression& rewr_143_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2e5b0);
  }

  static inline data_expression rewr_143_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_143_0(this_rewriter); }

  static inline data_expression rewr_143_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_143_0(this_rewriter); }


  // [142] <|: List(Trans) # Trans -> List(Trans)
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_142_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@S(@var_0, @@N(@@S(@var_1, @@D(@@N(@@S(@var_2, @@R(@var_0 |> @var_1 <| @var_2))))))), @@F([], @@D(@@N(@@S(@var_0, @@R([@var_0])))), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91b150) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const DATA_EXPR1& var_2 = arg_not_nf1; // S1b
        return rewr_140_2(var_0, rewr_142_2(var_1, var_2,  this_rewriter),  this_rewriter); // R1 @var_0 |> @var_1 <| @var_2
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf91b120) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return rewr_140_2(local_rewrite(var_0, this_rewriter), *reinterpret_cast<const data_expression*>(0x55a6cfb2d930),  this_rewriter); // R1 [@var_0]
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91b1b0))), arg0, local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_142_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_142_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_142_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_142_2(t[0], t[1], this_rewriter); }


  // [142] <|: List(Trans) # Trans -> List(Trans)
  static inline const data_expression& rewr_142_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa36220);
  }

  static inline data_expression rewr_142_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_142_0(this_rewriter); }

  static inline data_expression rewr_142_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_142_0(this_rewriter); }


  // [141] #: List(Trans) -> Nat
  template < class DATA_EXPR0>
  static inline data_expression rewr_141_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@N(@@S(@var_1, @@R(succ(#@var_1)))), @@F([], @@R(0), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf91b150) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        return rewr_20_1(rewr_115_1(rewr_141_1(var_1,  this_rewriter),  this_rewriter),  this_rewriter); // R1 succ(#@var_1)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf91b120) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a570); // R1 0
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91b180))), arg0);
  }

  static inline data_expression rewr_141_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_141_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_141_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_141_1(t[0], this_rewriter); }


  // [141] #: List(Trans) -> Nat
  static inline const data_expression& rewr_141_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa35af0);
  }

  static inline data_expression rewr_141_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_141_0(this_rewriter); }

  static inline data_expression rewr_141_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_141_0(this_rewriter); }


  // [53] in: Trans # List(Trans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_53_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@N(@@F([], @@R(false), @@X))
    {
      if (uint_address(arg1) == 0x55a6cf91b120) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@S(@var_0, @@N(@@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@R(@var_0 == @var_1 || @var_0 in @var_2)))), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf91b150) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg1[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg1[2]); // S2
        return rewr_93_2(rewr_92_2(var_0, var_1,  this_rewriter), delayed_rewr_53_2<data_expression, data_expression>(var_0, var_2,  this_rewriter),  this_rewriter); // R1 @var_0 == @var_1 || @var_0 in @var_2
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf917520))), arg0, arg1);
  }

  static inline data_expression rewr_53_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_53_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_53_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_53_2(t[0], t[1], this_rewriter); }


  // [53] in: Trans # List(Trans) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_53_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_53_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_53_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [53] in: Trans # List(Trans) -> Bool
  static inline const data_expression& rewr_53_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfaa44a0);
  }

  static inline data_expression rewr_53_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_53_0(this_rewriter); }

  static inline data_expression rewr_53_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_53_0(this_rewriter); }


  // [138] >: List(HistoryLogEntry) # List(HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_138_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_132_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91aee0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_138_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_138_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_138_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_138_2(t[0], t[1], this_rewriter); }


  // [138] >: List(HistoryLogEntry) # List(HistoryLogEntry) -> Bool
  static inline const data_expression& rewr_138_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa36130);
  }

  static inline data_expression rewr_138_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_138_0(this_rewriter); }

  static inline data_expression rewr_138_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_138_0(this_rewriter); }


  // [137] >=: List(HistoryLogEntry) # List(HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_137_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_134_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91aeb0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_137_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_137_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_137_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_137_2(t[0], t[1], this_rewriter); }


  // [137] >=: List(HistoryLogEntry) # List(HistoryLogEntry) -> Bool
  static inline const data_expression& rewr_137_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa35310);
  }

  static inline data_expression rewr_137_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_137_0(this_rewriter); }

  static inline data_expression rewr_137_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_137_0(this_rewriter); }


  // [136] if: Bool # List(HistoryLogEntry) # List(HistoryLogEntry) -> List(HistoryLogEntry)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_136_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91ae80))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_136_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_136_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_136_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_136_3(t[0], t[1], t[2], this_rewriter); }


  // [136] if: Bool # List(HistoryLogEntry) # List(HistoryLogEntry) -> List(HistoryLogEntry)
  static inline const data_expression& rewr_136_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa361c0);
  }

  static inline data_expression rewr_136_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_136_0(this_rewriter); }

  static inline data_expression rewr_136_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_136_0(this_rewriter); }


  // [135] !=: List(HistoryLogEntry) # List(HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_135_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_130_2(local_rewrite(var_0, this_rewriter), local_rewrite(var_1, this_rewriter),  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91ae50))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_135_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_135_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_135_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_135_2(t[0], t[1], this_rewriter); }


  // [135] !=: List(HistoryLogEntry) # List(HistoryLogEntry) -> Bool
  static inline const data_expression& rewr_135_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa35400);
  }

  static inline data_expression rewr_135_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_135_0(this_rewriter); }

  static inline data_expression rewr_135_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_135_0(this_rewriter); }


  // [134] <=: List(HistoryLogEntry) # List(HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_134_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(true), @@F([], @@R(false), @@F(|>, @@S(@var_3, @@N(@@S(@var_4, @@R(@var_1 == @var_3 && @var_2 <= @var_4 || @var_1 < @var_3)))), @@X)))))))), @@F([], @@D(@@N(@@M(@var_0, @@R(true), @@F(|>, @@N(@@R(true)), @@X)))), @@N(@@M(@var_0, @@R(true), @@X)))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf919200) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
          if (uint_address(arg1) == 0x55a6cf919290) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf919200) // F1
            {
              const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
              const data_expression& var_4 = down_cast<data_expression>(arg1[2]); // S2
              return rewr_93_2(rewr_49_2(rewr_131_2(var_1, var_3,  this_rewriter), delayed_rewr_134_2<data_expression, data_expression>(var_2, var_4,  this_rewriter),  this_rewriter), delayed_rewr_133_2<data_expression, data_expression>(var_1, var_3,  this_rewriter),  this_rewriter); // R1 @var_1 == @var_3 && @var_2 <= @var_4 || @var_1 < @var_3
            }
            else
            {
            }
          }
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf919290) // F1
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf919200) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
            }
          }
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91a940))), arg0, arg1);
  }

  static inline data_expression rewr_134_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_134_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_134_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_134_2(t[0], t[1], this_rewriter); }


  // [133] <: HistoryLogEntry # HistoryLogEntry -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_133_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_133_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_133_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [134] <=: List(HistoryLogEntry) # List(HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_134_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_134_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_134_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [134] <=: List(HistoryLogEntry) # List(HistoryLogEntry) -> Bool
  static inline const data_expression& rewr_134_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa352e0);
  }

  static inline data_expression rewr_134_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_134_0(this_rewriter); }

  static inline data_expression rewr_134_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_134_0(this_rewriter); }


  // [132] <: List(HistoryLogEntry) # List(HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_132_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(false), @@F([], @@R(false), @@F(|>, @@S(@var_3, @@N(@@S(@var_4, @@R(@var_1 == @var_3 && @var_2 < @var_4 || @var_1 < @var_3)))), @@X)))))))), @@F([], @@D(@@N(@@M(@var_0, @@R(false), @@F(|>, @@N(@@R(true)), @@X)))), @@N(@@M(@var_0, @@R(false), @@X)))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf919200) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
        }
        else
        {
          if (uint_address(arg1) == 0x55a6cf919290) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf919200) // F1
            {
              const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
              const data_expression& var_4 = down_cast<data_expression>(arg1[2]); // S2
              return rewr_93_2(rewr_49_2(rewr_131_2(var_1, var_3,  this_rewriter), delayed_rewr_132_2<data_expression, data_expression>(var_2, var_4,  this_rewriter),  this_rewriter), delayed_rewr_133_2<data_expression, data_expression>(var_1, var_3,  this_rewriter),  this_rewriter); // R1 @var_1 == @var_3 && @var_2 < @var_4 || @var_1 < @var_3
            }
            else
            {
            }
          }
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf919290) // F1
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf919200) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
            }
          }
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91a790))), arg0, arg1);
  }

  static inline data_expression rewr_132_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_132_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_132_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_132_2(t[0], t[1], this_rewriter); }


  // [132] <: List(HistoryLogEntry) # List(HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_132_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_132_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_132_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [132] <: List(HistoryLogEntry) # List(HistoryLogEntry) -> Bool
  static inline const data_expression& rewr_132_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa35b50);
  }

  static inline data_expression rewr_132_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_132_0(this_rewriter); }

  static inline data_expression rewr_132_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_132_0(this_rewriter); }


  // [130] ==: List(HistoryLogEntry) # List(HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_130_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(true), @@F([], @@R(false), @@F(|>, @@S(@var_3, @@N(@@S(@var_4, @@R(@var_1 == @var_3 && @var_2 == @var_4)))), @@X)))))))), @@F([], @@D(@@N(@@M(@var_0, @@R(true), @@F(|>, @@N(@@R(false)), @@X)))), @@N(@@M(@var_0, @@R(true), @@X)))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf919200) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
          if (uint_address(arg1) == 0x55a6cf919290) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf919200) // F1
            {
              const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
              const data_expression& var_4 = down_cast<data_expression>(arg1[2]); // S2
              return rewr_49_2(rewr_131_2(var_1, var_3,  this_rewriter), delayed_rewr_130_2<data_expression, data_expression>(var_2, var_4,  this_rewriter),  this_rewriter); // R1 @var_1 == @var_3 && @var_2 == @var_4
            }
            else
            {
            }
          }
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf919290) // F1
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf919200) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
            }
            else
            {
            }
          }
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91a5e0))), arg0, arg1);
  }

  static inline data_expression rewr_130_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_130_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_130_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_130_2(t[0], t[1], this_rewriter); }


  // [130] ==: List(HistoryLogEntry) # List(HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_130_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_130_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_130_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [130] ==: List(HistoryLogEntry) # List(HistoryLogEntry) -> Bool
  static inline const data_expression& rewr_130_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa35340);
  }

  static inline data_expression rewr_130_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_130_0(this_rewriter); }

  static inline data_expression rewr_130_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_130_0(this_rewriter); }


  // [129] rtail: List(HistoryLogEntry) -> List(HistoryLogEntry)
  template < class DATA_EXPR0>
  static inline data_expression rewr_129_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@S(@var_0, @@N(@@F([], @@R([]), @@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@R(@var_0 |> rtail(@var_1 |> @var_2))))), @@D(@@X))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf919200) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        if (uint_address(arg0[2]) == 0x55a6cf919290) // F2a "[]"
        {
          const data_expression& t1 = down_cast<data_expression>(arg0[2]);
          return *reinterpret_cast<const data_expression*>(0x55a6cfa35b20); // R1 []
        }
        else
        {
          if (is_application_no_check(down_cast<data_expression>(arg0[2])) && uint_address(down_cast<data_expression>(arg0[2])[0]) == 0x55a6cf919200) // F2b |>
          {
            const data_expression& t1 = down_cast<data_expression>(arg0[2]);
            const data_expression& var_1 = down_cast<data_expression>(t1[1]); // S2
            const data_expression& var_2 = down_cast<data_expression>(t1[2]); // S2
            return rewr_98_2(var_0, rewr_129_1(rewr_98_2(var_1, var_2,  this_rewriter),  this_rewriter),  this_rewriter); // R1 @var_0 |> rtail(@var_1 |> @var_2)
          }
          else
          {
          }
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91a4c0))), arg0);
  }

  static inline data_expression rewr_129_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_129_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_129_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_129_1(t[0], this_rewriter); }


  // [129] rtail: List(HistoryLogEntry) -> List(HistoryLogEntry)
  static inline const data_expression& rewr_129_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa35430);
  }

  static inline data_expression rewr_129_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_129_0(this_rewriter); }

  static inline data_expression rewr_129_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_129_0(this_rewriter); }


  // [128] rhead: List(HistoryLogEntry) -> HistoryLogEntry
  template < class DATA_EXPR0>
  static inline data_expression rewr_128_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@S(@var_0, @@N(@@F([], @@R(@var_0), @@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@R(rhead(@var_1 |> @var_2))))), @@D(@@X))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf919200) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        if (uint_address(arg0[2]) == 0x55a6cf919290) // F2a "[]"
        {
          const data_expression& t1 = down_cast<data_expression>(arg0[2]);
          return var_0; // R1 @var_0
        }
        else
        {
          if (is_application_no_check(down_cast<data_expression>(arg0[2])) && uint_address(down_cast<data_expression>(arg0[2])[0]) == 0x55a6cf919200) // F2b |>
          {
            const data_expression& t1 = down_cast<data_expression>(arg0[2]);
            const data_expression& var_1 = down_cast<data_expression>(t1[1]); // S2
            const data_expression& var_2 = down_cast<data_expression>(t1[2]); // S2
            return rewr_128_1(rewr_98_2(var_1, var_2,  this_rewriter),  this_rewriter); // R1 rhead(@var_1 |> @var_2)
          }
          else
          {
          }
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91a490))), arg0);
  }

  static inline data_expression rewr_128_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_128_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_128_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_128_1(t[0], this_rewriter); }


  // [128] rhead: List(HistoryLogEntry) -> HistoryLogEntry
  static inline const data_expression& rewr_128_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2e710);
  }

  static inline data_expression rewr_128_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_128_0(this_rewriter); }

  static inline data_expression rewr_128_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_128_0(this_rewriter); }


  // [127] tail: List(HistoryLogEntry) -> List(HistoryLogEntry)
  template < class DATA_EXPR0>
  static inline data_expression rewr_127_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@N(@@S(@var_1, @@R(@var_1))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf919200) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91a460))), arg0);
  }

  static inline data_expression rewr_127_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_127_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_127_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_127_1(t[0], this_rewriter); }


  // [127] tail: List(HistoryLogEntry) -> List(HistoryLogEntry)
  static inline const data_expression& rewr_127_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2ddd0);
  }

  static inline data_expression rewr_127_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_127_0(this_rewriter); }

  static inline data_expression rewr_127_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_127_0(this_rewriter); }


  // [126] .: List(HistoryLogEntry) # Nat -> HistoryLogEntry
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_126_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(|>, @@S(@var_0, @@N(@@S(@var_1, @@D(@@N(@@F(0, @@R(@var_0), @@F(@cNat, @@S(@var_2, @@R(@var_1 . pred(@var_2))), @@X))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf919200) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        if (uint_address(arg1) == 0x55a6cf918b40) // F1
        {
          return var_0; // R1 @var_0
        }
        else
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
          {
            const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
            return rewr_126_2(var_1, rewr_116_1(var_2,  this_rewriter),  this_rewriter); // R1 @var_1 . pred(@var_2)
          }
          else
          {
          }
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91a430))), arg0, arg1);
  }

  static inline data_expression rewr_126_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_126_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_126_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_126_2(t[0], t[1], this_rewriter); }


  // [126] .: List(HistoryLogEntry) # Nat -> HistoryLogEntry
  static inline const data_expression& rewr_126_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa359c0);
  }

  static inline data_expression rewr_126_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_126_0(this_rewriter); }

  static inline data_expression rewr_126_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_126_0(this_rewriter); }


  // [125] ++: List(HistoryLogEntry) # List(HistoryLogEntry) -> List(HistoryLogEntry)
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_125_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@S(@var_0, @@N(@@S(@var_1, @@D(@@N(@@S(@var_2, @@R(@var_0 |> @var_1 ++ @var_2))))))), @@F([], @@D(@@N(@@S(@var_0, @@R(@var_0)))), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf919200) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const DATA_EXPR1& var_2 = arg_not_nf1; // S1b
        return rewr_98_2(var_0, rewr_125_2(var_1, var_2,  this_rewriter),  this_rewriter); // R1 @var_0 |> @var_1 ++ @var_2
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf919290) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@F([], @@R(@var_0), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address(arg1) == 0x55a6cf919290) // F1
      {
        return var_0; // R1 @var_0
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91a400))), arg0, arg1);
  }

  static inline data_expression rewr_125_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_125_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_125_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_125_2(t[0], t[1], this_rewriter); }


  // [125] ++: List(HistoryLogEntry) # List(HistoryLogEntry) -> List(HistoryLogEntry)
  static inline const data_expression& rewr_125_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa34df0);
  }

  static inline data_expression rewr_125_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_125_0(this_rewriter); }

  static inline data_expression rewr_125_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_125_0(this_rewriter); }


  // [124] <|: List(HistoryLogEntry) # HistoryLogEntry -> List(HistoryLogEntry)
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_124_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@S(@var_0, @@N(@@S(@var_1, @@D(@@N(@@S(@var_2, @@R(@var_0 |> @var_1 <| @var_2))))))), @@F([], @@D(@@N(@@S(@var_0, @@R([@var_0])))), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf919200) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const DATA_EXPR1& var_2 = arg_not_nf1; // S1b
        return rewr_98_2(var_0, rewr_124_2(var_1, var_2,  this_rewriter),  this_rewriter); // R1 @var_0 |> @var_1 <| @var_2
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf919290) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return rewr_98_2(local_rewrite(var_0, this_rewriter), *reinterpret_cast<const data_expression*>(0x55a6cfa35b20),  this_rewriter); // R1 [@var_0]
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91a3d0))), arg0, local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_124_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_124_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_124_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_124_2(t[0], t[1], this_rewriter); }


  // [124] <|: List(HistoryLogEntry) # HistoryLogEntry -> List(HistoryLogEntry)
  static inline const data_expression& rewr_124_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2e620);
  }

  static inline data_expression rewr_124_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_124_0(this_rewriter); }

  static inline data_expression rewr_124_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_124_0(this_rewriter); }


  // [123] #: List(HistoryLogEntry) -> Nat
  template < class DATA_EXPR0>
  static inline data_expression rewr_123_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@N(@@S(@var_1, @@R(succ(#@var_1)))), @@F([], @@R(0), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf919200) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        return rewr_20_1(rewr_115_1(rewr_123_1(var_1,  this_rewriter),  this_rewriter),  this_rewriter); // R1 succ(#@var_1)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf919290) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a570); // R1 0
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91a3a0))), arg0);
  }

  static inline data_expression rewr_123_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_123_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_123_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_123_1(t[0], this_rewriter); }


  // [123] #: List(HistoryLogEntry) -> Nat
  static inline const data_expression& rewr_123_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa369d0);
  }

  static inline data_expression rewr_123_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_123_0(this_rewriter); }

  static inline data_expression rewr_123_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_123_0(this_rewriter); }


  // [122] in: HistoryLogEntry # List(HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_122_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@N(@@F([], @@R(false), @@X))
    {
      if (uint_address(arg1) == 0x55a6cf919290) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@S(@var_0, @@N(@@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@R(@var_0 == @var_1 || @var_0 in @var_2)))), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf919200) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg1[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg1[2]); // S2
        return rewr_93_2(rewr_131_2(var_0, var_1,  this_rewriter), delayed_rewr_122_2<data_expression, data_expression>(var_0, var_2,  this_rewriter),  this_rewriter); // R1 @var_0 == @var_1 || @var_0 in @var_2
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91a370))), arg0, arg1);
  }

  static inline data_expression rewr_122_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_122_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_122_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_122_2(t[0], t[1], this_rewriter); }


  // [122] in: HistoryLogEntry # List(HistoryLogEntry) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_122_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_122_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_122_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [122] in: HistoryLogEntry # List(HistoryLogEntry) -> Bool
  static inline const data_expression& rewr_122_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2dd00);
  }

  static inline data_expression rewr_122_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_122_0(this_rewriter); }

  static inline data_expression rewr_122_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_122_0(this_rewriter); }


  // [69] head: List(HistoryLogEntry) -> HistoryLogEntry
  template < class DATA_EXPR0>
  static inline data_expression rewr_69_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@S(@var_0, @@N(@@R(@var_0))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf919200) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        return var_0; // R1 @var_0
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf917f40))), arg0);
  }

  static inline data_expression rewr_69_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_69_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_69_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_69_1(t[0], this_rewriter); }


  // [69] head: List(HistoryLogEntry) -> HistoryLogEntry
  static inline const data_expression& rewr_69_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2e2f0);
  }

  static inline data_expression rewr_69_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_69_0(this_rewriter); }

  static inline data_expression rewr_69_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_69_0(this_rewriter); }


  // [120] >: List(PlaceTokens) # List(PlaceTokens) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_120_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 < @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_112_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 < @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91a0d0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_120_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_120_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_120_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_120_2(t[0], t[1], this_rewriter); }


  // [120] >: List(PlaceTokens) # List(PlaceTokens) -> Bool
  static inline const data_expression& rewr_120_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2e530);
  }

  static inline data_expression rewr_120_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_120_0(this_rewriter); }

  static inline data_expression rewr_120_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_120_0(this_rewriter); }


  // [119] >=: List(PlaceTokens) # List(PlaceTokens) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_119_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(@var_1 <= @var_0))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_114_2(local_rewrite(var_1, this_rewriter), local_rewrite(var_0, this_rewriter),  this_rewriter); // R1 @var_1 <= @var_0
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91a0a0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_119_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_119_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_119_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_119_2(t[0], t[1], this_rewriter); }


  // [119] >=: List(PlaceTokens) # List(PlaceTokens) -> Bool
  static inline const data_expression& rewr_119_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa32590);
  }

  static inline data_expression rewr_119_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_119_0(this_rewriter); }

  static inline data_expression rewr_119_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_119_0(this_rewriter); }


  // [118] if: Bool # List(PlaceTokens) # List(PlaceTokens) -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2>
  static inline data_expression rewr_118_3(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(false, @@D(@@N(@@N(@@S(@var_1, @@R(@var_1))))), @@F(true, @@D(@@N(@@S(@var_0, @@N(@@R(@var_0))))), @@X))
    {
      if (uint_address(arg0) == 0x55a6cf9183f0) // F1
      {
        const DATA_EXPR2& var_1 = arg_not_nf2; // S1b
        return local_rewrite(var_1, this_rewriter); // R1 @var_1
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf916890) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@A(2)
    const data_expression& arg2 = local_rewrite(arg_not_nf2,this_rewriter);
    // Considering argument 2
    // @@N(@@S(@var_1, @@N(@@M(@var_1, @@R(@var_1), @@X))))
    {
      const data_expression& var_1 = arg1; // S1a
      if (var_1 == arg2) // M
      {
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91a070))), arg0, arg1, arg2);
  }

  static inline data_expression rewr_118_3_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_118_3(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), this_rewriter); }

  static inline data_expression rewr_118_3_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_118_3(t[0], t[1], t[2], this_rewriter); }


  // [118] if: Bool # List(PlaceTokens) # List(PlaceTokens) -> List(PlaceTokens)
  static inline const data_expression& rewr_118_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa35a20);
  }

  static inline data_expression rewr_118_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_118_0(this_rewriter); }

  static inline data_expression rewr_118_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_118_0(this_rewriter); }


  // [117] !=: List(PlaceTokens) # List(PlaceTokens) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_117_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@S(@var_0, @@N(@@S(@var_1, @@R(!(@var_0 == @var_1)))))
    {
      const DATA_EXPR0& var_0 = arg_not_nf0; // S1b
      const DATA_EXPR1& var_1 = arg_not_nf1; // S1b
      return rewr_121_1(rewr_110_2(local_rewrite(var_0, this_rewriter), local_rewrite(var_1, this_rewriter),  this_rewriter),  this_rewriter); // R1 !(@var_0 == @var_1)
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91a040))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_117_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_117_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_117_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_117_2(t[0], t[1], this_rewriter); }


  // [117] !=: List(PlaceTokens) # List(PlaceTokens) -> Bool
  static inline const data_expression& rewr_117_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2d570);
  }

  static inline data_expression rewr_117_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_117_0(this_rewriter); }

  static inline data_expression rewr_117_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_117_0(this_rewriter); }


  // [114] <=: List(PlaceTokens) # List(PlaceTokens) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_114_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(true), @@F([], @@R(false), @@F(|>, @@S(@var_3, @@N(@@S(@var_4, @@R(@var_1 == @var_3 && @var_2 <= @var_4 || @var_1 < @var_3)))), @@X)))))))), @@F([], @@D(@@N(@@M(@var_0, @@R(true), @@F(|>, @@N(@@R(true)), @@X)))), @@N(@@M(@var_0, @@R(true), @@X)))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917760) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
          if (uint_address(arg1) == 0x55a6cf917640) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf917760) // F1
            {
              const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
              const data_expression& var_4 = down_cast<data_expression>(arg1[2]); // S2
              return rewr_93_2(rewr_49_2(rewr_111_2(var_1, var_3,  this_rewriter), delayed_rewr_114_2<data_expression, data_expression>(var_2, var_4,  this_rewriter),  this_rewriter), delayed_rewr_113_2<data_expression, data_expression>(var_1, var_3,  this_rewriter),  this_rewriter); // R1 @var_1 == @var_3 && @var_2 <= @var_4 || @var_1 < @var_3
            }
            else
            {
            }
          }
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf917640) // F1
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf917760) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
            }
          }
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf919ad0))), arg0, arg1);
  }

  static inline data_expression rewr_114_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_114_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_114_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_114_2(t[0], t[1], this_rewriter); }


  // [113] <: PlaceTokens # PlaceTokens -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_113_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_113_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_113_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [114] <=: List(PlaceTokens) # List(PlaceTokens) -> Bool
  static inline const data_expression& rewr_114_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2e270);
  }

  static inline data_expression rewr_114_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_114_0(this_rewriter); }

  static inline data_expression rewr_114_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_114_0(this_rewriter); }


  // [112] <: List(PlaceTokens) # List(PlaceTokens) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_112_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(false), @@F([], @@R(false), @@F(|>, @@S(@var_3, @@N(@@S(@var_4, @@R(@var_1 == @var_3 && @var_2 < @var_4 || @var_1 < @var_3)))), @@X)))))))), @@F([], @@D(@@N(@@M(@var_0, @@R(false), @@F(|>, @@N(@@R(true)), @@X)))), @@N(@@M(@var_0, @@R(false), @@X)))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917760) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
        }
        else
        {
          if (uint_address(arg1) == 0x55a6cf917640) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf917760) // F1
            {
              const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
              const data_expression& var_4 = down_cast<data_expression>(arg1[2]); // S2
              return rewr_93_2(rewr_49_2(rewr_111_2(var_1, var_3,  this_rewriter), delayed_rewr_112_2<data_expression, data_expression>(var_2, var_4,  this_rewriter),  this_rewriter), delayed_rewr_113_2<data_expression, data_expression>(var_1, var_3,  this_rewriter),  this_rewriter); // R1 @var_1 == @var_3 && @var_2 < @var_4 || @var_1 < @var_3
            }
            else
            {
            }
          }
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf917640) // F1
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf917760) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
            }
            else
            {
            }
          }
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf919920))), arg0, arg1);
  }

  static inline data_expression rewr_112_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_112_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_112_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_112_2(t[0], t[1], this_rewriter); }


  // [112] <: List(PlaceTokens) # List(PlaceTokens) -> Bool
  static inline const data_expression& rewr_112_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2dda0);
  }

  static inline data_expression rewr_112_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_112_0(this_rewriter); }

  static inline data_expression rewr_112_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_112_0(this_rewriter); }


  // [110] ==: List(PlaceTokens) # List(PlaceTokens) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_110_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@D(@@N(@@M(@var_0, @@R(true), @@F([], @@R(false), @@F(|>, @@S(@var_3, @@N(@@S(@var_4, @@R(@var_1 == @var_3 && @var_2 == @var_4)))), @@X)))))))), @@F([], @@D(@@N(@@M(@var_0, @@R(true), @@F(|>, @@N(@@R(false)), @@X)))), @@N(@@M(@var_0, @@R(true), @@X)))))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917760) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg0[2]); // S2
        if (var_0 == arg1) // M
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
        }
        else
        {
          if (uint_address(arg1) == 0x55a6cf917640) // F1
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf917760) // F1
            {
              const data_expression& var_3 = down_cast<data_expression>(arg1[1]); // S2
              const data_expression& var_4 = down_cast<data_expression>(arg1[2]); // S2
              return rewr_49_2(rewr_111_2(var_1, var_3,  this_rewriter), delayed_rewr_110_2<data_expression, data_expression>(var_2, var_4,  this_rewriter),  this_rewriter); // R1 @var_1 == @var_3 && @var_2 == @var_4
            }
            else
            {
            }
          }
        }
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf917640) // F1
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
            if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf917760) // F1
            {
              return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
            }
            else
            {
            }
          }
        }
        else
        {
          if (var_0 == arg1) // M
          {
            return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030); // R1 true
          }
          else
          {
          }
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf919770))), arg0, arg1);
  }

  static inline data_expression rewr_110_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_110_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_110_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_110_2(t[0], t[1], this_rewriter); }


  // [110] ==: List(PlaceTokens) # List(PlaceTokens) -> Bool
  static inline const data_expression& rewr_110_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa32530);
  }

  static inline data_expression rewr_110_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_110_0(this_rewriter); }

  static inline data_expression rewr_110_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_110_0(this_rewriter); }


  // [109] rtail: List(PlaceTokens) -> List(PlaceTokens)
  template < class DATA_EXPR0>
  static inline data_expression rewr_109_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@S(@var_0, @@N(@@F([], @@R([]), @@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@R(@var_0 |> rtail(@var_1 |> @var_2))))), @@D(@@X))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917760) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        if (uint_address(arg0[2]) == 0x55a6cf917640) // F2a "[]"
        {
          const data_expression& t1 = down_cast<data_expression>(arg0[2]);
          return *reinterpret_cast<const data_expression*>(0x55a6cfa323e0); // R1 []
        }
        else
        {
          if (is_application_no_check(down_cast<data_expression>(arg0[2])) && uint_address(down_cast<data_expression>(arg0[2])[0]) == 0x55a6cf917760) // F2b |>
          {
            const data_expression& t1 = down_cast<data_expression>(arg0[2]);
            const data_expression& var_1 = down_cast<data_expression>(t1[1]); // S2
            const data_expression& var_2 = down_cast<data_expression>(t1[2]); // S2
            return rewr_58_2(var_0, rewr_109_1(rewr_58_2(var_1, var_2,  this_rewriter),  this_rewriter),  this_rewriter); // R1 @var_0 |> rtail(@var_1 |> @var_2)
          }
          else
          {
          }
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf919620))), arg0);
  }

  static inline data_expression rewr_109_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_109_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_109_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_109_1(t[0], this_rewriter); }


  // [109] rtail: List(PlaceTokens) -> List(PlaceTokens)
  static inline const data_expression& rewr_109_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2d5a0);
  }

  static inline data_expression rewr_109_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_109_0(this_rewriter); }

  static inline data_expression rewr_109_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_109_0(this_rewriter); }


  // [108] rhead: List(PlaceTokens) -> PlaceTokens
  template < class DATA_EXPR0>
  static inline data_expression rewr_108_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@S(@var_0, @@N(@@F([], @@R(@var_0), @@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@R(rhead(@var_1 |> @var_2))))), @@D(@@X))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917760) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        if (uint_address(arg0[2]) == 0x55a6cf917640) // F2a "[]"
        {
          const data_expression& t1 = down_cast<data_expression>(arg0[2]);
          return var_0; // R1 @var_0
        }
        else
        {
          if (is_application_no_check(down_cast<data_expression>(arg0[2])) && uint_address(down_cast<data_expression>(arg0[2])[0]) == 0x55a6cf917760) // F2b |>
          {
            const data_expression& t1 = down_cast<data_expression>(arg0[2]);
            const data_expression& var_1 = down_cast<data_expression>(t1[1]); // S2
            const data_expression& var_2 = down_cast<data_expression>(t1[2]); // S2
            return rewr_108_1(rewr_58_2(var_1, var_2,  this_rewriter),  this_rewriter); // R1 rhead(@var_1 |> @var_2)
          }
          else
          {
          }
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9195f0))), arg0);
  }

  static inline data_expression rewr_108_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_108_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_108_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_108_1(t[0], this_rewriter); }


  // [108] rhead: List(PlaceTokens) -> PlaceTokens
  static inline const data_expression& rewr_108_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa32410);
  }

  static inline data_expression rewr_108_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_108_0(this_rewriter); }

  static inline data_expression rewr_108_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_108_0(this_rewriter); }


  // [107] tail: List(PlaceTokens) -> List(PlaceTokens)
  template < class DATA_EXPR0>
  static inline data_expression rewr_107_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@N(@@S(@var_1, @@R(@var_1))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917760) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        return var_1; // R1 @var_1
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9195c0))), arg0);
  }

  static inline data_expression rewr_107_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_107_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_107_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_107_1(t[0], this_rewriter); }


  // [107] tail: List(PlaceTokens) -> List(PlaceTokens)
  static inline const data_expression& rewr_107_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa32470);
  }

  static inline data_expression rewr_107_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_107_0(this_rewriter); }

  static inline data_expression rewr_107_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_107_0(this_rewriter); }


  // [106] head: List(PlaceTokens) -> PlaceTokens
  template < class DATA_EXPR0>
  static inline data_expression rewr_106_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@S(@var_0, @@N(@@R(@var_0))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917760) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        return var_0; // R1 @var_0
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf919590))), arg0);
  }

  static inline data_expression rewr_106_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_106_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_106_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_106_1(t[0], this_rewriter); }


  // [106] head: List(PlaceTokens) -> PlaceTokens
  static inline const data_expression& rewr_106_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa324a0);
  }

  static inline data_expression rewr_106_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_106_0(this_rewriter); }

  static inline data_expression rewr_106_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_106_0(this_rewriter); }


  // [105] .: List(PlaceTokens) # Nat -> PlaceTokens
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_105_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@F(|>, @@S(@var_0, @@N(@@S(@var_1, @@D(@@N(@@F(0, @@R(@var_0), @@F(@cNat, @@S(@var_2, @@R(@var_1 . pred(@var_2))), @@X))))))), @@X)
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917760) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        if (uint_address(arg1) == 0x55a6cf918b40) // F1
        {
          return var_0; // R1 @var_0
        }
        else
        {
          if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf916aa0) // F1
          {
            const data_expression& var_2 = down_cast<data_expression>(arg1[1]); // S2
            return rewr_105_2(var_1, rewr_116_1(var_2,  this_rewriter),  this_rewriter); // R1 @var_1 . pred(@var_2)
          }
          else
          {
          }
        }
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf919560))), arg0, arg1);
  }

  static inline data_expression rewr_105_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_105_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_105_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_105_2(t[0], t[1], this_rewriter); }


  // [105] .: List(PlaceTokens) # Nat -> PlaceTokens
  static inline const data_expression& rewr_105_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa359f0);
  }

  static inline data_expression rewr_105_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_105_0(this_rewriter); }

  static inline data_expression rewr_105_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_105_0(this_rewriter); }


  // [104] ++: List(PlaceTokens) # List(PlaceTokens) -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_104_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@S(@var_0, @@N(@@S(@var_1, @@D(@@N(@@S(@var_2, @@R(@var_0 |> @var_1 ++ @var_2))))))), @@F([], @@D(@@N(@@S(@var_0, @@R(@var_0)))), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917760) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const DATA_EXPR1& var_2 = arg_not_nf1; // S1b
        return rewr_58_2(var_0, rewr_104_2(var_1, var_2,  this_rewriter),  this_rewriter); // R1 @var_0 |> @var_1 ++ @var_2
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf917640) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return local_rewrite(var_0, this_rewriter); // R1 @var_0
        }
        else
        {
        }
      }
    }
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@S(@var_0, @@N(@@F([], @@R(@var_0), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address(arg1) == 0x55a6cf917640) // F1
      {
        return var_0; // R1 @var_0
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf919530))), arg0, arg1);
  }

  static inline data_expression rewr_104_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_104_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_104_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_104_2(t[0], t[1], this_rewriter); }


  // [104] ++: List(PlaceTokens) # List(PlaceTokens) -> List(PlaceTokens)
  static inline const data_expression& rewr_104_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa32560);
  }

  static inline data_expression rewr_104_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_104_0(this_rewriter); }

  static inline data_expression rewr_104_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_104_0(this_rewriter); }


  // [103] <|: List(PlaceTokens) # PlaceTokens -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_103_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@S(@var_0, @@N(@@S(@var_1, @@D(@@N(@@S(@var_2, @@R(@var_0 |> @var_1 <| @var_2))))))), @@F([], @@D(@@N(@@S(@var_0, @@R([@var_0])))), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917760) // F1
      {
        const data_expression& var_0 = down_cast<data_expression>(arg0[1]); // S2
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        const DATA_EXPR1& var_2 = arg_not_nf1; // S1b
        return rewr_58_2(var_0, rewr_103_2(var_1, var_2,  this_rewriter),  this_rewriter); // R1 @var_0 |> @var_1 <| @var_2
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf917640) // F1
        {
          const DATA_EXPR1& var_0 = arg_not_nf1; // S1b
          return rewr_58_2(local_rewrite(var_0, this_rewriter), *reinterpret_cast<const data_expression*>(0x55a6cfa323e0),  this_rewriter); // R1 [@var_0]
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf919500))), arg0, local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_103_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_103_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_103_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_103_2(t[0], t[1], this_rewriter); }


  // [103] <|: List(PlaceTokens) # PlaceTokens -> List(PlaceTokens)
  static inline const data_expression& rewr_103_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa34d60);
  }

  static inline data_expression rewr_103_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_103_0(this_rewriter); }

  static inline data_expression rewr_103_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_103_0(this_rewriter); }


  // [102] #: List(PlaceTokens) -> Nat
  template < class DATA_EXPR0>
  static inline data_expression rewr_102_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@F(|>, @@N(@@S(@var_1, @@R(succ(#@var_1)))), @@F([], @@R(0), @@X))
    {
      if (uint_address((is_function_symbol(arg0) ? arg0 : arg0[0])) == 0x55a6cf917760) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg0[2]); // S2
        return rewr_20_1(rewr_115_1(rewr_102_1(var_1,  this_rewriter),  this_rewriter),  this_rewriter); // R1 succ(#@var_1)
      }
      else
      {
        if (uint_address(arg0) == 0x55a6cf917640) // F1
        {
          return *reinterpret_cast<const data_expression*>(0x55a6cfa6a570); // R1 0
        }
        else
        {
        }
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9194d0))), arg0);
  }

  static inline data_expression rewr_102_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_102_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_102_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_102_1(t[0], this_rewriter); }


  // [102] #: List(PlaceTokens) -> Nat
  static inline const data_expression& rewr_102_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2d540);
  }

  static inline data_expression rewr_102_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_102_0(this_rewriter); }

  static inline data_expression rewr_102_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_102_0(this_rewriter); }


  // [47] in: PlaceTokens # List(PlaceTokens) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_47_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    // @@A(1)
    const data_expression& arg1 = local_rewrite(arg_not_nf1,this_rewriter);
    // Considering argument 1
    // @@N(@@F([], @@R(false), @@X))
    {
      if (uint_address(arg1) == 0x55a6cf917640) // F1
      {
        return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690); // R1 false
      }
      else
      {
      }
    }
    // @@A(0)
    const data_expression& arg0 = local_rewrite(arg_not_nf0,this_rewriter);
    // Considering argument 0
    // @@S(@var_0, @@N(@@F(|>, @@S(@var_1, @@N(@@S(@var_2, @@R(@var_0 == @var_1 || @var_0 in @var_2)))), @@X)))
    {
      const data_expression& var_0 = arg0; // S1a
      if (uint_address((is_function_symbol(arg1) ? arg1 : arg1[0])) == 0x55a6cf917760) // F1
      {
        const data_expression& var_1 = down_cast<data_expression>(arg1[1]); // S2
        const data_expression& var_2 = down_cast<data_expression>(arg1[2]); // S2
        return rewr_93_2(rewr_111_2(var_0, var_1,  this_rewriter), delayed_rewr_47_2<data_expression, data_expression>(var_0, var_2,  this_rewriter),  this_rewriter); // R1 @var_0 == @var_1 || @var_0 in @var_2
      }
      else
      {
      }
    }
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf917250))), arg0, arg1);
  }

  static inline data_expression rewr_47_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_47_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_47_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_47_2(t[0], t[1], this_rewriter); }


  // [47] in: PlaceTokens # List(PlaceTokens) -> Bool
  template < class DATA_EXPR0, class DATA_EXPR1>
  class delayed_rewr_47_2
  {
    protected:
      const DATA_EXPR0& m_t0;
      const DATA_EXPR1& m_t1;
      RewriterCompilingJitty* this_rewriter;
    public:
      delayed_rewr_47_2(const DATA_EXPR0& t0, const DATA_EXPR1& t1, RewriterCompilingJitty* tr)
        : m_t0(t0), m_t1(t1), this_rewriter(tr)
      {}

      data_expression normal_form() const
      {
        return rewr_47_2(m_t0, m_t1, this_rewriter);
      }
  };
  
  // [47] in: PlaceTokens # List(PlaceTokens) -> Bool
  static inline const data_expression& rewr_47_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2e180);
  }

  static inline data_expression rewr_47_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_47_0(this_rewriter); }

  static inline data_expression rewr_47_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_47_0(this_rewriter); }


  // [706] marking_trans: (Place -> List(Nat)) # Trans_name -> MarkingTrans
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_706_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9ac460))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_706_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_706_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_706_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_706_2(t[0], t[1], this_rewriter); }


  // [706] marking_trans: (Place -> List(Nat)) # Trans_name -> MarkingTrans
  static inline const data_expression& rewr_706_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa31d30);
  }

  static inline data_expression rewr_706_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_706_0(this_rewriter); }

  static inline data_expression rewr_706_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_706_0(this_rewriter); }


  // [23] place_tokens: Place # List(Nat) -> PlaceTokens
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_23_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf916b30))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_23_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_23_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_23_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_23_2(t[0], t[1], this_rewriter); }


  // [23] place_tokens: Place # List(Nat) -> PlaceTokens
  static inline const data_expression& rewr_23_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa32500);
  }

  static inline data_expression rewr_23_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_23_0(this_rewriter); }

  static inline data_expression rewr_23_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_23_0(this_rewriter); }


  // [97] history_log_entry: Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_97_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9191a0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_97_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_97_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_97_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_97_2(t[0], t[1], this_rewriter); }


  // [97] history_log_entry: Maybe_trans_name # (Place -> List(Nat)) -> HistoryLogEntry
  static inline const data_expression& rewr_97_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa31d00);
  }

  static inline data_expression rewr_97_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_97_0(this_rewriter); }

  static inline data_expression rewr_97_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_97_0(this_rewriter); }


  // [101] nothing: Maybe_trans_name
  static inline const data_expression& rewr_101_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa31cd0);
  }

  static inline data_expression rewr_101_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_101_0(this_rewriter); }

  static inline data_expression rewr_101_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_101_0(this_rewriter); }


  // [96] just: Trans_name -> Maybe_trans_name
  template < class DATA_EXPR0>
  static inline data_expression rewr_96_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf919170))), local_rewrite(arg_not_nf0,this_rewriter));
  }

  static inline data_expression rewr_96_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_96_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_96_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_96_1(t[0], this_rewriter); }


  // [96] just: Trans_name -> Maybe_trans_name
  static inline const data_expression& rewr_96_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2d4b0);
  }

  static inline data_expression rewr_96_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_96_0(this_rewriter); }

  static inline data_expression rewr_96_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_96_0(this_rewriter); }


  // [32] trans: Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans
  template < class DATA_EXPR0, class DATA_EXPR1, class DATA_EXPR2, class DATA_EXPR3, class DATA_EXPR4>
  static inline data_expression rewr_32_5(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, const DATA_EXPR2& arg_not_nf2, const DATA_EXPR3& arg_not_nf3, const DATA_EXPR4& arg_not_nf4, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf916da0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter), local_rewrite(arg_not_nf2,this_rewriter), local_rewrite(arg_not_nf3,this_rewriter), local_rewrite(arg_not_nf4,this_rewriter));
  }

  static inline data_expression rewr_32_5_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_32_5(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), term_not_in_normal_form(t[2], this_rewriter), term_not_in_normal_form(t[3], this_rewriter), term_not_in_normal_form(t[4], this_rewriter), this_rewriter); }

  static inline data_expression rewr_32_5_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_32_5(t[0], t[1], t[2], t[3], t[4], this_rewriter); }


  // [32] trans: Trans_name # Bool # Nat # List(PlaceTokens) # List(PlaceTokens) -> Trans
  static inline const data_expression& rewr_32_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa34c40);
  }

  static inline data_expression rewr_32_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_32_0(this_rewriter); }

  static inline data_expression rewr_32_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_32_0(this_rewriter); }


  // [31] t3: Trans_name
  static inline const data_expression& rewr_31_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa31ca0);
  }

  static inline data_expression rewr_31_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_31_0(this_rewriter); }

  static inline data_expression rewr_31_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_31_0(this_rewriter); }


  // [35] t2: Trans_name
  static inline const data_expression& rewr_35_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa31e50);
  }

  static inline data_expression rewr_35_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_35_0(this_rewriter); }

  static inline data_expression rewr_35_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_35_0(this_rewriter); }


  // [40] t1: Trans_name
  static inline const data_expression& rewr_40_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf960e40);
  }

  static inline data_expression rewr_40_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_40_0(this_rewriter); }

  static inline data_expression rewr_40_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_40_0(this_rewriter); }


  // [41] t0: Trans_name
  static inline const data_expression& rewr_41_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa31d90);
  }

  static inline data_expression rewr_41_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_41_0(this_rewriter); }

  static inline data_expression rewr_41_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_41_0(this_rewriter); }


  // [22] p5: Place
  static inline const data_expression& rewr_22_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa32440);
  }

  static inline data_expression rewr_22_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_22_0(this_rewriter); }

  static inline data_expression rewr_22_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_22_0(this_rewriter); }


  // [26] p4: Place
  static inline const data_expression& rewr_26_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2d510);
  }

  static inline data_expression rewr_26_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_26_0(this_rewriter); }

  static inline data_expression rewr_26_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_26_0(this_rewriter); }


  // [28] p3: Place
  static inline const data_expression& rewr_28_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa324d0);
  }

  static inline data_expression rewr_28_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_28_0(this_rewriter); }

  static inline data_expression rewr_28_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_28_0(this_rewriter); }


  // [34] p2: Place
  static inline const data_expression& rewr_34_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6a3f0);
  }

  static inline data_expression rewr_34_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_34_0(this_rewriter); }

  static inline data_expression rewr_34_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_34_0(this_rewriter); }


  // [37] p1: Place
  static inline const data_expression& rewr_37_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa34d30);
  }

  static inline data_expression rewr_37_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_37_0(this_rewriter); }

  static inline data_expression rewr_37_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_37_0(this_rewriter); }


  // [14] p0: Place
  static inline const data_expression& rewr_14_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cf903590);
  }

  static inline data_expression rewr_14_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_14_0(this_rewriter); }

  static inline data_expression rewr_14_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_14_0(this_rewriter); }


  // [91] @cDub: Bool # Pos -> Pos
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_91_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf918420))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_91_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_91_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_91_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_91_2(t[0], t[1], this_rewriter); }


  // [91] @cDub: Bool # Pos -> Pos
  static inline const data_expression& rewr_91_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2c3e0);
  }

  static inline data_expression rewr_91_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_91_0(this_rewriter); }

  static inline data_expression rewr_91_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_91_0(this_rewriter); }


  // [87] 1: Pos
  static inline const data_expression& rewr_87_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6ce80);
  }

  static inline data_expression rewr_87_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_87_0(this_rewriter); }

  static inline data_expression rewr_87_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_87_0(this_rewriter); }


  // [493] @cPair: Nat # Nat -> @NatPair
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_493_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf9854e0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_493_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_493_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_493_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_493_2(t[0], t[1], this_rewriter); }


  // [493] @cPair: Nat # Nat -> @NatPair
  static inline const data_expression& rewr_493_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa31dc0);
  }

  static inline data_expression rewr_493_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_493_0(this_rewriter); }

  static inline data_expression rewr_493_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_493_0(this_rewriter); }


  // [94] 0: Nat
  static inline const data_expression& rewr_94_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6a570);
  }

  static inline data_expression rewr_94_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_94_0(this_rewriter); }

  static inline data_expression rewr_94_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_94_0(this_rewriter); }


  // [20] @cNat: Pos -> Nat
  template < class DATA_EXPR0>
  static inline data_expression rewr_20_1(const DATA_EXPR0& arg_not_nf0, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf916aa0))), local_rewrite(arg_not_nf0,this_rewriter));
  }

  static inline data_expression rewr_20_1_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_20_1(term_not_in_normal_form(t[0], this_rewriter), this_rewriter); }

  static inline data_expression rewr_20_1_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_20_1(t[0], this_rewriter); }


  // [20] @cNat: Pos -> Nat
  static inline const data_expression& rewr_20_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2d4e0);
  }

  static inline data_expression rewr_20_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_20_0(this_rewriter); }

  static inline data_expression rewr_20_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_20_0(this_rewriter); }


  // [90] false: Bool
  static inline const data_expression& rewr_90_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6a690);
  }

  static inline data_expression rewr_90_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_90_0(this_rewriter); }

  static inline data_expression rewr_90_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_90_0(this_rewriter); }


  // [18] true: Bool
  static inline const data_expression& rewr_18_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa6d030);
  }

  static inline data_expression rewr_18_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_18_0(this_rewriter); }

  static inline data_expression rewr_18_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_18_0(this_rewriter); }


  // [64] |>: Nat # List(Nat) -> List(Nat)
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_64_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf917ac0))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_64_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_64_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_64_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_64_2(t[0], t[1], this_rewriter); }


  // [64] |>: Nat # List(Nat) -> List(Nat)
  static inline const data_expression& rewr_64_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa31e20);
  }

  static inline data_expression rewr_64_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_64_0(this_rewriter); }

  static inline data_expression rewr_64_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_64_0(this_rewriter); }


  // [15] []: List(Nat)
  static inline const data_expression& rewr_15_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa67920);
  }

  static inline data_expression rewr_15_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_15_0(this_rewriter); }

  static inline data_expression rewr_15_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_15_0(this_rewriter); }


  // [140] |>: Trans # List(Trans) -> List(Trans)
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_140_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf91b150))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_140_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_140_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_140_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_140_2(t[0], t[1], this_rewriter); }


  // [140] |>: Trans # List(Trans) -> List(Trans)
  static inline const data_expression& rewr_140_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2e6e0);
  }

  static inline data_expression rewr_140_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_140_0(this_rewriter); }

  static inline data_expression rewr_140_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_140_0(this_rewriter); }


  // [139] []: List(Trans)
  static inline const data_expression& rewr_139_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfb2d930);
  }

  static inline data_expression rewr_139_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_139_0(this_rewriter); }

  static inline data_expression rewr_139_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_139_0(this_rewriter); }


  // [99] []: List(HistoryLogEntry)
  static inline const data_expression& rewr_99_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa35b20);
  }

  static inline data_expression rewr_99_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_99_0(this_rewriter); }

  static inline data_expression rewr_99_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_99_0(this_rewriter); }


  // [98] |>: HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_98_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf919200))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_98_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_98_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_98_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_98_2(t[0], t[1], this_rewriter); }


  // [98] |>: HistoryLogEntry # List(HistoryLogEntry) -> List(HistoryLogEntry)
  static inline const data_expression& rewr_98_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa31d60);
  }

  static inline data_expression rewr_98_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_98_0(this_rewriter); }

  static inline data_expression rewr_98_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_98_0(this_rewriter); }


  // [58] |>: PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)
  template < class DATA_EXPR0, class DATA_EXPR1>
  static inline data_expression rewr_58_2(const DATA_EXPR0& arg_not_nf0, const DATA_EXPR1& arg_not_nf1, RewriterCompilingJitty* this_rewriter)

  {
    return application(atermpp::down_cast<data_expression>(atermpp::aterm(reinterpret_cast<atermpp::detail::_aterm*>(0x55a6cf917760))), local_rewrite(arg_not_nf0,this_rewriter), local_rewrite(arg_not_nf1,this_rewriter));
  }

  static inline data_expression rewr_58_2_term(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_58_2(term_not_in_normal_form(t[0], this_rewriter), term_not_in_normal_form(t[1], this_rewriter), this_rewriter); }

  static inline data_expression rewr_58_2_term_arg_in_normal_form(const application& t, RewriterCompilingJitty* this_rewriter) { return rewr_58_2(t[0], t[1], this_rewriter); }


  // [58] |>: PlaceTokens # List(PlaceTokens) -> List(PlaceTokens)
  static inline const data_expression& rewr_58_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa30b50);
  }

  static inline data_expression rewr_58_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_58_0(this_rewriter); }

  static inline data_expression rewr_58_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_58_0(this_rewriter); }


  // [55] []: List(PlaceTokens)
  static inline const data_expression& rewr_55_0(RewriterCompilingJitty* this_rewriter)

  {
    return *reinterpret_cast<const data_expression*>(0x55a6cfa323e0);
  }

  static inline data_expression rewr_55_0_term(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_55_0(this_rewriter); }

  static inline data_expression rewr_55_0_term_arg_in_normal_form(const application&, RewriterCompilingJitty* this_rewriter) { return rewr_55_0(this_rewriter); }


};
} // namespace
void set_the_precompiled_rewrite_functions_in_a_lookup_table(RewriterCompilingJitty* this_rewriter)
{
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 16 + 3] = rewr_functions::rewr_16_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 16 + 3] = rewr_functions::rewr_16_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 16 + 4] = rewr_functions::rewr_16_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 16 + 4] = rewr_functions::rewr_16_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 17 + 1] = rewr_functions::rewr_17_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 17 + 1] = rewr_functions::rewr_17_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 20 + 1] = rewr_functions::rewr_20_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 20 + 1] = rewr_functions::rewr_20_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 23 + 2] = rewr_functions::rewr_23_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 23 + 2] = rewr_functions::rewr_23_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 32 + 5] = rewr_functions::rewr_32_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 32 + 5] = rewr_functions::rewr_32_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 38 + 1] = rewr_functions::rewr_38_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 38 + 1] = rewr_functions::rewr_38_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 38 + 2] = rewr_functions::rewr_38_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 38 + 2] = rewr_functions::rewr_38_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 39 + 2] = rewr_functions::rewr_39_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 39 + 2] = rewr_functions::rewr_39_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 43 + 1] = rewr_functions::rewr_43_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 43 + 1] = rewr_functions::rewr_43_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 44 + 1] = rewr_functions::rewr_44_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 44 + 1] = rewr_functions::rewr_44_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 45 + 2] = rewr_functions::rewr_45_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 45 + 2] = rewr_functions::rewr_45_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 46 + 1] = rewr_functions::rewr_46_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 46 + 1] = rewr_functions::rewr_46_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 47 + 2] = rewr_functions::rewr_47_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 47 + 2] = rewr_functions::rewr_47_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 48 + 2] = rewr_functions::rewr_48_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 48 + 2] = rewr_functions::rewr_48_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 49 + 2] = rewr_functions::rewr_49_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 49 + 2] = rewr_functions::rewr_49_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 50 + 2] = rewr_functions::rewr_50_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 50 + 2] = rewr_functions::rewr_50_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 51 + 1] = rewr_functions::rewr_51_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 51 + 1] = rewr_functions::rewr_51_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 52 + 2] = rewr_functions::rewr_52_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 52 + 2] = rewr_functions::rewr_52_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 53 + 2] = rewr_functions::rewr_53_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 53 + 2] = rewr_functions::rewr_53_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 54 + 2] = rewr_functions::rewr_54_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 54 + 2] = rewr_functions::rewr_54_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 56 + 2] = rewr_functions::rewr_56_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 56 + 2] = rewr_functions::rewr_56_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 56 + 3] = rewr_functions::rewr_56_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 56 + 3] = rewr_functions::rewr_56_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 57 + 2] = rewr_functions::rewr_57_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 57 + 2] = rewr_functions::rewr_57_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 58 + 2] = rewr_functions::rewr_58_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 58 + 2] = rewr_functions::rewr_58_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 59 + 2] = rewr_functions::rewr_59_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 59 + 2] = rewr_functions::rewr_59_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 59 + 3] = rewr_functions::rewr_59_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 59 + 3] = rewr_functions::rewr_59_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 60 + 2] = rewr_functions::rewr_60_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 60 + 2] = rewr_functions::rewr_60_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 61 + 1] = rewr_functions::rewr_61_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 61 + 1] = rewr_functions::rewr_61_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 62 + 2] = rewr_functions::rewr_62_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 62 + 2] = rewr_functions::rewr_62_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 62 + 3] = rewr_functions::rewr_62_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 62 + 3] = rewr_functions::rewr_62_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 63 + 2] = rewr_functions::rewr_63_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 63 + 2] = rewr_functions::rewr_63_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 64 + 2] = rewr_functions::rewr_64_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 64 + 2] = rewr_functions::rewr_64_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 65 + 2] = rewr_functions::rewr_65_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 65 + 2] = rewr_functions::rewr_65_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 66 + 2] = rewr_functions::rewr_66_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 66 + 2] = rewr_functions::rewr_66_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 67 + 2] = rewr_functions::rewr_67_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 67 + 2] = rewr_functions::rewr_67_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 68 + 2] = rewr_functions::rewr_68_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 68 + 2] = rewr_functions::rewr_68_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 69 + 1] = rewr_functions::rewr_69_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 69 + 1] = rewr_functions::rewr_69_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 70 + 1] = rewr_functions::rewr_70_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 70 + 1] = rewr_functions::rewr_70_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 70 + 2] = rewr_functions::rewr_70_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 70 + 2] = rewr_functions::rewr_70_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 91 + 2] = rewr_functions::rewr_91_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 91 + 2] = rewr_functions::rewr_91_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 92 + 2] = rewr_functions::rewr_92_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 92 + 2] = rewr_functions::rewr_92_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 93 + 2] = rewr_functions::rewr_93_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 93 + 2] = rewr_functions::rewr_93_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 95 + 1] = rewr_functions::rewr_95_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 95 + 1] = rewr_functions::rewr_95_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 96 + 1] = rewr_functions::rewr_96_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 96 + 1] = rewr_functions::rewr_96_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 97 + 2] = rewr_functions::rewr_97_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 97 + 2] = rewr_functions::rewr_97_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 98 + 2] = rewr_functions::rewr_98_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 98 + 2] = rewr_functions::rewr_98_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 100 + 3] = rewr_functions::rewr_100_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 100 + 3] = rewr_functions::rewr_100_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 100 + 4] = rewr_functions::rewr_100_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 100 + 4] = rewr_functions::rewr_100_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 102 + 1] = rewr_functions::rewr_102_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 102 + 1] = rewr_functions::rewr_102_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 103 + 2] = rewr_functions::rewr_103_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 103 + 2] = rewr_functions::rewr_103_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 104 + 2] = rewr_functions::rewr_104_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 104 + 2] = rewr_functions::rewr_104_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 105 + 2] = rewr_functions::rewr_105_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 105 + 2] = rewr_functions::rewr_105_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 106 + 1] = rewr_functions::rewr_106_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 106 + 1] = rewr_functions::rewr_106_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 107 + 1] = rewr_functions::rewr_107_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 107 + 1] = rewr_functions::rewr_107_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 108 + 1] = rewr_functions::rewr_108_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 108 + 1] = rewr_functions::rewr_108_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 109 + 1] = rewr_functions::rewr_109_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 109 + 1] = rewr_functions::rewr_109_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 110 + 2] = rewr_functions::rewr_110_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 110 + 2] = rewr_functions::rewr_110_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 111 + 2] = rewr_functions::rewr_111_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 111 + 2] = rewr_functions::rewr_111_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 112 + 2] = rewr_functions::rewr_112_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 112 + 2] = rewr_functions::rewr_112_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 113 + 2] = rewr_functions::rewr_113_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 113 + 2] = rewr_functions::rewr_113_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 114 + 2] = rewr_functions::rewr_114_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 114 + 2] = rewr_functions::rewr_114_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 115 + 1] = rewr_functions::rewr_115_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 115 + 1] = rewr_functions::rewr_115_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 116 + 1] = rewr_functions::rewr_116_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 116 + 1] = rewr_functions::rewr_116_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 117 + 2] = rewr_functions::rewr_117_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 117 + 2] = rewr_functions::rewr_117_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 118 + 3] = rewr_functions::rewr_118_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 118 + 3] = rewr_functions::rewr_118_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 119 + 2] = rewr_functions::rewr_119_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 119 + 2] = rewr_functions::rewr_119_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 120 + 2] = rewr_functions::rewr_120_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 120 + 2] = rewr_functions::rewr_120_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 121 + 1] = rewr_functions::rewr_121_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 121 + 1] = rewr_functions::rewr_121_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 122 + 2] = rewr_functions::rewr_122_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 122 + 2] = rewr_functions::rewr_122_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 123 + 1] = rewr_functions::rewr_123_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 123 + 1] = rewr_functions::rewr_123_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 124 + 2] = rewr_functions::rewr_124_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 124 + 2] = rewr_functions::rewr_124_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 125 + 2] = rewr_functions::rewr_125_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 125 + 2] = rewr_functions::rewr_125_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 126 + 2] = rewr_functions::rewr_126_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 126 + 2] = rewr_functions::rewr_126_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 127 + 1] = rewr_functions::rewr_127_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 127 + 1] = rewr_functions::rewr_127_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 128 + 1] = rewr_functions::rewr_128_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 128 + 1] = rewr_functions::rewr_128_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 129 + 1] = rewr_functions::rewr_129_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 129 + 1] = rewr_functions::rewr_129_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 130 + 2] = rewr_functions::rewr_130_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 130 + 2] = rewr_functions::rewr_130_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 131 + 2] = rewr_functions::rewr_131_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 131 + 2] = rewr_functions::rewr_131_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 132 + 2] = rewr_functions::rewr_132_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 132 + 2] = rewr_functions::rewr_132_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 133 + 2] = rewr_functions::rewr_133_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 133 + 2] = rewr_functions::rewr_133_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 134 + 2] = rewr_functions::rewr_134_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 134 + 2] = rewr_functions::rewr_134_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 135 + 2] = rewr_functions::rewr_135_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 135 + 2] = rewr_functions::rewr_135_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 136 + 3] = rewr_functions::rewr_136_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 136 + 3] = rewr_functions::rewr_136_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 137 + 2] = rewr_functions::rewr_137_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 137 + 2] = rewr_functions::rewr_137_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 138 + 2] = rewr_functions::rewr_138_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 138 + 2] = rewr_functions::rewr_138_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 140 + 2] = rewr_functions::rewr_140_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 140 + 2] = rewr_functions::rewr_140_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 141 + 1] = rewr_functions::rewr_141_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 141 + 1] = rewr_functions::rewr_141_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 142 + 2] = rewr_functions::rewr_142_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 142 + 2] = rewr_functions::rewr_142_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 143 + 2] = rewr_functions::rewr_143_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 143 + 2] = rewr_functions::rewr_143_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 144 + 2] = rewr_functions::rewr_144_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 144 + 2] = rewr_functions::rewr_144_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 145 + 1] = rewr_functions::rewr_145_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 145 + 1] = rewr_functions::rewr_145_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 146 + 1] = rewr_functions::rewr_146_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 146 + 1] = rewr_functions::rewr_146_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 147 + 1] = rewr_functions::rewr_147_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 147 + 1] = rewr_functions::rewr_147_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 148 + 1] = rewr_functions::rewr_148_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 148 + 1] = rewr_functions::rewr_148_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 149 + 2] = rewr_functions::rewr_149_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 149 + 2] = rewr_functions::rewr_149_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 150 + 2] = rewr_functions::rewr_150_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 150 + 2] = rewr_functions::rewr_150_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 151 + 2] = rewr_functions::rewr_151_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 151 + 2] = rewr_functions::rewr_151_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 152 + 2] = rewr_functions::rewr_152_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 152 + 2] = rewr_functions::rewr_152_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 153 + 2] = rewr_functions::rewr_153_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 153 + 2] = rewr_functions::rewr_153_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 154 + 3] = rewr_functions::rewr_154_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 154 + 3] = rewr_functions::rewr_154_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 155 + 2] = rewr_functions::rewr_155_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 155 + 2] = rewr_functions::rewr_155_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 156 + 2] = rewr_functions::rewr_156_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 156 + 2] = rewr_functions::rewr_156_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 157 + 1] = rewr_functions::rewr_157_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 157 + 1] = rewr_functions::rewr_157_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 158 + 2] = rewr_functions::rewr_158_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 158 + 2] = rewr_functions::rewr_158_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 159 + 2] = rewr_functions::rewr_159_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 159 + 2] = rewr_functions::rewr_159_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 160 + 1] = rewr_functions::rewr_160_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 160 + 1] = rewr_functions::rewr_160_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 161 + 1] = rewr_functions::rewr_161_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 161 + 1] = rewr_functions::rewr_161_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 162 + 1] = rewr_functions::rewr_162_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 162 + 1] = rewr_functions::rewr_162_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 163 + 1] = rewr_functions::rewr_163_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 163 + 1] = rewr_functions::rewr_163_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 164 + 2] = rewr_functions::rewr_164_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 164 + 2] = rewr_functions::rewr_164_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 165 + 2] = rewr_functions::rewr_165_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 165 + 2] = rewr_functions::rewr_165_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 166 + 2] = rewr_functions::rewr_166_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 166 + 2] = rewr_functions::rewr_166_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 167 + 2] = rewr_functions::rewr_167_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 167 + 2] = rewr_functions::rewr_167_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 168 + 3] = rewr_functions::rewr_168_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 168 + 3] = rewr_functions::rewr_168_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 169 + 2] = rewr_functions::rewr_169_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 169 + 2] = rewr_functions::rewr_169_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 170 + 2] = rewr_functions::rewr_170_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 170 + 2] = rewr_functions::rewr_170_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 171 + 2] = rewr_functions::rewr_171_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 171 + 2] = rewr_functions::rewr_171_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 172 + 2] = rewr_functions::rewr_172_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 172 + 2] = rewr_functions::rewr_172_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 173 + 3] = rewr_functions::rewr_173_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 173 + 3] = rewr_functions::rewr_173_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 173 + 6] = rewr_functions::rewr_173_6_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 173 + 6] = rewr_functions::rewr_173_6_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 174 + 2] = rewr_functions::rewr_174_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 174 + 2] = rewr_functions::rewr_174_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 175 + 2] = rewr_functions::rewr_175_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 175 + 2] = rewr_functions::rewr_175_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 176 + 2] = rewr_functions::rewr_176_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 176 + 2] = rewr_functions::rewr_176_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 177 + 2] = rewr_functions::rewr_177_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 177 + 2] = rewr_functions::rewr_177_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 178 + 1] = rewr_functions::rewr_178_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 178 + 1] = rewr_functions::rewr_178_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 179 + 3] = rewr_functions::rewr_179_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 179 + 3] = rewr_functions::rewr_179_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 179 + 4] = rewr_functions::rewr_179_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 179 + 4] = rewr_functions::rewr_179_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 180 + 2] = rewr_functions::rewr_180_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 180 + 2] = rewr_functions::rewr_180_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 181 + 2] = rewr_functions::rewr_181_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 181 + 2] = rewr_functions::rewr_181_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 182 + 2] = rewr_functions::rewr_182_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 182 + 2] = rewr_functions::rewr_182_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 183 + 2] = rewr_functions::rewr_183_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 183 + 2] = rewr_functions::rewr_183_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 184 + 3] = rewr_functions::rewr_184_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 184 + 3] = rewr_functions::rewr_184_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 184 + 4] = rewr_functions::rewr_184_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 184 + 4] = rewr_functions::rewr_184_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 185 + 2] = rewr_functions::rewr_185_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 185 + 2] = rewr_functions::rewr_185_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 186 + 2] = rewr_functions::rewr_186_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 186 + 2] = rewr_functions::rewr_186_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 187 + 2] = rewr_functions::rewr_187_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 187 + 2] = rewr_functions::rewr_187_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 188 + 2] = rewr_functions::rewr_188_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 188 + 2] = rewr_functions::rewr_188_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 189 + 2] = rewr_functions::rewr_189_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 189 + 2] = rewr_functions::rewr_189_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 190 + 2] = rewr_functions::rewr_190_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 190 + 2] = rewr_functions::rewr_190_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 191 + 3] = rewr_functions::rewr_191_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 191 + 3] = rewr_functions::rewr_191_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 191 + 6] = rewr_functions::rewr_191_6_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 191 + 6] = rewr_functions::rewr_191_6_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 191 + 7] = rewr_functions::rewr_191_7_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 191 + 7] = rewr_functions::rewr_191_7_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 192 + 2] = rewr_functions::rewr_192_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 192 + 2] = rewr_functions::rewr_192_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 193 + 2] = rewr_functions::rewr_193_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 193 + 2] = rewr_functions::rewr_193_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 194 + 2] = rewr_functions::rewr_194_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 194 + 2] = rewr_functions::rewr_194_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 195 + 2] = rewr_functions::rewr_195_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 195 + 2] = rewr_functions::rewr_195_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 196 + 3] = rewr_functions::rewr_196_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 196 + 3] = rewr_functions::rewr_196_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 196 + 4] = rewr_functions::rewr_196_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 196 + 4] = rewr_functions::rewr_196_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 197 + 3] = rewr_functions::rewr_197_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 197 + 3] = rewr_functions::rewr_197_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 197 + 4] = rewr_functions::rewr_197_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 197 + 4] = rewr_functions::rewr_197_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 198 + 1] = rewr_functions::rewr_198_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 198 + 1] = rewr_functions::rewr_198_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 199 + 3] = rewr_functions::rewr_199_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 199 + 3] = rewr_functions::rewr_199_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 199 + 4] = rewr_functions::rewr_199_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 199 + 4] = rewr_functions::rewr_199_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 200 + 2] = rewr_functions::rewr_200_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 200 + 2] = rewr_functions::rewr_200_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 201 + 2] = rewr_functions::rewr_201_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 201 + 2] = rewr_functions::rewr_201_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 202 + 2] = rewr_functions::rewr_202_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 202 + 2] = rewr_functions::rewr_202_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 203 + 2] = rewr_functions::rewr_203_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 203 + 2] = rewr_functions::rewr_203_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 204 + 3] = rewr_functions::rewr_204_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 204 + 3] = rewr_functions::rewr_204_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 204 + 4] = rewr_functions::rewr_204_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 204 + 4] = rewr_functions::rewr_204_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 205 + 2] = rewr_functions::rewr_205_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 205 + 2] = rewr_functions::rewr_205_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 206 + 2] = rewr_functions::rewr_206_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 206 + 2] = rewr_functions::rewr_206_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 207 + 2] = rewr_functions::rewr_207_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 207 + 2] = rewr_functions::rewr_207_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 208 + 2] = rewr_functions::rewr_208_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 208 + 2] = rewr_functions::rewr_208_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 209 + 3] = rewr_functions::rewr_209_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 209 + 3] = rewr_functions::rewr_209_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 209 + 4] = rewr_functions::rewr_209_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 209 + 4] = rewr_functions::rewr_209_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 210 + 3] = rewr_functions::rewr_210_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 210 + 3] = rewr_functions::rewr_210_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 210 + 4] = rewr_functions::rewr_210_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 210 + 4] = rewr_functions::rewr_210_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 211 + 1] = rewr_functions::rewr_211_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 211 + 1] = rewr_functions::rewr_211_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 212 + 3] = rewr_functions::rewr_212_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 212 + 3] = rewr_functions::rewr_212_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 212 + 4] = rewr_functions::rewr_212_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 212 + 4] = rewr_functions::rewr_212_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 213 + 2] = rewr_functions::rewr_213_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 213 + 2] = rewr_functions::rewr_213_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 214 + 2] = rewr_functions::rewr_214_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 214 + 2] = rewr_functions::rewr_214_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 215 + 3] = rewr_functions::rewr_215_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 215 + 3] = rewr_functions::rewr_215_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 215 + 4] = rewr_functions::rewr_215_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 215 + 4] = rewr_functions::rewr_215_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 216 + 2] = rewr_functions::rewr_216_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 216 + 2] = rewr_functions::rewr_216_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 217 + 2] = rewr_functions::rewr_217_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 217 + 2] = rewr_functions::rewr_217_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 218 + 2] = rewr_functions::rewr_218_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 218 + 2] = rewr_functions::rewr_218_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 219 + 2] = rewr_functions::rewr_219_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 219 + 2] = rewr_functions::rewr_219_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 220 + 2] = rewr_functions::rewr_220_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 220 + 2] = rewr_functions::rewr_220_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 221 + 2] = rewr_functions::rewr_221_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 221 + 2] = rewr_functions::rewr_221_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 222 + 3] = rewr_functions::rewr_222_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 222 + 3] = rewr_functions::rewr_222_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 222 + 5] = rewr_functions::rewr_222_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 222 + 5] = rewr_functions::rewr_222_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 223 + 2] = rewr_functions::rewr_223_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 223 + 2] = rewr_functions::rewr_223_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 224 + 2] = rewr_functions::rewr_224_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 224 + 2] = rewr_functions::rewr_224_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 225 + 2] = rewr_functions::rewr_225_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 225 + 2] = rewr_functions::rewr_225_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 226 + 2] = rewr_functions::rewr_226_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 226 + 2] = rewr_functions::rewr_226_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 227 + 3] = rewr_functions::rewr_227_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 227 + 3] = rewr_functions::rewr_227_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 227 + 4] = rewr_functions::rewr_227_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 227 + 4] = rewr_functions::rewr_227_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 228 + 3] = rewr_functions::rewr_228_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 228 + 3] = rewr_functions::rewr_228_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 228 + 4] = rewr_functions::rewr_228_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 228 + 4] = rewr_functions::rewr_228_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 229 + 1] = rewr_functions::rewr_229_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 229 + 1] = rewr_functions::rewr_229_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 230 + 3] = rewr_functions::rewr_230_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 230 + 3] = rewr_functions::rewr_230_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 230 + 4] = rewr_functions::rewr_230_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 230 + 4] = rewr_functions::rewr_230_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 231 + 2] = rewr_functions::rewr_231_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 231 + 2] = rewr_functions::rewr_231_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 232 + 2] = rewr_functions::rewr_232_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 232 + 2] = rewr_functions::rewr_232_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 233 + 2] = rewr_functions::rewr_233_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 233 + 2] = rewr_functions::rewr_233_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 234 + 3] = rewr_functions::rewr_234_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 234 + 3] = rewr_functions::rewr_234_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 234 + 4] = rewr_functions::rewr_234_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 234 + 4] = rewr_functions::rewr_234_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 235 + 2] = rewr_functions::rewr_235_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 235 + 2] = rewr_functions::rewr_235_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 236 + 2] = rewr_functions::rewr_236_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 236 + 2] = rewr_functions::rewr_236_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 237 + 2] = rewr_functions::rewr_237_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 237 + 2] = rewr_functions::rewr_237_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 238 + 2] = rewr_functions::rewr_238_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 238 + 2] = rewr_functions::rewr_238_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 239 + 2] = rewr_functions::rewr_239_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 239 + 2] = rewr_functions::rewr_239_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 240 + 2] = rewr_functions::rewr_240_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 240 + 2] = rewr_functions::rewr_240_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 241 + 3] = rewr_functions::rewr_241_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 241 + 3] = rewr_functions::rewr_241_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 241 + 5] = rewr_functions::rewr_241_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 241 + 5] = rewr_functions::rewr_241_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 242 + 2] = rewr_functions::rewr_242_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 242 + 2] = rewr_functions::rewr_242_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 243 + 2] = rewr_functions::rewr_243_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 243 + 2] = rewr_functions::rewr_243_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 244 + 2] = rewr_functions::rewr_244_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 244 + 2] = rewr_functions::rewr_244_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 245 + 2] = rewr_functions::rewr_245_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 245 + 2] = rewr_functions::rewr_245_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 246 + 2] = rewr_functions::rewr_246_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 246 + 2] = rewr_functions::rewr_246_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 247 + 2] = rewr_functions::rewr_247_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 247 + 2] = rewr_functions::rewr_247_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 248 + 3] = rewr_functions::rewr_248_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 248 + 3] = rewr_functions::rewr_248_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 248 + 8] = rewr_functions::rewr_248_8_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 248 + 8] = rewr_functions::rewr_248_8_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 249 + 2] = rewr_functions::rewr_249_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 249 + 2] = rewr_functions::rewr_249_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 250 + 2] = rewr_functions::rewr_250_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 250 + 2] = rewr_functions::rewr_250_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 251 + 2] = rewr_functions::rewr_251_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 251 + 2] = rewr_functions::rewr_251_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 252 + 2] = rewr_functions::rewr_252_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 252 + 2] = rewr_functions::rewr_252_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 253 + 3] = rewr_functions::rewr_253_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 253 + 3] = rewr_functions::rewr_253_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 253 + 4] = rewr_functions::rewr_253_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 253 + 4] = rewr_functions::rewr_253_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 253 + 5] = rewr_functions::rewr_253_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 253 + 5] = rewr_functions::rewr_253_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 254 + 3] = rewr_functions::rewr_254_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 254 + 3] = rewr_functions::rewr_254_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 254 + 4] = rewr_functions::rewr_254_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 254 + 4] = rewr_functions::rewr_254_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 254 + 5] = rewr_functions::rewr_254_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 254 + 5] = rewr_functions::rewr_254_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 255 + 1] = rewr_functions::rewr_255_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 255 + 1] = rewr_functions::rewr_255_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 256 + 3] = rewr_functions::rewr_256_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 256 + 3] = rewr_functions::rewr_256_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 256 + 4] = rewr_functions::rewr_256_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 256 + 4] = rewr_functions::rewr_256_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 256 + 5] = rewr_functions::rewr_256_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 256 + 5] = rewr_functions::rewr_256_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 257 + 2] = rewr_functions::rewr_257_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 257 + 2] = rewr_functions::rewr_257_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 258 + 2] = rewr_functions::rewr_258_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 258 + 2] = rewr_functions::rewr_258_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 259 + 3] = rewr_functions::rewr_259_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 259 + 3] = rewr_functions::rewr_259_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 259 + 4] = rewr_functions::rewr_259_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 259 + 4] = rewr_functions::rewr_259_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 259 + 5] = rewr_functions::rewr_259_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 259 + 5] = rewr_functions::rewr_259_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 260 + 2] = rewr_functions::rewr_260_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 260 + 2] = rewr_functions::rewr_260_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 261 + 2] = rewr_functions::rewr_261_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 261 + 2] = rewr_functions::rewr_261_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 262 + 2] = rewr_functions::rewr_262_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 262 + 2] = rewr_functions::rewr_262_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 263 + 2] = rewr_functions::rewr_263_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 263 + 2] = rewr_functions::rewr_263_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 264 + 2] = rewr_functions::rewr_264_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 264 + 2] = rewr_functions::rewr_264_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 265 + 2] = rewr_functions::rewr_265_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 265 + 2] = rewr_functions::rewr_265_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 266 + 3] = rewr_functions::rewr_266_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 266 + 3] = rewr_functions::rewr_266_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 266 + 5] = rewr_functions::rewr_266_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 266 + 5] = rewr_functions::rewr_266_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 267 + 2] = rewr_functions::rewr_267_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 267 + 2] = rewr_functions::rewr_267_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 268 + 2] = rewr_functions::rewr_268_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 268 + 2] = rewr_functions::rewr_268_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 269 + 2] = rewr_functions::rewr_269_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 269 + 2] = rewr_functions::rewr_269_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 270 + 2] = rewr_functions::rewr_270_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 270 + 2] = rewr_functions::rewr_270_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 271 + 2] = rewr_functions::rewr_271_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 271 + 2] = rewr_functions::rewr_271_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 272 + 2] = rewr_functions::rewr_272_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 272 + 2] = rewr_functions::rewr_272_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 273 + 2] = rewr_functions::rewr_273_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 273 + 2] = rewr_functions::rewr_273_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 274 + 3] = rewr_functions::rewr_274_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 274 + 3] = rewr_functions::rewr_274_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 274 + 7] = rewr_functions::rewr_274_7_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 274 + 7] = rewr_functions::rewr_274_7_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 275 + 2] = rewr_functions::rewr_275_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 275 + 2] = rewr_functions::rewr_275_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 276 + 2] = rewr_functions::rewr_276_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 276 + 2] = rewr_functions::rewr_276_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 277 + 2] = rewr_functions::rewr_277_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 277 + 2] = rewr_functions::rewr_277_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 278 + 2] = rewr_functions::rewr_278_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 278 + 2] = rewr_functions::rewr_278_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 279 + 3] = rewr_functions::rewr_279_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 279 + 3] = rewr_functions::rewr_279_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 279 + 4] = rewr_functions::rewr_279_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 279 + 4] = rewr_functions::rewr_279_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 280 + 3] = rewr_functions::rewr_280_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 280 + 3] = rewr_functions::rewr_280_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 280 + 4] = rewr_functions::rewr_280_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 280 + 4] = rewr_functions::rewr_280_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 281 + 1] = rewr_functions::rewr_281_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 281 + 1] = rewr_functions::rewr_281_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 282 + 3] = rewr_functions::rewr_282_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 282 + 3] = rewr_functions::rewr_282_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 282 + 4] = rewr_functions::rewr_282_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 282 + 4] = rewr_functions::rewr_282_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 283 + 2] = rewr_functions::rewr_283_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 283 + 2] = rewr_functions::rewr_283_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 284 + 2] = rewr_functions::rewr_284_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 284 + 2] = rewr_functions::rewr_284_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 285 + 3] = rewr_functions::rewr_285_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 285 + 3] = rewr_functions::rewr_285_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 285 + 4] = rewr_functions::rewr_285_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 285 + 4] = rewr_functions::rewr_285_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 286 + 2] = rewr_functions::rewr_286_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 286 + 2] = rewr_functions::rewr_286_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 287 + 2] = rewr_functions::rewr_287_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 287 + 2] = rewr_functions::rewr_287_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 288 + 2] = rewr_functions::rewr_288_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 288 + 2] = rewr_functions::rewr_288_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 289 + 2] = rewr_functions::rewr_289_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 289 + 2] = rewr_functions::rewr_289_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 290 + 3] = rewr_functions::rewr_290_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 290 + 3] = rewr_functions::rewr_290_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 290 + 4] = rewr_functions::rewr_290_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 290 + 4] = rewr_functions::rewr_290_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 291 + 3] = rewr_functions::rewr_291_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 291 + 3] = rewr_functions::rewr_291_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 291 + 4] = rewr_functions::rewr_291_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 291 + 4] = rewr_functions::rewr_291_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 292 + 1] = rewr_functions::rewr_292_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 292 + 1] = rewr_functions::rewr_292_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 293 + 3] = rewr_functions::rewr_293_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 293 + 3] = rewr_functions::rewr_293_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 293 + 4] = rewr_functions::rewr_293_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 293 + 4] = rewr_functions::rewr_293_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 294 + 2] = rewr_functions::rewr_294_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 294 + 2] = rewr_functions::rewr_294_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 295 + 2] = rewr_functions::rewr_295_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 295 + 2] = rewr_functions::rewr_295_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 296 + 2] = rewr_functions::rewr_296_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 296 + 2] = rewr_functions::rewr_296_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 297 + 3] = rewr_functions::rewr_297_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 297 + 3] = rewr_functions::rewr_297_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 297 + 4] = rewr_functions::rewr_297_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 297 + 4] = rewr_functions::rewr_297_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 298 + 2] = rewr_functions::rewr_298_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 298 + 2] = rewr_functions::rewr_298_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 299 + 2] = rewr_functions::rewr_299_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 299 + 2] = rewr_functions::rewr_299_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 300 + 2] = rewr_functions::rewr_300_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 300 + 2] = rewr_functions::rewr_300_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 301 + 2] = rewr_functions::rewr_301_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 301 + 2] = rewr_functions::rewr_301_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 302 + 3] = rewr_functions::rewr_302_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 302 + 3] = rewr_functions::rewr_302_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 302 + 4] = rewr_functions::rewr_302_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 302 + 4] = rewr_functions::rewr_302_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 303 + 3] = rewr_functions::rewr_303_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 303 + 3] = rewr_functions::rewr_303_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 303 + 4] = rewr_functions::rewr_303_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 303 + 4] = rewr_functions::rewr_303_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 304 + 1] = rewr_functions::rewr_304_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 304 + 1] = rewr_functions::rewr_304_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 305 + 3] = rewr_functions::rewr_305_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 305 + 3] = rewr_functions::rewr_305_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 305 + 4] = rewr_functions::rewr_305_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 305 + 4] = rewr_functions::rewr_305_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 306 + 2] = rewr_functions::rewr_306_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 306 + 2] = rewr_functions::rewr_306_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 307 + 2] = rewr_functions::rewr_307_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 307 + 2] = rewr_functions::rewr_307_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 308 + 3] = rewr_functions::rewr_308_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 308 + 3] = rewr_functions::rewr_308_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 308 + 4] = rewr_functions::rewr_308_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 308 + 4] = rewr_functions::rewr_308_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 309 + 2] = rewr_functions::rewr_309_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 309 + 2] = rewr_functions::rewr_309_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 310 + 2] = rewr_functions::rewr_310_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 310 + 2] = rewr_functions::rewr_310_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 311 + 2] = rewr_functions::rewr_311_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 311 + 2] = rewr_functions::rewr_311_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 312 + 2] = rewr_functions::rewr_312_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 312 + 2] = rewr_functions::rewr_312_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 313 + 2] = rewr_functions::rewr_313_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 313 + 2] = rewr_functions::rewr_313_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 314 + 2] = rewr_functions::rewr_314_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 314 + 2] = rewr_functions::rewr_314_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 315 + 3] = rewr_functions::rewr_315_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 315 + 3] = rewr_functions::rewr_315_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 315 + 5] = rewr_functions::rewr_315_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 315 + 5] = rewr_functions::rewr_315_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 316 + 2] = rewr_functions::rewr_316_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 316 + 2] = rewr_functions::rewr_316_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 317 + 2] = rewr_functions::rewr_317_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 317 + 2] = rewr_functions::rewr_317_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 318 + 2] = rewr_functions::rewr_318_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 318 + 2] = rewr_functions::rewr_318_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 319 + 2] = rewr_functions::rewr_319_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 319 + 2] = rewr_functions::rewr_319_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 320 + 2] = rewr_functions::rewr_320_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 320 + 2] = rewr_functions::rewr_320_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 321 + 2] = rewr_functions::rewr_321_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 321 + 2] = rewr_functions::rewr_321_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 322 + 3] = rewr_functions::rewr_322_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 322 + 3] = rewr_functions::rewr_322_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 322 + 5] = rewr_functions::rewr_322_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 322 + 5] = rewr_functions::rewr_322_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 323 + 2] = rewr_functions::rewr_323_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 323 + 2] = rewr_functions::rewr_323_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 324 + 2] = rewr_functions::rewr_324_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 324 + 2] = rewr_functions::rewr_324_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 325 + 2] = rewr_functions::rewr_325_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 325 + 2] = rewr_functions::rewr_325_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 326 + 2] = rewr_functions::rewr_326_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 326 + 2] = rewr_functions::rewr_326_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 327 + 2] = rewr_functions::rewr_327_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 327 + 2] = rewr_functions::rewr_327_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 328 + 2] = rewr_functions::rewr_328_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 328 + 2] = rewr_functions::rewr_328_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 329 + 3] = rewr_functions::rewr_329_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 329 + 3] = rewr_functions::rewr_329_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 329 + 5] = rewr_functions::rewr_329_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 329 + 5] = rewr_functions::rewr_329_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 330 + 2] = rewr_functions::rewr_330_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 330 + 2] = rewr_functions::rewr_330_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 331 + 2] = rewr_functions::rewr_331_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 331 + 2] = rewr_functions::rewr_331_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 332 + 2] = rewr_functions::rewr_332_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 332 + 2] = rewr_functions::rewr_332_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 333 + 2] = rewr_functions::rewr_333_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 333 + 2] = rewr_functions::rewr_333_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 334 + 3] = rewr_functions::rewr_334_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 334 + 3] = rewr_functions::rewr_334_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 334 + 4] = rewr_functions::rewr_334_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 334 + 4] = rewr_functions::rewr_334_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 335 + 3] = rewr_functions::rewr_335_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 335 + 3] = rewr_functions::rewr_335_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 335 + 4] = rewr_functions::rewr_335_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 335 + 4] = rewr_functions::rewr_335_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 336 + 1] = rewr_functions::rewr_336_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 336 + 1] = rewr_functions::rewr_336_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 337 + 3] = rewr_functions::rewr_337_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 337 + 3] = rewr_functions::rewr_337_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 337 + 4] = rewr_functions::rewr_337_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 337 + 4] = rewr_functions::rewr_337_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 338 + 2] = rewr_functions::rewr_338_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 338 + 2] = rewr_functions::rewr_338_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 339 + 2] = rewr_functions::rewr_339_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 339 + 2] = rewr_functions::rewr_339_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 340 + 3] = rewr_functions::rewr_340_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 340 + 3] = rewr_functions::rewr_340_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 340 + 4] = rewr_functions::rewr_340_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 340 + 4] = rewr_functions::rewr_340_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 341 + 2] = rewr_functions::rewr_341_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 341 + 2] = rewr_functions::rewr_341_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 342 + 2] = rewr_functions::rewr_342_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 342 + 2] = rewr_functions::rewr_342_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 343 + 2] = rewr_functions::rewr_343_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 343 + 2] = rewr_functions::rewr_343_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 344 + 2] = rewr_functions::rewr_344_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 344 + 2] = rewr_functions::rewr_344_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 345 + 2] = rewr_functions::rewr_345_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 345 + 2] = rewr_functions::rewr_345_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 346 + 2] = rewr_functions::rewr_346_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 346 + 2] = rewr_functions::rewr_346_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 347 + 3] = rewr_functions::rewr_347_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 347 + 3] = rewr_functions::rewr_347_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 347 + 5] = rewr_functions::rewr_347_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 347 + 5] = rewr_functions::rewr_347_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 348 + 2] = rewr_functions::rewr_348_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 348 + 2] = rewr_functions::rewr_348_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 349 + 2] = rewr_functions::rewr_349_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 349 + 2] = rewr_functions::rewr_349_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 350 + 2] = rewr_functions::rewr_350_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 350 + 2] = rewr_functions::rewr_350_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 351 + 2] = rewr_functions::rewr_351_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 351 + 2] = rewr_functions::rewr_351_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 352 + 2] = rewr_functions::rewr_352_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 352 + 2] = rewr_functions::rewr_352_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 353 + 2] = rewr_functions::rewr_353_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 353 + 2] = rewr_functions::rewr_353_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 354 + 3] = rewr_functions::rewr_354_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 354 + 3] = rewr_functions::rewr_354_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 354 + 5] = rewr_functions::rewr_354_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 354 + 5] = rewr_functions::rewr_354_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 355 + 2] = rewr_functions::rewr_355_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 355 + 2] = rewr_functions::rewr_355_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 356 + 2] = rewr_functions::rewr_356_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 356 + 2] = rewr_functions::rewr_356_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 357 + 2] = rewr_functions::rewr_357_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 357 + 2] = rewr_functions::rewr_357_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 358 + 2] = rewr_functions::rewr_358_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 358 + 2] = rewr_functions::rewr_358_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 359 + 2] = rewr_functions::rewr_359_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 359 + 2] = rewr_functions::rewr_359_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 360 + 2] = rewr_functions::rewr_360_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 360 + 2] = rewr_functions::rewr_360_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 361 + 3] = rewr_functions::rewr_361_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 361 + 3] = rewr_functions::rewr_361_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 361 + 5] = rewr_functions::rewr_361_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 361 + 5] = rewr_functions::rewr_361_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 361 + 6] = rewr_functions::rewr_361_6_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 361 + 6] = rewr_functions::rewr_361_6_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 362 + 2] = rewr_functions::rewr_362_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 362 + 2] = rewr_functions::rewr_362_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 363 + 2] = rewr_functions::rewr_363_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 363 + 2] = rewr_functions::rewr_363_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 364 + 2] = rewr_functions::rewr_364_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 364 + 2] = rewr_functions::rewr_364_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 365 + 2] = rewr_functions::rewr_365_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 365 + 2] = rewr_functions::rewr_365_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 366 + 2] = rewr_functions::rewr_366_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 366 + 2] = rewr_functions::rewr_366_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 367 + 2] = rewr_functions::rewr_367_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 367 + 2] = rewr_functions::rewr_367_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 368 + 3] = rewr_functions::rewr_368_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 368 + 3] = rewr_functions::rewr_368_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 368 + 5] = rewr_functions::rewr_368_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 368 + 5] = rewr_functions::rewr_368_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 369 + 2] = rewr_functions::rewr_369_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 369 + 2] = rewr_functions::rewr_369_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 370 + 2] = rewr_functions::rewr_370_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 370 + 2] = rewr_functions::rewr_370_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 371 + 2] = rewr_functions::rewr_371_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 371 + 2] = rewr_functions::rewr_371_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 372 + 2] = rewr_functions::rewr_372_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 372 + 2] = rewr_functions::rewr_372_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 373 + 2] = rewr_functions::rewr_373_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 373 + 2] = rewr_functions::rewr_373_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 374 + 2] = rewr_functions::rewr_374_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 374 + 2] = rewr_functions::rewr_374_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 375 + 3] = rewr_functions::rewr_375_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 375 + 3] = rewr_functions::rewr_375_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 375 + 5] = rewr_functions::rewr_375_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 375 + 5] = rewr_functions::rewr_375_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 376 + 2] = rewr_functions::rewr_376_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 376 + 2] = rewr_functions::rewr_376_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 377 + 2] = rewr_functions::rewr_377_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 377 + 2] = rewr_functions::rewr_377_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 378 + 2] = rewr_functions::rewr_378_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 378 + 2] = rewr_functions::rewr_378_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 379 + 2] = rewr_functions::rewr_379_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 379 + 2] = rewr_functions::rewr_379_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 380 + 2] = rewr_functions::rewr_380_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 380 + 2] = rewr_functions::rewr_380_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 381 + 2] = rewr_functions::rewr_381_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 381 + 2] = rewr_functions::rewr_381_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 382 + 3] = rewr_functions::rewr_382_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 382 + 3] = rewr_functions::rewr_382_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 382 + 5] = rewr_functions::rewr_382_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 382 + 5] = rewr_functions::rewr_382_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 382 + 6] = rewr_functions::rewr_382_6_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 382 + 6] = rewr_functions::rewr_382_6_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 383 + 2] = rewr_functions::rewr_383_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 383 + 2] = rewr_functions::rewr_383_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 384 + 2] = rewr_functions::rewr_384_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 384 + 2] = rewr_functions::rewr_384_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 385 + 2] = rewr_functions::rewr_385_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 385 + 2] = rewr_functions::rewr_385_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 386 + 2] = rewr_functions::rewr_386_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 386 + 2] = rewr_functions::rewr_386_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 387 + 2] = rewr_functions::rewr_387_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 387 + 2] = rewr_functions::rewr_387_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 388 + 2] = rewr_functions::rewr_388_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 388 + 2] = rewr_functions::rewr_388_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 389 + 3] = rewr_functions::rewr_389_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 389 + 3] = rewr_functions::rewr_389_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 389 + 5] = rewr_functions::rewr_389_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 389 + 5] = rewr_functions::rewr_389_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 390 + 2] = rewr_functions::rewr_390_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 390 + 2] = rewr_functions::rewr_390_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 391 + 2] = rewr_functions::rewr_391_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 391 + 2] = rewr_functions::rewr_391_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 392 + 2] = rewr_functions::rewr_392_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 392 + 2] = rewr_functions::rewr_392_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 393 + 2] = rewr_functions::rewr_393_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 393 + 2] = rewr_functions::rewr_393_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 394 + 2] = rewr_functions::rewr_394_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 394 + 2] = rewr_functions::rewr_394_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 395 + 2] = rewr_functions::rewr_395_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 395 + 2] = rewr_functions::rewr_395_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 396 + 3] = rewr_functions::rewr_396_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 396 + 3] = rewr_functions::rewr_396_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 396 + 5] = rewr_functions::rewr_396_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 396 + 5] = rewr_functions::rewr_396_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 397 + 2] = rewr_functions::rewr_397_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 397 + 2] = rewr_functions::rewr_397_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 398 + 2] = rewr_functions::rewr_398_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 398 + 2] = rewr_functions::rewr_398_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 399 + 2] = rewr_functions::rewr_399_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 399 + 2] = rewr_functions::rewr_399_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 400 + 2] = rewr_functions::rewr_400_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 400 + 2] = rewr_functions::rewr_400_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 401 + 3] = rewr_functions::rewr_401_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 401 + 3] = rewr_functions::rewr_401_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 401 + 4] = rewr_functions::rewr_401_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 401 + 4] = rewr_functions::rewr_401_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 402 + 3] = rewr_functions::rewr_402_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 402 + 3] = rewr_functions::rewr_402_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 402 + 4] = rewr_functions::rewr_402_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 402 + 4] = rewr_functions::rewr_402_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 403 + 1] = rewr_functions::rewr_403_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 403 + 1] = rewr_functions::rewr_403_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 404 + 3] = rewr_functions::rewr_404_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 404 + 3] = rewr_functions::rewr_404_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 404 + 4] = rewr_functions::rewr_404_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 404 + 4] = rewr_functions::rewr_404_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 405 + 2] = rewr_functions::rewr_405_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 405 + 2] = rewr_functions::rewr_405_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 406 + 2] = rewr_functions::rewr_406_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 406 + 2] = rewr_functions::rewr_406_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 407 + 3] = rewr_functions::rewr_407_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 407 + 3] = rewr_functions::rewr_407_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 407 + 4] = rewr_functions::rewr_407_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 407 + 4] = rewr_functions::rewr_407_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 408 + 2] = rewr_functions::rewr_408_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 408 + 2] = rewr_functions::rewr_408_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 409 + 2] = rewr_functions::rewr_409_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 409 + 2] = rewr_functions::rewr_409_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 410 + 2] = rewr_functions::rewr_410_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 410 + 2] = rewr_functions::rewr_410_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 411 + 2] = rewr_functions::rewr_411_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 411 + 2] = rewr_functions::rewr_411_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 412 + 3] = rewr_functions::rewr_412_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 412 + 3] = rewr_functions::rewr_412_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 412 + 4] = rewr_functions::rewr_412_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 412 + 4] = rewr_functions::rewr_412_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 412 + 5] = rewr_functions::rewr_412_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 412 + 5] = rewr_functions::rewr_412_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 413 + 3] = rewr_functions::rewr_413_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 413 + 3] = rewr_functions::rewr_413_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 413 + 4] = rewr_functions::rewr_413_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 413 + 4] = rewr_functions::rewr_413_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 413 + 5] = rewr_functions::rewr_413_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 413 + 5] = rewr_functions::rewr_413_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 414 + 1] = rewr_functions::rewr_414_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 414 + 1] = rewr_functions::rewr_414_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 415 + 3] = rewr_functions::rewr_415_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 415 + 3] = rewr_functions::rewr_415_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 415 + 4] = rewr_functions::rewr_415_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 415 + 4] = rewr_functions::rewr_415_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 415 + 5] = rewr_functions::rewr_415_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 415 + 5] = rewr_functions::rewr_415_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 416 + 2] = rewr_functions::rewr_416_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 416 + 2] = rewr_functions::rewr_416_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 417 + 2] = rewr_functions::rewr_417_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 417 + 2] = rewr_functions::rewr_417_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 418 + 2] = rewr_functions::rewr_418_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 418 + 2] = rewr_functions::rewr_418_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 419 + 3] = rewr_functions::rewr_419_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 419 + 3] = rewr_functions::rewr_419_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 419 + 4] = rewr_functions::rewr_419_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 419 + 4] = rewr_functions::rewr_419_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 419 + 5] = rewr_functions::rewr_419_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 419 + 5] = rewr_functions::rewr_419_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 420 + 2] = rewr_functions::rewr_420_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 420 + 2] = rewr_functions::rewr_420_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 421 + 2] = rewr_functions::rewr_421_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 421 + 2] = rewr_functions::rewr_421_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 422 + 2] = rewr_functions::rewr_422_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 422 + 2] = rewr_functions::rewr_422_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 423 + 2] = rewr_functions::rewr_423_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 423 + 2] = rewr_functions::rewr_423_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 424 + 2] = rewr_functions::rewr_424_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 424 + 2] = rewr_functions::rewr_424_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 425 + 2] = rewr_functions::rewr_425_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 425 + 2] = rewr_functions::rewr_425_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 426 + 3] = rewr_functions::rewr_426_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 426 + 3] = rewr_functions::rewr_426_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 426 + 5] = rewr_functions::rewr_426_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 426 + 5] = rewr_functions::rewr_426_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 427 + 2] = rewr_functions::rewr_427_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 427 + 2] = rewr_functions::rewr_427_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 428 + 2] = rewr_functions::rewr_428_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 428 + 2] = rewr_functions::rewr_428_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 429 + 2] = rewr_functions::rewr_429_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 429 + 2] = rewr_functions::rewr_429_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 430 + 2] = rewr_functions::rewr_430_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 430 + 2] = rewr_functions::rewr_430_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 431 + 2] = rewr_functions::rewr_431_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 431 + 2] = rewr_functions::rewr_431_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 432 + 2] = rewr_functions::rewr_432_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 432 + 2] = rewr_functions::rewr_432_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 433 + 2] = rewr_functions::rewr_433_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 433 + 2] = rewr_functions::rewr_433_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 434 + 3] = rewr_functions::rewr_434_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 434 + 3] = rewr_functions::rewr_434_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 434 + 5] = rewr_functions::rewr_434_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 434 + 5] = rewr_functions::rewr_434_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 435 + 2] = rewr_functions::rewr_435_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 435 + 2] = rewr_functions::rewr_435_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 436 + 2] = rewr_functions::rewr_436_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 436 + 2] = rewr_functions::rewr_436_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 437 + 2] = rewr_functions::rewr_437_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 437 + 2] = rewr_functions::rewr_437_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 438 + 2] = rewr_functions::rewr_438_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 438 + 2] = rewr_functions::rewr_438_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 439 + 3] = rewr_functions::rewr_439_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 439 + 3] = rewr_functions::rewr_439_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 439 + 4] = rewr_functions::rewr_439_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 439 + 4] = rewr_functions::rewr_439_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 440 + 3] = rewr_functions::rewr_440_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 440 + 3] = rewr_functions::rewr_440_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 440 + 4] = rewr_functions::rewr_440_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 440 + 4] = rewr_functions::rewr_440_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 441 + 1] = rewr_functions::rewr_441_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 441 + 1] = rewr_functions::rewr_441_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 442 + 3] = rewr_functions::rewr_442_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 442 + 3] = rewr_functions::rewr_442_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 442 + 4] = rewr_functions::rewr_442_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 442 + 4] = rewr_functions::rewr_442_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 443 + 2] = rewr_functions::rewr_443_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 443 + 2] = rewr_functions::rewr_443_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 444 + 2] = rewr_functions::rewr_444_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 444 + 2] = rewr_functions::rewr_444_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 445 + 2] = rewr_functions::rewr_445_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 445 + 2] = rewr_functions::rewr_445_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 446 + 3] = rewr_functions::rewr_446_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 446 + 3] = rewr_functions::rewr_446_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 446 + 4] = rewr_functions::rewr_446_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 446 + 4] = rewr_functions::rewr_446_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 447 + 2] = rewr_functions::rewr_447_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 447 + 2] = rewr_functions::rewr_447_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 448 + 2] = rewr_functions::rewr_448_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 448 + 2] = rewr_functions::rewr_448_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 449 + 2] = rewr_functions::rewr_449_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 449 + 2] = rewr_functions::rewr_449_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 450 + 2] = rewr_functions::rewr_450_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 450 + 2] = rewr_functions::rewr_450_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 451 + 3] = rewr_functions::rewr_451_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 451 + 3] = rewr_functions::rewr_451_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 451 + 4] = rewr_functions::rewr_451_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 451 + 4] = rewr_functions::rewr_451_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 452 + 3] = rewr_functions::rewr_452_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 452 + 3] = rewr_functions::rewr_452_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 452 + 4] = rewr_functions::rewr_452_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 452 + 4] = rewr_functions::rewr_452_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 453 + 1] = rewr_functions::rewr_453_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 453 + 1] = rewr_functions::rewr_453_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 454 + 3] = rewr_functions::rewr_454_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 454 + 3] = rewr_functions::rewr_454_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 454 + 4] = rewr_functions::rewr_454_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 454 + 4] = rewr_functions::rewr_454_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 455 + 2] = rewr_functions::rewr_455_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 455 + 2] = rewr_functions::rewr_455_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 456 + 2] = rewr_functions::rewr_456_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 456 + 2] = rewr_functions::rewr_456_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 457 + 2] = rewr_functions::rewr_457_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 457 + 2] = rewr_functions::rewr_457_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 458 + 2] = rewr_functions::rewr_458_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 458 + 2] = rewr_functions::rewr_458_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 459 + 2] = rewr_functions::rewr_459_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 459 + 2] = rewr_functions::rewr_459_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 460 + 3] = rewr_functions::rewr_460_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 460 + 3] = rewr_functions::rewr_460_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 460 + 4] = rewr_functions::rewr_460_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 460 + 4] = rewr_functions::rewr_460_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 461 + 2] = rewr_functions::rewr_461_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 461 + 2] = rewr_functions::rewr_461_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 462 + 2] = rewr_functions::rewr_462_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 462 + 2] = rewr_functions::rewr_462_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 463 + 2] = rewr_functions::rewr_463_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 463 + 2] = rewr_functions::rewr_463_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 464 + 2] = rewr_functions::rewr_464_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 464 + 2] = rewr_functions::rewr_464_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 465 + 2] = rewr_functions::rewr_465_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 465 + 2] = rewr_functions::rewr_465_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 466 + 2] = rewr_functions::rewr_466_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 466 + 2] = rewr_functions::rewr_466_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 467 + 3] = rewr_functions::rewr_467_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 467 + 3] = rewr_functions::rewr_467_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 467 + 5] = rewr_functions::rewr_467_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 467 + 5] = rewr_functions::rewr_467_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 468 + 2] = rewr_functions::rewr_468_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 468 + 2] = rewr_functions::rewr_468_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 469 + 2] = rewr_functions::rewr_469_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 469 + 2] = rewr_functions::rewr_469_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 470 + 2] = rewr_functions::rewr_470_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 470 + 2] = rewr_functions::rewr_470_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 471 + 2] = rewr_functions::rewr_471_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 471 + 2] = rewr_functions::rewr_471_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 472 + 2] = rewr_functions::rewr_472_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 472 + 2] = rewr_functions::rewr_472_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 473 + 2] = rewr_functions::rewr_473_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 473 + 2] = rewr_functions::rewr_473_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 474 + 3] = rewr_functions::rewr_474_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 474 + 3] = rewr_functions::rewr_474_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 474 + 5] = rewr_functions::rewr_474_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 474 + 5] = rewr_functions::rewr_474_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 475 + 2] = rewr_functions::rewr_475_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 475 + 2] = rewr_functions::rewr_475_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 476 + 2] = rewr_functions::rewr_476_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 476 + 2] = rewr_functions::rewr_476_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 477 + 2] = rewr_functions::rewr_477_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 477 + 2] = rewr_functions::rewr_477_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 478 + 2] = rewr_functions::rewr_478_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 478 + 2] = rewr_functions::rewr_478_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 479 + 2] = rewr_functions::rewr_479_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 479 + 2] = rewr_functions::rewr_479_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 480 + 2] = rewr_functions::rewr_480_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 480 + 2] = rewr_functions::rewr_480_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 481 + 3] = rewr_functions::rewr_481_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 481 + 3] = rewr_functions::rewr_481_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 481 + 5] = rewr_functions::rewr_481_5_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 481 + 5] = rewr_functions::rewr_481_5_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 482 + 2] = rewr_functions::rewr_482_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 482 + 2] = rewr_functions::rewr_482_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 483 + 2] = rewr_functions::rewr_483_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 483 + 2] = rewr_functions::rewr_483_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 484 + 2] = rewr_functions::rewr_484_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 484 + 2] = rewr_functions::rewr_484_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 485 + 2] = rewr_functions::rewr_485_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 485 + 2] = rewr_functions::rewr_485_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 486 + 2] = rewr_functions::rewr_486_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 486 + 2] = rewr_functions::rewr_486_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 487 + 2] = rewr_functions::rewr_487_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 487 + 2] = rewr_functions::rewr_487_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 488 + 2] = rewr_functions::rewr_488_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 488 + 2] = rewr_functions::rewr_488_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 489 + 2] = rewr_functions::rewr_489_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 489 + 2] = rewr_functions::rewr_489_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 490 + 3] = rewr_functions::rewr_490_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 490 + 3] = rewr_functions::rewr_490_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 491 + 2] = rewr_functions::rewr_491_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 491 + 2] = rewr_functions::rewr_491_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 492 + 2] = rewr_functions::rewr_492_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 492 + 2] = rewr_functions::rewr_492_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 493 + 2] = rewr_functions::rewr_493_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 493 + 2] = rewr_functions::rewr_493_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 494 + 1] = rewr_functions::rewr_494_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 494 + 1] = rewr_functions::rewr_494_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 495 + 1] = rewr_functions::rewr_495_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 495 + 1] = rewr_functions::rewr_495_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 496 + 2] = rewr_functions::rewr_496_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 496 + 2] = rewr_functions::rewr_496_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 497 + 2] = rewr_functions::rewr_497_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 497 + 2] = rewr_functions::rewr_497_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 498 + 2] = rewr_functions::rewr_498_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 498 + 2] = rewr_functions::rewr_498_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 499 + 2] = rewr_functions::rewr_499_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 499 + 2] = rewr_functions::rewr_499_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 500 + 2] = rewr_functions::rewr_500_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 500 + 2] = rewr_functions::rewr_500_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 501 + 1] = rewr_functions::rewr_501_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 501 + 1] = rewr_functions::rewr_501_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 502 + 2] = rewr_functions::rewr_502_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 502 + 2] = rewr_functions::rewr_502_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 503 + 2] = rewr_functions::rewr_503_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 503 + 2] = rewr_functions::rewr_503_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 504 + 2] = rewr_functions::rewr_504_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 504 + 2] = rewr_functions::rewr_504_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 505 + 3] = rewr_functions::rewr_505_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 505 + 3] = rewr_functions::rewr_505_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 506 + 2] = rewr_functions::rewr_506_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 506 + 2] = rewr_functions::rewr_506_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 507 + 2] = rewr_functions::rewr_507_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 507 + 2] = rewr_functions::rewr_507_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 508 + 2] = rewr_functions::rewr_508_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 508 + 2] = rewr_functions::rewr_508_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 509 + 2] = rewr_functions::rewr_509_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 509 + 2] = rewr_functions::rewr_509_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 510 + 2] = rewr_functions::rewr_510_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 510 + 2] = rewr_functions::rewr_510_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 511 + 1] = rewr_functions::rewr_511_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 511 + 1] = rewr_functions::rewr_511_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 512 + 2] = rewr_functions::rewr_512_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 512 + 2] = rewr_functions::rewr_512_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 513 + 2] = rewr_functions::rewr_513_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 513 + 2] = rewr_functions::rewr_513_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 514 + 4] = rewr_functions::rewr_514_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 514 + 4] = rewr_functions::rewr_514_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 515 + 4] = rewr_functions::rewr_515_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 515 + 4] = rewr_functions::rewr_515_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 516 + 4] = rewr_functions::rewr_516_4_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 516 + 4] = rewr_functions::rewr_516_4_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 517 + 1] = rewr_functions::rewr_517_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 517 + 1] = rewr_functions::rewr_517_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 518 + 3] = rewr_functions::rewr_518_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 518 + 3] = rewr_functions::rewr_518_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 519 + 1] = rewr_functions::rewr_519_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 519 + 1] = rewr_functions::rewr_519_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 520 + 1] = rewr_functions::rewr_520_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 520 + 1] = rewr_functions::rewr_520_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 521 + 2] = rewr_functions::rewr_521_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 521 + 2] = rewr_functions::rewr_521_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 522 + 3] = rewr_functions::rewr_522_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 522 + 3] = rewr_functions::rewr_522_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 523 + 3] = rewr_functions::rewr_523_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 523 + 3] = rewr_functions::rewr_523_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 524 + 2] = rewr_functions::rewr_524_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 524 + 2] = rewr_functions::rewr_524_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 525 + 3] = rewr_functions::rewr_525_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 525 + 3] = rewr_functions::rewr_525_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 526 + 3] = rewr_functions::rewr_526_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 526 + 3] = rewr_functions::rewr_526_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 527 + 1] = rewr_functions::rewr_527_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 527 + 1] = rewr_functions::rewr_527_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 528 + 3] = rewr_functions::rewr_528_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 528 + 3] = rewr_functions::rewr_528_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 529 + 2] = rewr_functions::rewr_529_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 529 + 2] = rewr_functions::rewr_529_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 530 + 1] = rewr_functions::rewr_530_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 530 + 1] = rewr_functions::rewr_530_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 531 + 2] = rewr_functions::rewr_531_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 531 + 2] = rewr_functions::rewr_531_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 532 + 2] = rewr_functions::rewr_532_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 532 + 2] = rewr_functions::rewr_532_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 533 + 2] = rewr_functions::rewr_533_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 533 + 2] = rewr_functions::rewr_533_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 534 + 2] = rewr_functions::rewr_534_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 534 + 2] = rewr_functions::rewr_534_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 535 + 2] = rewr_functions::rewr_535_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 535 + 2] = rewr_functions::rewr_535_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 536 + 2] = rewr_functions::rewr_536_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 536 + 2] = rewr_functions::rewr_536_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 537 + 2] = rewr_functions::rewr_537_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 537 + 2] = rewr_functions::rewr_537_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 538 + 1] = rewr_functions::rewr_538_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 538 + 1] = rewr_functions::rewr_538_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 539 + 2] = rewr_functions::rewr_539_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 539 + 2] = rewr_functions::rewr_539_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 540 + 2] = rewr_functions::rewr_540_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 540 + 2] = rewr_functions::rewr_540_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 541 + 2] = rewr_functions::rewr_541_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 541 + 2] = rewr_functions::rewr_541_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 542 + 2] = rewr_functions::rewr_542_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 542 + 2] = rewr_functions::rewr_542_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 543 + 3] = rewr_functions::rewr_543_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 543 + 3] = rewr_functions::rewr_543_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 544 + 2] = rewr_functions::rewr_544_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 544 + 2] = rewr_functions::rewr_544_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 545 + 2] = rewr_functions::rewr_545_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 545 + 2] = rewr_functions::rewr_545_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 546 + 2] = rewr_functions::rewr_546_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 546 + 2] = rewr_functions::rewr_546_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 547 + 3] = rewr_functions::rewr_547_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 547 + 3] = rewr_functions::rewr_547_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 548 + 2] = rewr_functions::rewr_548_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 548 + 2] = rewr_functions::rewr_548_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 549 + 2] = rewr_functions::rewr_549_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 549 + 2] = rewr_functions::rewr_549_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 550 + 2] = rewr_functions::rewr_550_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 550 + 2] = rewr_functions::rewr_550_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 551 + 3] = rewr_functions::rewr_551_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 551 + 3] = rewr_functions::rewr_551_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 552 + 2] = rewr_functions::rewr_552_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 552 + 2] = rewr_functions::rewr_552_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 553 + 2] = rewr_functions::rewr_553_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 553 + 2] = rewr_functions::rewr_553_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 554 + 2] = rewr_functions::rewr_554_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 554 + 2] = rewr_functions::rewr_554_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 555 + 3] = rewr_functions::rewr_555_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 555 + 3] = rewr_functions::rewr_555_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 556 + 2] = rewr_functions::rewr_556_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 556 + 2] = rewr_functions::rewr_556_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 557 + 2] = rewr_functions::rewr_557_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 557 + 2] = rewr_functions::rewr_557_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 558 + 2] = rewr_functions::rewr_558_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 558 + 2] = rewr_functions::rewr_558_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 559 + 2] = rewr_functions::rewr_559_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 559 + 2] = rewr_functions::rewr_559_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 560 + 3] = rewr_functions::rewr_560_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 560 + 3] = rewr_functions::rewr_560_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 561 + 2] = rewr_functions::rewr_561_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 561 + 2] = rewr_functions::rewr_561_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 562 + 2] = rewr_functions::rewr_562_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 562 + 2] = rewr_functions::rewr_562_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 563 + 2] = rewr_functions::rewr_563_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 563 + 2] = rewr_functions::rewr_563_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 564 + 2] = rewr_functions::rewr_564_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 564 + 2] = rewr_functions::rewr_564_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 565 + 3] = rewr_functions::rewr_565_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 565 + 3] = rewr_functions::rewr_565_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 566 + 2] = rewr_functions::rewr_566_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 566 + 2] = rewr_functions::rewr_566_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 567 + 2] = rewr_functions::rewr_567_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 567 + 2] = rewr_functions::rewr_567_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 568 + 2] = rewr_functions::rewr_568_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 568 + 2] = rewr_functions::rewr_568_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 569 + 2] = rewr_functions::rewr_569_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 569 + 2] = rewr_functions::rewr_569_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 570 + 3] = rewr_functions::rewr_570_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 570 + 3] = rewr_functions::rewr_570_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 571 + 2] = rewr_functions::rewr_571_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 571 + 2] = rewr_functions::rewr_571_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 572 + 2] = rewr_functions::rewr_572_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 572 + 2] = rewr_functions::rewr_572_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 573 + 2] = rewr_functions::rewr_573_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 573 + 2] = rewr_functions::rewr_573_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 574 + 2] = rewr_functions::rewr_574_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 574 + 2] = rewr_functions::rewr_574_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 575 + 2] = rewr_functions::rewr_575_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 575 + 2] = rewr_functions::rewr_575_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 576 + 3] = rewr_functions::rewr_576_3_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 576 + 3] = rewr_functions::rewr_576_3_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 577 + 2] = rewr_functions::rewr_577_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 577 + 2] = rewr_functions::rewr_577_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 578 + 2] = rewr_functions::rewr_578_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 578 + 2] = rewr_functions::rewr_578_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 590 + 1] = rewr_functions::rewr_590_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 590 + 1] = rewr_functions::rewr_590_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 591 + 2] = rewr_functions::rewr_591_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 591 + 2] = rewr_functions::rewr_591_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 592 + 2] = rewr_functions::rewr_592_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 592 + 2] = rewr_functions::rewr_592_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 593 + 2] = rewr_functions::rewr_593_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 593 + 2] = rewr_functions::rewr_593_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 605 + 1] = rewr_functions::rewr_605_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 605 + 1] = rewr_functions::rewr_605_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 606 + 2] = rewr_functions::rewr_606_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 606 + 2] = rewr_functions::rewr_606_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 607 + 2] = rewr_functions::rewr_607_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 607 + 2] = rewr_functions::rewr_607_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 608 + 2] = rewr_functions::rewr_608_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 608 + 2] = rewr_functions::rewr_608_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 625 + 1] = rewr_functions::rewr_625_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 625 + 1] = rewr_functions::rewr_625_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 626 + 2] = rewr_functions::rewr_626_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 626 + 2] = rewr_functions::rewr_626_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 627 + 2] = rewr_functions::rewr_627_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 627 + 2] = rewr_functions::rewr_627_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 628 + 2] = rewr_functions::rewr_628_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 628 + 2] = rewr_functions::rewr_628_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 643 + 1] = rewr_functions::rewr_643_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 643 + 1] = rewr_functions::rewr_643_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 644 + 1] = rewr_functions::rewr_644_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 644 + 1] = rewr_functions::rewr_644_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 645 + 1] = rewr_functions::rewr_645_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 645 + 1] = rewr_functions::rewr_645_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 646 + 1] = rewr_functions::rewr_646_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 646 + 1] = rewr_functions::rewr_646_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 647 + 2] = rewr_functions::rewr_647_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 647 + 2] = rewr_functions::rewr_647_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 648 + 2] = rewr_functions::rewr_648_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 648 + 2] = rewr_functions::rewr_648_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 649 + 2] = rewr_functions::rewr_649_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 649 + 2] = rewr_functions::rewr_649_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 666 + 1] = rewr_functions::rewr_666_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 666 + 1] = rewr_functions::rewr_666_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 667 + 1] = rewr_functions::rewr_667_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 667 + 1] = rewr_functions::rewr_667_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 668 + 2] = rewr_functions::rewr_668_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 668 + 2] = rewr_functions::rewr_668_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 669 + 2] = rewr_functions::rewr_669_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 669 + 2] = rewr_functions::rewr_669_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 670 + 2] = rewr_functions::rewr_670_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 670 + 2] = rewr_functions::rewr_670_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 687 + 1] = rewr_functions::rewr_687_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 687 + 1] = rewr_functions::rewr_687_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 688 + 1] = rewr_functions::rewr_688_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 688 + 1] = rewr_functions::rewr_688_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 689 + 1] = rewr_functions::rewr_689_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 689 + 1] = rewr_functions::rewr_689_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 690 + 2] = rewr_functions::rewr_690_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 690 + 2] = rewr_functions::rewr_690_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 691 + 2] = rewr_functions::rewr_691_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 691 + 2] = rewr_functions::rewr_691_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 692 + 2] = rewr_functions::rewr_692_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 692 + 2] = rewr_functions::rewr_692_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 706 + 2] = rewr_functions::rewr_706_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 706 + 2] = rewr_functions::rewr_706_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 707 + 1] = rewr_functions::rewr_707_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 707 + 1] = rewr_functions::rewr_707_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 707 + 2] = rewr_functions::rewr_707_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 707 + 2] = rewr_functions::rewr_707_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 708 + 1] = rewr_functions::rewr_708_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 708 + 1] = rewr_functions::rewr_708_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 709 + 1] = rewr_functions::rewr_709_1_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 709 + 1] = rewr_functions::rewr_709_1_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 710 + 2] = rewr_functions::rewr_710_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 710 + 2] = rewr_functions::rewr_710_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 711 + 2] = rewr_functions::rewr_711_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 711 + 2] = rewr_functions::rewr_711_2_term_arg_in_normal_form;
  this_rewriter->functions_when_arguments_are_not_in_normal_form[this_rewriter->arity_bound * 712 + 2] = rewr_functions::rewr_712_2_term;
  this_rewriter->functions_when_arguments_are_in_normal_form[this_rewriter->arity_bound * 712 + 2] = rewr_functions::rewr_712_2_term_arg_in_normal_form;
}
