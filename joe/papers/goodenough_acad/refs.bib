@article{contract_as_automaton,
  author   = {Flood, Mark D.
              and Goodenough, Oliver R.},
  title    = {Contract as automaton: representing a simple financial agreement in computational form},
  journal  = {Artificial Intelligence and Law},
  year     = {2021},
  month    = {Oct},
  day      = {13},
  abstract = {We show that the fundamental legal structure of a well-written financial contract follows a state-transition logic that can be formalized mathematically as a finite-state machine (specifically, a deterministic finite automaton or DFA). The automaton defines the states that a financial relationship can be in, such as ``default,'' ``delinquency,'' ``performing,'' etc., and it defines an ``alphabet'' of events that can trigger state transitions, such as ``payment arrives,'' ``due date passes,'' etc. The core of a contract describes the rules by which different sequences of events trigger particular sequences of state transitions in the relationship between the counterparties. By conceptualizing and representing the legal structure of a contract in this way, we expose it to a range of powerful tools and results from the theory of computation. These allow, for example, automated reasoning to determine whether a contract is internally coherent and whether it is complete relative to a particular event alphabet. We illustrate the process by representing a simple loan agreement as an automaton.},
  issn     = {1572-8382},
  doi      = {10.1007/s10506-021-09300-9},
  url      = {https://doi.org/10.1007/s10506-021-09300-9}
}

@book{mcrl_book,
  author    = {Groote, Jan Friso and Mousavi, Mohammad Reza},
  title     = {Modeling and Analysis of Communicating Systems},
  year      = {2014},
  isbn      = {0262027712},
  publisher = {The MIT Press},
  abstract  = {Complex communicating computer systems -- computers connected by data networks and in constant communication with their environments -- do not always behave as expected. This book introduces behavioral modeling, a rigorous approach to behavioral specification and verification of concurrent and distributed systems. It is among the very few techniques capable of modeling systems interaction at a level of abstraction sufficient for the interaction to be understood and analyzed. Offering both a mathematically grounded theory and real-world applications, the book is suitable for classroom use and as a reference for system architects. The book covers the foundation of behavioral modeling using process algebra, transition systems, abstract data types, and modal logics. Exercises and examples augment the theoretical discussion. The book introduces a modeling language, mCRL2, that enables concise descriptions of even the most intricate distributed algorithms and protocols. Using behavioral axioms and such proof methods as confluence, cones, and foci, readers will learn how to prove such algorithms equal to their specifications. Specifications in mCRL2 can be simulated, visualized, or verified against their requirements. An extensive mCRL2 toolset for mechanically verifying the requirements is freely available online; this toolset has been successfully used to design and analyze industrial software that ranges from healthcare applications to particle accelerators at CERN. Appendixes offer material on equations and notation as well as exercise solutions.}
}

@inproceedings{mcrl_toolset,
  author    = {Bunte, Olav
               and Groote, Jan Friso
               and Keiren, Jeroen J. A.
               and Laveaux, Maurice
               and Neele, Thomas
               and de Vink, Erik P.
               and Wesselink, Wieger
               and Wijs, Anton
               and Willemse, Tim A. C.},
  editor    = {Vojnar, Tom{\'a}{\v{s}}
               and Zhang, Lijun},
  title     = {The mCRL2 Toolset for Analysing Concurrent Systems},
  booktitle = {Tools and Algorithms for the Construction and Analysis of Systems},
  year      = {2019},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {21--39},
  abstract  = {Reasoning about the correctness of parallel and distributed systems requires automated tools. By now, the mCRL2 toolset and language have been developed over a course of more than fifteen years. In this paper, we report on the progress and advancements over the past six years. Firstly, the mCRL2 language has been extended to support the modelling of probabilistic behaviour. Furthermore, the usability has been improved with the addition of refinement checking, counterexample generation and a user-friendly GUI. Finally, several performance improvements have been made in the treatment of behavioural equivalences. Besides the changes to the toolset itself, we cover recent applications of mCRL2 in software product line engineering and the use of domain specific languages (DSLs).},
  isbn      = {978-3-030-17465-1}
}

@article{mcrl_rewriting,
  title    = {An Account of Implementing Applicative Term Rewriting},
  journal  = {Electronic Notes in Theoretical Computer Science},
  volume   = {174},
  number   = {10},
  pages    = {139-155},
  year     = {2007},
  note     = {Proceedings of the Sixth International Workshop on Reduction Strategies in Rewriting and Programming (WRS 2006)},
  issn     = {1571-0661},
  doi      = {https://doi.org/10.1016/j.entcs.2007.02.049},
  url      = {https://www.sciencedirect.com/science/article/pii/S1571066107004033},
  author   = {Muck {van Weerdenburg}},
  keywords = {efficient rewriting, open terms, nonlinear match trees},
  abstract = {Generation of labelled transition systems from system specifications is highly dependent on efficient rewriting (or related techniques). We give an account of the implementation of two rewriters of the mCRL2 toolset. These rewriters work on open terms and use nonlinear match trees. A comparison is made with other commonly used efficient rewriters.}
}

@article{mcrl_lhc,
  title    = {Using model checking to analyze the system behavior of the LHC production grid},
  journal  = {Future Generation Computer Systems},
  volume   = {29},
  number   = {8},
  pages    = {2239-2251},
  year     = {2013},
  issn     = {0167-739X},
  doi      = {https://doi.org/10.1016/j.future.2013.06.004},
  url      = {https://www.sciencedirect.com/science/article/pii/S0167739X13001180},
  author   = {Daniela Remenska and Tim A.C. Willemse and Kees Verstoep and Jeff Templon and Henri Bal},
  keywords = {Model checking, Process algebra, Grid, LHC, Distributed system, Workflow},
  abstract = {DIRAC (Distributed Infrastructure with Remote Agent Control) is the grid solution designed to support production activities as well as user data analysis for the Large Hadron Collider “beauty” experiment. It consists of cooperating distributed services and a plethora of light-weight agents delivering the workload to the grid resources. Services accept requests from agents and running jobs, while agents actively fulfill specific goals. Services maintain database back-ends to store dynamic state information of entities such as jobs, queues, or requests for data transfer. Agents continuously check for changes in the service states and react to these accordingly. The logic of each agent is rather simple; the main source of complexity lies in their cooperation. These agents run concurrently and communicate using the services’ databases as a shared memory for synchronizing the state transitions. Despite the effort invested in making DIRAC reliable, entities occasionally get into inconsistent states. Tracing and fixing such behaviors is difficult, given the inherent parallelism among the distributed components and the size of the implementation. In this paper we present an analysis of DIRAC with mCRL2, process algebra with data. We have reverse engineered two critical and related DIRAC subsystems, and subsequently modeled their behavior with the mCRL2 toolset. This enabled us to easily locate race conditions and livelocks which were confirmed to occur in the real system. We further formalized and verified several behavioral properties of the two modeled subsystems.}
}