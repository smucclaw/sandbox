{"version":3,"sources":["webpack://merge-conflict/./node_modules/vscode-nls/lib/common/common.js","webpack://merge-conflict/./node_modules/vscode-nls/lib/common/ral.js","webpack://merge-conflict/./node_modules/vscode-nls/lib/node/main.js","webpack://merge-conflict/./src/codelensProvider.ts","webpack://merge-conflict/./src/commandHandler.ts","webpack://merge-conflict/./src/contentProvider.ts","webpack://merge-conflict/./src/delayer.ts","webpack://merge-conflict/./src/documentMergeConflict.ts","webpack://merge-conflict/./src/documentTracker.ts","webpack://merge-conflict/./src/mergeConflictParser.ts","webpack://merge-conflict/./src/mergeDecorator.ts","webpack://merge-conflict/./src/services.ts","webpack://merge-conflict/external \"fs\"","webpack://merge-conflict/external \"path\"","webpack://merge-conflict/external \"vscode\"","webpack://merge-conflict/webpack/bootstrap","webpack://merge-conflict/./src/mergeConflictMain.ts"],"names":["Object","defineProperty","exports","value","config","loadMessageBundle","localize","format","setPseudo","isPseudo","isDefined","BundleFormat","MessageFormat","LocalizeInfo","ral_1","message","args","replace","length","match","rest","index","arg","replacement","String","is","candidate","key","comment","pseudo","_key","_i","arguments","file","default","opts","_ral","RAL","undefined","Error","install","ral","path","fs","common_1","common_2","enumerable","get","resolvedBundles","options","toString","prototype","isNumber","call","isString","readJsonFileSync","filename","JSON","parse","readFileSync","createScopedLocalizeFunction","messages","console","error","stack","warn","cacheBundle","bundle","loadDefaultNlsBundle","bundlePath","folder","metaData","join","result","create","module_1","entry","createDefaultNlsBundle","err","log","loadNlsBundle","header","languagePackSupport","cacheRoot","languagePackId","translationsConfigFile","translationsConfig","d","id","hash","useMemoryOnly","writeBundle","encoding","flag","Date","utimes","code","SyntaxError","unlink","metaDataPath","languagePackLocation","languagePack","contents","module_2","translations","outDir","resultMessages","i","keys","messageKey","translatedMessage","push","createNLSBundle","writeFileSync","stringify","loadNlsBundleOrCreateFromI18n","root","language","existsSync","lastIndexOf","substring","findInTheBoxBundle","ext","extname","substr","messageFormat","both","headerFile","dirname","parent","tryFindMetaDataHeaderFile","nlsBundle","module_3","json","resolvedLanguage","cacheLanguageResolution","locale","resolveLanguage","Array","isArray","toLowerCase","bundleFormat","standalone","process","env","VSCODE_NLS_CONFIG","vscodeOptions_1","availableLanguages","isBoolean","_languagePackSupport","_cacheRoot","_languagePackId","_translationsConfigFile","_corruptedFile","exists","writeFile","_a","initializeSettings","freeze","constructor","trackerService","this","tracker","createTracker","begin","enableCodeLens","registerCodeLensProvider","configurationUpdated","updatedConfig","codeLensRegistrationHandle","dispose","document","_token","conflicts","getConflicts","conflictsCount","vscode","commands","executeCommand","items","forEach","conflict","acceptCurrentCommand","command","title","acceptIncomingCommand","acceptBothCommand","diffCommand","CodeLens","range","with","start","character","languages","scheme","NavigationDirection","disposables","registerTextEditorCommand","acceptCurrent","acceptIncoming","acceptSelection","acceptBoth","acceptAllCurrent","acceptAllCurrentResources","acceptAllIncoming","acceptAllIncomingResources","acceptAllBoth","navigateNext","navigatePrevious","compare","cb","resourceCB","registerCommand","every","resourceUri","map","editor","window","activeTextEditor","accept","acceptAll","resources","acceptAllResources","findConflictContainingSelection","showWarningMessage","uri","current","content","leftRanges","rightRanges","incoming","leftUri","query","ranges","rightUri","mergeConflictLineOffsets","nextconflict","isEqual","end","line","selection","Range","docPath","fileName","openToTheSide","workspace","getConfiguration","viewColumn","ViewColumn","Beside","Active","navigate","Forwards","Backwards","typeToAccept","tokenAfterCurrentBlock","splitter","commonAncestors","active","isBefore","isAfter","forget","commitEdit","disposable","direction","navigationResult","findConflictForNavigation","canNavigate","Selection","revealRange","TextEditorRevealType","Default","type","edit","applyEdit","documents","Promise","all","resource","openTextDocument","WorkspaceEdit","newText","contains","predicate","fallback","scanOrder","slice","reverse","MergeConflictContentProvider","context","subscriptions","registerTextDocumentContentProvider","text","lastPosition","Position","rangeObj","conflictRange","fullRange","fullStart","fullEnd","getText","documentEnd","lineAt","lineCount","ex","showErrorMessage","defaultDelay","timeout","completionPromise","onSuccess","task","trigger","delay","cancelTimeout","resolve","then","setTimeout","forceDelivery","isTriggered","cancel","clearTimeout","descriptor","replaceRangeWithContent","currentContent","incomingContent","concat","isNewlineOnly","ScanTask","delayTime","initialOrigin","origins","Set","add","delayTask","Delayer","addOrigin","name","hasOrigin","has","OriginDocumentMergeConflictTracker","origin","isPending","cache","Map","delayExpireTime","getCacheKey","getConflictsOrEmpty","cacheItem","set","from","delete","clear","_origins","MergeConflictParser","containsConflict","scanDocument","startHeaderMarker","commonAncestorsMarker","endFooterMarker","currentConflict","conflictDescriptors","isEmptyOrWhitespace","startsWith","startHeader","endFooter","completeDescriptor","scanItemTolMergeConflictDescriptor","filter","Boolean","DocumentMergeConflict","scanned","decoratorContent","rangeIncludingLineBreak","shiftBackOneCharacter","currentTokenLine","nextTokenLine","includes","unlessEqual","decorations","decorationUsesWholeLine","updating","registerDecorationTypes","visibleTextEditors","e","applyDecorations","onDidOpenTextDocument","event","applyDecorationsFromEvent","onDidChangeTextDocument","onDidChangeVisibleTextEditors","removeDecorations","k","enableDecorations","enableEditorOverview","createTextEditorDecorationType","generateBlockRenderOptions","isWholeLine","backgroundColor","ThemeColor","color","outlineStyle","outlineWidth","outlineColor","after","contentText","overviewRulerColor","renderOptions","overviewRulerLane","OverviewRulerLane","Full","eventDocument","indexOf","matchDecorations","pushDecoration","isEmpty","commonAncestorsRegion","decorationKey","decorationType","setDecorations","services","configuration","createExtensionConfiguration","documentTracker","service","Function","onDidChangeConfiguration","workspaceConfiguration","codeLensEnabled","decoratorsEnabled","module","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"mappings":"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","file":"mergeConflictMain.js","sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.config = exports.loadMessageBundle = exports.localize = exports.format = exports.setPseudo = exports.isPseudo = exports.isDefined = exports.BundleFormat = exports.MessageFormat = void 0;\nvar ral_1 = require(\"./ral\");\nvar MessageFormat;\n(function (MessageFormat) {\n    MessageFormat[\"file\"] = \"file\";\n    MessageFormat[\"bundle\"] = \"bundle\";\n    MessageFormat[\"both\"] = \"both\";\n})(MessageFormat = exports.MessageFormat || (exports.MessageFormat = {}));\nvar BundleFormat;\n(function (BundleFormat) {\n    // the nls.bundle format\n    BundleFormat[\"standalone\"] = \"standalone\";\n    BundleFormat[\"languagePack\"] = \"languagePack\";\n})(BundleFormat = exports.BundleFormat || (exports.BundleFormat = {}));\nvar LocalizeInfo;\n(function (LocalizeInfo) {\n    function is(value) {\n        var candidate = value;\n        return candidate && isDefined(candidate.key) && isDefined(candidate.comment);\n    }\n    LocalizeInfo.is = is;\n})(LocalizeInfo || (LocalizeInfo = {}));\nfunction isDefined(value) {\n    return typeof value !== 'undefined';\n}\nexports.isDefined = isDefined;\nexports.isPseudo = false;\nfunction setPseudo(pseudo) {\n    exports.isPseudo = pseudo;\n}\nexports.setPseudo = setPseudo;\nfunction format(message, args) {\n    var result;\n    if (exports.isPseudo) {\n        // FF3B and FF3D is the Unicode zenkaku representation for [ and ]\n        message = '\\uFF3B' + message.replace(/[aouei]/g, '$&$&') + '\\uFF3D';\n    }\n    if (args.length === 0) {\n        result = message;\n    }\n    else {\n        result = message.replace(/\\{(\\d+)\\}/g, function (match, rest) {\n            var index = rest[0];\n            var arg = args[index];\n            var replacement = match;\n            if (typeof arg === 'string') {\n                replacement = arg;\n            }\n            else if (typeof arg === 'number' || typeof arg === 'boolean' || arg === void 0 || arg === null) {\n                replacement = String(arg);\n            }\n            return replacement;\n        });\n    }\n    return result;\n}\nexports.format = format;\nfunction localize(_key, message) {\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n    }\n    return format(message, args);\n}\nexports.localize = localize;\nfunction loadMessageBundle(file) {\n    return ral_1.default().loadMessageBundle(file);\n}\nexports.loadMessageBundle = loadMessageBundle;\nfunction config(opts) {\n    return ral_1.default().config(opts);\n}\nexports.config = config;\n//# sourceMappingURL=common.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ral;\nfunction RAL() {\n    if (_ral === undefined) {\n        throw new Error(\"No runtime abstraction layer installed\");\n    }\n    return _ral;\n}\n(function (RAL) {\n    function install(ral) {\n        if (ral === undefined) {\n            throw new Error(\"No runtime abstraction layer provided\");\n        }\n        _ral = ral;\n    }\n    RAL.install = install;\n})(RAL || (RAL = {}));\nexports.default = RAL;\n//# sourceMappingURL=ral.js.map","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.config = exports.loadMessageBundle = void 0;\nvar path = require(\"path\");\nvar fs = require(\"fs\");\nvar ral_1 = require(\"../common/ral\");\nvar common_1 = require(\"../common/common\");\nvar common_2 = require(\"../common/common\");\nObject.defineProperty(exports, \"MessageFormat\", { enumerable: true, get: function () { return common_2.MessageFormat; } });\nObject.defineProperty(exports, \"BundleFormat\", { enumerable: true, get: function () { return common_2.BundleFormat; } });\nvar toString = Object.prototype.toString;\nfunction isNumber(value) {\n    return toString.call(value) === '[object Number]';\n}\nfunction isString(value) {\n    return toString.call(value) === '[object String]';\n}\nfunction isBoolean(value) {\n    return value === true || value === false;\n}\nfunction readJsonFileSync(filename) {\n    return JSON.parse(fs.readFileSync(filename, 'utf8'));\n}\nvar resolvedBundles;\nvar options;\nfunction initializeSettings() {\n    options = { locale: undefined, language: undefined, languagePackSupport: false, cacheLanguageResolution: true, messageFormat: common_1.MessageFormat.bundle };\n    if (isString(process.env.VSCODE_NLS_CONFIG)) {\n        try {\n            var vscodeOptions_1 = JSON.parse(process.env.VSCODE_NLS_CONFIG);\n            var language = void 0;\n            if (vscodeOptions_1.availableLanguages) {\n                var value = vscodeOptions_1.availableLanguages['*'];\n                if (isString(value)) {\n                    language = value;\n                }\n            }\n            if (isString(vscodeOptions_1.locale)) {\n                options.locale = vscodeOptions_1.locale.toLowerCase();\n            }\n            if (language === undefined) {\n                options.language = options.locale;\n            }\n            else if (language !== 'en') {\n                options.language = language;\n            }\n            if (isBoolean(vscodeOptions_1._languagePackSupport)) {\n                options.languagePackSupport = vscodeOptions_1._languagePackSupport;\n            }\n            if (isString(vscodeOptions_1._cacheRoot)) {\n                options.cacheRoot = vscodeOptions_1._cacheRoot;\n            }\n            if (isString(vscodeOptions_1._languagePackId)) {\n                options.languagePackId = vscodeOptions_1._languagePackId;\n            }\n            if (isString(vscodeOptions_1._translationsConfigFile)) {\n                options.translationsConfigFile = vscodeOptions_1._translationsConfigFile;\n                try {\n                    options.translationsConfig = readJsonFileSync(options.translationsConfigFile);\n                }\n                catch (error) {\n                    // We can't read the translation config file. Mark the cache as corrupted.\n                    if (vscodeOptions_1._corruptedFile) {\n                        var dirname = path.dirname(vscodeOptions_1._corruptedFile);\n                        fs.exists(dirname, function (exists) {\n                            if (exists) {\n                                fs.writeFile(vscodeOptions_1._corruptedFile, 'corrupted', 'utf8', function (err) {\n                                    console.error(err);\n                                });\n                            }\n                        });\n                    }\n                }\n            }\n        }\n        catch (_a) {\n            // Do nothing.\n        }\n    }\n    common_1.setPseudo(options.locale === 'pseudo');\n    resolvedBundles = Object.create(null);\n}\ninitializeSettings();\nfunction supportsLanguagePack() {\n    return options.languagePackSupport === true && options.cacheRoot !== undefined && options.languagePackId !== undefined && options.translationsConfigFile !== undefined\n        && options.translationsConfig !== undefined;\n}\nfunction createScopedLocalizeFunction(messages) {\n    return function (key, message) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        if (isNumber(key)) {\n            if (key >= messages.length) {\n                console.error(\"Broken localize call found. Index out of bounds. Stacktrace is\\n: \" + new Error('').stack);\n                return;\n            }\n            return common_1.format(messages[key], args);\n        }\n        else {\n            if (isString(message)) {\n                console.warn(\"Message \" + message + \" didn't get externalized correctly.\");\n                return common_1.format(message, args);\n            }\n            else {\n                console.error(\"Broken localize call found. Stacktrace is\\n: \" + new Error('').stack);\n            }\n        }\n    };\n}\nfunction resolveLanguage(file) {\n    var resolvedLanguage;\n    if (options.cacheLanguageResolution && resolvedLanguage) {\n        resolvedLanguage = resolvedLanguage;\n    }\n    else {\n        if (common_1.isPseudo || !options.language) {\n            resolvedLanguage = '.nls.json';\n        }\n        else {\n            var locale = options.language;\n            while (locale) {\n                var candidate = '.nls.' + locale + '.json';\n                if (fs.existsSync(file + candidate)) {\n                    resolvedLanguage = candidate;\n                    break;\n                }\n                else {\n                    var index = locale.lastIndexOf('-');\n                    if (index > 0) {\n                        locale = locale.substring(0, index);\n                    }\n                    else {\n                        resolvedLanguage = '.nls.json';\n                        locale = null;\n                    }\n                }\n            }\n        }\n        if (options.cacheLanguageResolution) {\n            resolvedLanguage = resolvedLanguage;\n        }\n    }\n    return file + resolvedLanguage;\n}\nfunction findInTheBoxBundle(root) {\n    var language = options.language;\n    while (language) {\n        var candidate = path.join(root, \"nls.bundle.\" + language + \".json\");\n        if (fs.existsSync(candidate)) {\n            return candidate;\n        }\n        else {\n            var index = language.lastIndexOf('-');\n            if (index > 0) {\n                language = language.substring(0, index);\n            }\n            else {\n                language = undefined;\n            }\n        }\n    }\n    // Test if we can reslove the default bundle.\n    if (language === undefined) {\n        var candidate = path.join(root, 'nls.bundle.json');\n        if (fs.existsSync(candidate)) {\n            return candidate;\n        }\n    }\n    return undefined;\n}\nfunction mkdir(directory) {\n    try {\n        fs.mkdirSync(directory);\n    }\n    catch (err) {\n        if (err.code === 'EEXIST') {\n            return;\n        }\n        else if (err.code === 'ENOENT') {\n            var parent = path.dirname(directory);\n            if (parent !== directory) {\n                mkdir(parent);\n                fs.mkdirSync(directory);\n            }\n        }\n        else {\n            throw err;\n        }\n    }\n}\nfunction createDefaultNlsBundle(folder) {\n    var metaData = readJsonFileSync(path.join(folder, 'nls.metadata.json'));\n    var result = Object.create(null);\n    for (var module_1 in metaData) {\n        var entry = metaData[module_1];\n        result[module_1] = entry.messages;\n    }\n    return result;\n}\nfunction createNLSBundle(header, metaDataPath) {\n    var languagePackLocation = options.translationsConfig[header.id];\n    if (!languagePackLocation) {\n        return undefined;\n    }\n    var languagePack = readJsonFileSync(languagePackLocation).contents;\n    var metaData = readJsonFileSync(path.join(metaDataPath, 'nls.metadata.json'));\n    var result = Object.create(null);\n    for (var module_2 in metaData) {\n        var entry = metaData[module_2];\n        var translations = languagePack[header.outDir + \"/\" + module_2];\n        if (translations) {\n            var resultMessages = [];\n            for (var i = 0; i < entry.keys.length; i++) {\n                var messageKey = entry.keys[i];\n                var key = isString(messageKey) ? messageKey : messageKey.key;\n                var translatedMessage = translations[key];\n                if (translatedMessage === undefined) {\n                    translatedMessage = entry.messages[i];\n                }\n                resultMessages.push(translatedMessage);\n            }\n            result[module_2] = resultMessages;\n        }\n        else {\n            result[module_2] = entry.messages;\n        }\n    }\n    return result;\n}\nfunction touch(file) {\n    var d = new Date();\n    fs.utimes(file, d, d, function () {\n        // Do nothing. Ignore\n    });\n}\nfunction cacheBundle(key, bundle) {\n    resolvedBundles[key] = bundle;\n    return bundle;\n}\nfunction loadNlsBundleOrCreateFromI18n(header, bundlePath) {\n    var result;\n    var bundle = path.join(options.cacheRoot, header.id + \"-\" + header.hash + \".json\");\n    var useMemoryOnly = false;\n    var writeBundle = false;\n    try {\n        result = JSON.parse(fs.readFileSync(bundle, { encoding: 'utf8', flag: 'r' }));\n        touch(bundle);\n        return result;\n    }\n    catch (err) {\n        if (err.code === 'ENOENT') {\n            writeBundle = true;\n        }\n        else if (err instanceof SyntaxError) {\n            // We have a syntax error. So no valid JSON. Use\n            console.log(\"Syntax error parsing message bundle: \" + err.message + \".\");\n            fs.unlink(bundle, function (err) {\n                if (err) {\n                    console.error(\"Deleting corrupted bundle \" + bundle + \" failed.\");\n                }\n            });\n            useMemoryOnly = true;\n        }\n        else {\n            throw err;\n        }\n    }\n    result = createNLSBundle(header, bundlePath);\n    if (!result || useMemoryOnly) {\n        return result;\n    }\n    if (writeBundle) {\n        try {\n            fs.writeFileSync(bundle, JSON.stringify(result), { encoding: 'utf8', flag: 'wx' });\n        }\n        catch (err) {\n            if (err.code === 'EEXIST') {\n                return result;\n            }\n            throw err;\n        }\n    }\n    return result;\n}\nfunction loadDefaultNlsBundle(bundlePath) {\n    try {\n        return createDefaultNlsBundle(bundlePath);\n    }\n    catch (err) {\n        console.log(\"Generating default bundle from meta data failed.\", err);\n        return undefined;\n    }\n}\nfunction loadNlsBundle(header, bundlePath) {\n    var result;\n    // Core decided to use a language pack. Do the same in the extension\n    if (supportsLanguagePack()) {\n        try {\n            result = loadNlsBundleOrCreateFromI18n(header, bundlePath);\n        }\n        catch (err) {\n            console.log(\"Load or create bundle failed \", err);\n        }\n    }\n    if (!result) {\n        // No language pack found, but core is running in language pack mode\n        // Don't try to use old in the box bundles since the might be stale\n        // Fall right back to the default bundle.\n        if (options.languagePackSupport) {\n            return loadDefaultNlsBundle(bundlePath);\n        }\n        var candidate = findInTheBoxBundle(bundlePath);\n        if (candidate) {\n            try {\n                return readJsonFileSync(candidate);\n            }\n            catch (err) {\n                console.log(\"Loading in the box message bundle failed.\", err);\n            }\n        }\n        result = loadDefaultNlsBundle(bundlePath);\n    }\n    return result;\n}\nfunction tryFindMetaDataHeaderFile(file) {\n    var result;\n    var dirname = path.dirname(file);\n    while (true) {\n        result = path.join(dirname, 'nls.metadata.header.json');\n        if (fs.existsSync(result)) {\n            break;\n        }\n        var parent = path.dirname(dirname);\n        if (parent === dirname) {\n            result = undefined;\n            break;\n        }\n        else {\n            dirname = parent;\n        }\n    }\n    return result;\n}\nfunction loadMessageBundle(file) {\n    if (!file) {\n        // No file. We are in dev mode. Return the default\n        // localize function.\n        return common_1.localize;\n    }\n    // Remove extension since we load json files.\n    var ext = path.extname(file);\n    if (ext) {\n        file = file.substr(0, file.length - ext.length);\n    }\n    if (options.messageFormat === common_1.MessageFormat.both || options.messageFormat === common_1.MessageFormat.bundle) {\n        var headerFile = tryFindMetaDataHeaderFile(file);\n        if (headerFile) {\n            var bundlePath = path.dirname(headerFile);\n            var bundle = resolvedBundles[bundlePath];\n            if (bundle === undefined) {\n                try {\n                    var header = JSON.parse(fs.readFileSync(headerFile, 'utf8'));\n                    try {\n                        var nlsBundle = loadNlsBundle(header, bundlePath);\n                        bundle = cacheBundle(bundlePath, nlsBundle ? { header: header, nlsBundle: nlsBundle } : null);\n                    }\n                    catch (err) {\n                        console.error('Failed to load nls bundle', err);\n                        bundle = cacheBundle(bundlePath, null);\n                    }\n                }\n                catch (err) {\n                    console.error('Failed to read header file', err);\n                    bundle = cacheBundle(bundlePath, null);\n                }\n            }\n            if (bundle) {\n                var module_3 = file.substr(bundlePath.length + 1).replace(/\\\\/g, '/');\n                var messages = bundle.nlsBundle[module_3];\n                if (messages === undefined) {\n                    console.error(\"Messages for file \" + file + \" not found. See console for details.\");\n                    return function () {\n                        return 'Messages not found.';\n                    };\n                }\n                return createScopedLocalizeFunction(messages);\n            }\n        }\n    }\n    if (options.messageFormat === common_1.MessageFormat.both || options.messageFormat === common_1.MessageFormat.file) {\n        // Try to load a single file bundle\n        try {\n            var json = readJsonFileSync(resolveLanguage(file));\n            if (Array.isArray(json)) {\n                return createScopedLocalizeFunction(json);\n            }\n            else {\n                if (common_1.isDefined(json.messages) && common_1.isDefined(json.keys)) {\n                    return createScopedLocalizeFunction(json.messages);\n                }\n                else {\n                    console.error(\"String bundle '\" + file + \"' uses an unsupported format.\");\n                    return function () {\n                        return 'File bundle has unsupported format. See console for details';\n                    };\n                }\n            }\n        }\n        catch (err) {\n            if (err.code !== 'ENOENT') {\n                console.error('Failed to load single file bundle', err);\n            }\n        }\n    }\n    console.error(\"Failed to load message bundle for file \" + file);\n    return function () {\n        return 'Failed to load message bundle. See console for details.';\n    };\n}\nexports.loadMessageBundle = loadMessageBundle;\nfunction config(opts) {\n    if (opts) {\n        if (isString(opts.locale)) {\n            options.locale = opts.locale.toLowerCase();\n            options.language = options.locale;\n            resolvedBundles = Object.create(null);\n        }\n        if (opts.messageFormat !== undefined) {\n            options.messageFormat = opts.messageFormat;\n        }\n        if (opts.bundleFormat === common_1.BundleFormat.standalone && options.languagePackSupport === true) {\n            options.languagePackSupport = false;\n        }\n    }\n    common_1.setPseudo(options.locale === 'pseudo');\n    return loadMessageBundle;\n}\nexports.config = config;\nral_1.default.install(Object.freeze({\n    loadMessageBundle: loadMessageBundle,\n    config: config\n}));\n//# sourceMappingURL=main.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport * as interfaces from './interfaces';\nimport { loadMessageBundle } from 'vscode-nls';\nconst localize = loadMessageBundle();\n\nexport default class MergeConflictCodeLensProvider implements vscode.CodeLensProvider, vscode.Disposable {\n\tprivate codeLensRegistrationHandle?: vscode.Disposable | null;\n\tprivate config?: interfaces.IExtensionConfiguration;\n\tprivate tracker: interfaces.IDocumentMergeConflictTracker;\n\n\tconstructor(trackerService: interfaces.IDocumentMergeConflictTrackerService) {\n\t\tthis.tracker = trackerService.createTracker('codelens');\n\t}\n\n\tbegin(config: interfaces.IExtensionConfiguration) {\n\t\tthis.config = config;\n\n\t\tif (this.config.enableCodeLens) {\n\t\t\tthis.registerCodeLensProvider();\n\t\t}\n\t}\n\n\tconfigurationUpdated(updatedConfig: interfaces.IExtensionConfiguration) {\n\n\t\tif (updatedConfig.enableCodeLens === false && this.codeLensRegistrationHandle) {\n\t\t\tthis.codeLensRegistrationHandle.dispose();\n\t\t\tthis.codeLensRegistrationHandle = null;\n\t\t}\n\t\telse if (updatedConfig.enableCodeLens === true && !this.codeLensRegistrationHandle) {\n\t\t\tthis.registerCodeLensProvider();\n\t\t}\n\n\t\tthis.config = updatedConfig;\n\t}\n\n\n\tdispose() {\n\t\tif (this.codeLensRegistrationHandle) {\n\t\t\tthis.codeLensRegistrationHandle.dispose();\n\t\t\tthis.codeLensRegistrationHandle = null;\n\t\t}\n\t}\n\n\tasync provideCodeLenses(document: vscode.TextDocument, _token: vscode.CancellationToken): Promise<vscode.CodeLens[] | null> {\n\n\t\tif (!this.config || !this.config.enableCodeLens) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet conflicts = await this.tracker.getConflicts(document);\n\t\tconst conflictsCount = conflicts?.length ?? 0;\n\t\tvscode.commands.executeCommand('setContext', 'mergeConflictsCount', conflictsCount);\n\n\t\tif (!conflictsCount) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet items: vscode.CodeLens[] = [];\n\n\t\tconflicts.forEach(conflict => {\n\t\t\tlet acceptCurrentCommand: vscode.Command = {\n\t\t\t\tcommand: 'merge-conflict.accept.current',\n\t\t\t\ttitle: localize('acceptCurrentChange', 'Accept Current Change'),\n\t\t\t\targuments: ['known-conflict', conflict]\n\t\t\t};\n\n\t\t\tlet acceptIncomingCommand: vscode.Command = {\n\t\t\t\tcommand: 'merge-conflict.accept.incoming',\n\t\t\t\ttitle: localize('acceptIncomingChange', 'Accept Incoming Change'),\n\t\t\t\targuments: ['known-conflict', conflict]\n\t\t\t};\n\n\t\t\tlet acceptBothCommand: vscode.Command = {\n\t\t\t\tcommand: 'merge-conflict.accept.both',\n\t\t\t\ttitle: localize('acceptBothChanges', 'Accept Both Changes'),\n\t\t\t\targuments: ['known-conflict', conflict]\n\t\t\t};\n\n\t\t\tlet diffCommand: vscode.Command = {\n\t\t\t\tcommand: 'merge-conflict.compare',\n\t\t\t\ttitle: localize('compareChanges', 'Compare Changes'),\n\t\t\t\targuments: [conflict]\n\t\t\t};\n\n\t\t\titems.push(\n\t\t\t\tnew vscode.CodeLens(conflict.range, acceptCurrentCommand),\n\t\t\t\tnew vscode.CodeLens(conflict.range.with(conflict.range.start.with({ character: conflict.range.start.character + 1 })), acceptIncomingCommand),\n\t\t\t\tnew vscode.CodeLens(conflict.range.with(conflict.range.start.with({ character: conflict.range.start.character + 2 })), acceptBothCommand),\n\t\t\t\tnew vscode.CodeLens(conflict.range.with(conflict.range.start.with({ character: conflict.range.start.character + 3 })), diffCommand)\n\t\t\t);\n\t\t});\n\n\t\treturn items;\n\t}\n\n\tprivate registerCodeLensProvider() {\n\t\tthis.codeLensRegistrationHandle = vscode.languages.registerCodeLensProvider([\n\t\t\t{ scheme: 'file' },\n\t\t\t{ scheme: 'vscode-vfs' },\n\t\t\t{ scheme: 'untitled' },\n\t\t\t{ scheme: 'vscode-userdata' },\n\t\t], this);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as vscode from 'vscode';\nimport * as interfaces from './interfaces';\nimport ContentProvider from './contentProvider';\nimport { loadMessageBundle } from 'vscode-nls';\nconst localize = loadMessageBundle();\n\ninterface IDocumentMergeConflictNavigationResults {\n\tcanNavigate: boolean;\n\tconflict?: interfaces.IDocumentMergeConflict;\n}\n\nenum NavigationDirection {\n\tForwards,\n\tBackwards\n}\n\nexport default class CommandHandler implements vscode.Disposable {\n\n\tprivate disposables: vscode.Disposable[] = [];\n\tprivate tracker: interfaces.IDocumentMergeConflictTracker;\n\n\tconstructor(trackerService: interfaces.IDocumentMergeConflictTrackerService) {\n\t\tthis.tracker = trackerService.createTracker('commands');\n\t}\n\n\tbegin() {\n\t\tthis.disposables.push(\n\t\t\tthis.registerTextEditorCommand('merge-conflict.accept.current', this.acceptCurrent),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.accept.incoming', this.acceptIncoming),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.accept.selection', this.acceptSelection),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.accept.both', this.acceptBoth),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.accept.all-current', this.acceptAllCurrent, this.acceptAllCurrentResources),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.accept.all-incoming', this.acceptAllIncoming, this.acceptAllIncomingResources),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.accept.all-both', this.acceptAllBoth),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.next', this.navigateNext),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.previous', this.navigatePrevious),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.compare', this.compare)\n\t\t);\n\t}\n\n\tprivate registerTextEditorCommand(command: string, cb: (editor: vscode.TextEditor, ...args: any[]) => Promise<void>, resourceCB?: (uris: vscode.Uri[]) => Promise<void>) {\n\t\treturn vscode.commands.registerCommand(command, (...args) => {\n\t\t\tif (resourceCB && args.length && args.every(arg => arg && arg.resourceUri)) {\n\t\t\t\treturn resourceCB.call(this, args.map(arg => arg.resourceUri));\n\t\t\t}\n\t\t\tconst editor = vscode.window.activeTextEditor;\n\t\t\treturn editor && cb.call(this, editor, ...args);\n\t\t});\n\t}\n\n\tacceptCurrent(editor: vscode.TextEditor, ...args: any[]): Promise<void> {\n\t\treturn this.accept(interfaces.CommitType.Current, editor, ...args);\n\t}\n\n\tacceptIncoming(editor: vscode.TextEditor, ...args: any[]): Promise<void> {\n\t\treturn this.accept(interfaces.CommitType.Incoming, editor, ...args);\n\t}\n\n\tacceptBoth(editor: vscode.TextEditor, ...args: any[]): Promise<void> {\n\t\treturn this.accept(interfaces.CommitType.Both, editor, ...args);\n\t}\n\n\tacceptAllCurrent(editor: vscode.TextEditor): Promise<void> {\n\t\treturn this.acceptAll(interfaces.CommitType.Current, editor);\n\t}\n\n\tacceptAllIncoming(editor: vscode.TextEditor): Promise<void> {\n\t\treturn this.acceptAll(interfaces.CommitType.Incoming, editor);\n\t}\n\n\tacceptAllCurrentResources(resources: vscode.Uri[]): Promise<void> {\n\t\treturn this.acceptAllResources(interfaces.CommitType.Current, resources);\n\t}\n\n\tacceptAllIncomingResources(resources: vscode.Uri[]): Promise<void> {\n\t\treturn this.acceptAllResources(interfaces.CommitType.Incoming, resources);\n\t}\n\n\tacceptAllBoth(editor: vscode.TextEditor): Promise<void> {\n\t\treturn this.acceptAll(interfaces.CommitType.Both, editor);\n\t}\n\n\tasync compare(editor: vscode.TextEditor, conflict: interfaces.IDocumentMergeConflict | null) {\n\n\t\t// No conflict, command executed from command palette\n\t\tif (!conflict) {\n\t\t\tconflict = await this.findConflictContainingSelection(editor);\n\n\t\t\t// Still failed to find conflict, warn the user and exit\n\t\t\tif (!conflict) {\n\t\t\t\tvscode.window.showWarningMessage(localize('cursorNotInConflict', 'Editor cursor is not within a merge conflict'));\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst conflicts = await this.tracker.getConflicts(editor.document);\n\n\t\t// Still failed to find conflict, warn the user and exit\n\t\tif (!conflicts) {\n\t\t\tvscode.window.showWarningMessage(localize('cursorNotInConflict', 'Editor cursor is not within a merge conflict'));\n\t\t\treturn;\n\t\t}\n\n\t\tconst scheme = editor.document.uri.scheme;\n\t\tlet range = conflict.current.content;\n\t\tlet leftRanges = conflicts.map(conflict => [conflict.current.content, conflict.range]);\n\t\tlet rightRanges = conflicts.map(conflict => [conflict.incoming.content, conflict.range]);\n\n\t\tconst leftUri = editor.document.uri.with({\n\t\t\tscheme: ContentProvider.scheme,\n\t\t\tquery: JSON.stringify({ scheme, range: range, ranges: leftRanges })\n\t\t});\n\n\n\t\trange = conflict.incoming.content;\n\t\tconst rightUri = leftUri.with({ query: JSON.stringify({ scheme, ranges: rightRanges }) });\n\n\t\tlet mergeConflictLineOffsets = 0;\n\t\tfor (let nextconflict of conflicts) {\n\t\t\tif (nextconflict.range.isEqual(conflict.range)) {\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tmergeConflictLineOffsets += (nextconflict.range.end.line - nextconflict.range.start.line) - (nextconflict.incoming.content.end.line - nextconflict.incoming.content.start.line);\n\t\t\t}\n\t\t}\n\t\tconst selection = new vscode.Range(\n\t\t\tconflict.range.start.line - mergeConflictLineOffsets, conflict.range.start.character,\n\t\t\tconflict.range.start.line - mergeConflictLineOffsets, conflict.range.start.character\n\t\t);\n\n\t\tconst docPath = editor.document.uri.path;\n\t\tconst fileName = docPath.substring(docPath.lastIndexOf('/') + 1); // avoid NodeJS path to keep browser webpack small\n\t\tconst title = localize('compareChangesTitle', '{0}: Current Changes ⟷ Incoming Changes', fileName);\n\t\tconst mergeConflictConfig = vscode.workspace.getConfiguration('merge-conflict');\n\t\tconst openToTheSide = mergeConflictConfig.get<string>('diffViewPosition');\n\t\tconst opts: vscode.TextDocumentShowOptions = {\n\t\t\tviewColumn: openToTheSide === 'Beside' ? vscode.ViewColumn.Beside : vscode.ViewColumn.Active,\n\t\t\tselection\n\t\t};\n\n\t\tif (openToTheSide === 'Below') {\n\t\t\tawait vscode.commands.executeCommand('workbench.action.newGroupBelow');\n\t\t}\n\n\t\tawait vscode.commands.executeCommand('vscode.diff', leftUri, rightUri, title, opts);\n\t}\n\n\tnavigateNext(editor: vscode.TextEditor): Promise<void> {\n\t\treturn this.navigate(editor, NavigationDirection.Forwards);\n\t}\n\n\tnavigatePrevious(editor: vscode.TextEditor): Promise<void> {\n\t\treturn this.navigate(editor, NavigationDirection.Backwards);\n\t}\n\n\tasync acceptSelection(editor: vscode.TextEditor): Promise<void> {\n\t\tlet conflict = await this.findConflictContainingSelection(editor);\n\n\t\tif (!conflict) {\n\t\t\tvscode.window.showWarningMessage(localize('cursorNotInConflict', 'Editor cursor is not within a merge conflict'));\n\t\t\treturn;\n\t\t}\n\n\t\tlet typeToAccept: interfaces.CommitType;\n\t\tlet tokenAfterCurrentBlock: vscode.Range = conflict.splitter;\n\n\t\tif (conflict.commonAncestors.length > 0) {\n\t\t\ttokenAfterCurrentBlock = conflict.commonAncestors[0].header;\n\t\t}\n\n\t\t// Figure out if the cursor is in current or incoming, we do this by seeing if\n\t\t// the active position is before or after the range of the splitter or common\n\t\t// ancestors marker. We can use this trick as the previous check in\n\t\t// findConflictByActiveSelection will ensure it's within the conflict range, so\n\t\t// we don't falsely identify \"current\" or \"incoming\" if outside of a conflict range.\n\t\tif (editor.selection.active.isBefore(tokenAfterCurrentBlock.start)) {\n\t\t\ttypeToAccept = interfaces.CommitType.Current;\n\t\t}\n\t\telse if (editor.selection.active.isAfter(conflict.splitter.end)) {\n\t\t\ttypeToAccept = interfaces.CommitType.Incoming;\n\t\t}\n\t\telse if (editor.selection.active.isBefore(conflict.splitter.start)) {\n\t\t\tvscode.window.showWarningMessage(localize('cursorOnCommonAncestorsRange', 'Editor cursor is within the common ancestors block, please move it to either the \"current\" or \"incoming\" block'));\n\t\t\treturn;\n\t\t}\n\t\telse {\n\t\t\tvscode.window.showWarningMessage(localize('cursorOnSplitterRange', 'Editor cursor is within the merge conflict splitter, please move it to either the \"current\" or \"incoming\" block'));\n\t\t\treturn;\n\t\t}\n\n\t\tthis.tracker.forget(editor.document);\n\t\tconflict.commitEdit(typeToAccept, editor);\n\t}\n\n\tdispose() {\n\t\tthis.disposables.forEach(disposable => disposable.dispose());\n\t\tthis.disposables = [];\n\t}\n\n\tprivate async navigate(editor: vscode.TextEditor, direction: NavigationDirection): Promise<void> {\n\t\tlet navigationResult = await this.findConflictForNavigation(editor, direction);\n\n\t\tif (!navigationResult) {\n\t\t\t// Check for autoNavigateNextConflict, if it's enabled(which indicating no conflict remain), then do not show warning\n\t\t\tconst mergeConflictConfig = vscode.workspace.getConfiguration('merge-conflict');\n\t\t\tif (mergeConflictConfig.get<boolean>('autoNavigateNextConflict.enabled')) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvscode.window.showWarningMessage(localize('noConflicts', 'No merge conflicts found in this file'));\n\t\t\treturn;\n\t\t}\n\t\telse if (!navigationResult.canNavigate) {\n\t\t\tvscode.window.showWarningMessage(localize('noOtherConflictsInThisFile', 'No other merge conflicts within this file'));\n\t\t\treturn;\n\t\t}\n\t\telse if (!navigationResult.conflict) {\n\t\t\t// TODO: Show error message?\n\t\t\treturn;\n\t\t}\n\n\t\t// Move the selection to the first line of the conflict\n\t\teditor.selection = new vscode.Selection(navigationResult.conflict.range.start, navigationResult.conflict.range.start);\n\t\teditor.revealRange(navigationResult.conflict.range, vscode.TextEditorRevealType.Default);\n\t}\n\n\tprivate async accept(type: interfaces.CommitType, editor: vscode.TextEditor, ...args: any[]): Promise<void> {\n\n\t\tlet conflict: interfaces.IDocumentMergeConflict | null;\n\n\t\t// If launched with known context, take the conflict from that\n\t\tif (args[0] === 'known-conflict') {\n\t\t\tconflict = args[1];\n\t\t}\n\t\telse {\n\t\t\t// Attempt to find a conflict that matches the current cursor position\n\t\t\tconflict = await this.findConflictContainingSelection(editor);\n\t\t}\n\n\t\tif (!conflict) {\n\t\t\tvscode.window.showWarningMessage(localize('cursorNotInConflict', 'Editor cursor is not within a merge conflict'));\n\t\t\treturn;\n\t\t}\n\n\t\t// Tracker can forget as we know we are going to do an edit\n\t\tthis.tracker.forget(editor.document);\n\t\tconflict.commitEdit(type, editor);\n\n\t\t// navigate to the next merge conflict\n\t\tconst mergeConflictConfig = vscode.workspace.getConfiguration('merge-conflict');\n\t\tif (mergeConflictConfig.get<boolean>('autoNavigateNextConflict.enabled')) {\n\t\t\tthis.navigateNext(editor);\n\t\t}\n\n\t}\n\n\tprivate async acceptAll(type: interfaces.CommitType, editor: vscode.TextEditor): Promise<void> {\n\t\tlet conflicts = await this.tracker.getConflicts(editor.document);\n\n\t\tif (!conflicts || conflicts.length === 0) {\n\t\t\tvscode.window.showWarningMessage(localize('noConflicts', 'No merge conflicts found in this file'));\n\t\t\treturn;\n\t\t}\n\n\t\t// For get the current state of the document, as we know we are doing to do a large edit\n\t\tthis.tracker.forget(editor.document);\n\n\t\t// Apply all changes as one edit\n\t\tawait editor.edit((edit) => conflicts.forEach(conflict => {\n\t\t\tconflict.applyEdit(type, editor.document, edit);\n\t\t}));\n\t}\n\n\tprivate async acceptAllResources(type: interfaces.CommitType, resources: vscode.Uri[]): Promise<void> {\n\t\tconst documents = await Promise.all(resources.map(resource => vscode.workspace.openTextDocument(resource)));\n\t\tconst edit = new vscode.WorkspaceEdit();\n\t\tfor (const document of documents) {\n\t\t\tconst conflicts = await this.tracker.getConflicts(document);\n\n\t\t\tif (!conflicts || conflicts.length === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// For get the current state of the document, as we know we are doing to do a large edit\n\t\t\tthis.tracker.forget(document);\n\n\t\t\t// Apply all changes as one edit\n\t\t\tconflicts.forEach(conflict => {\n\t\t\t\tconflict.applyEdit(type, document, { replace: (range, newText) => edit.replace(document.uri, range, newText) });\n\t\t\t});\n\t\t}\n\t\tvscode.workspace.applyEdit(edit);\n\t}\n\n\tprivate async findConflictContainingSelection(editor: vscode.TextEditor, conflicts?: interfaces.IDocumentMergeConflict[]): Promise<interfaces.IDocumentMergeConflict | null> {\n\n\t\tif (!conflicts) {\n\t\t\tconflicts = await this.tracker.getConflicts(editor.document);\n\t\t}\n\n\t\tif (!conflicts || conflicts.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tfor (const conflict of conflicts) {\n\t\t\tif (conflict.range.contains(editor.selection.active)) {\n\t\t\t\treturn conflict;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate async findConflictForNavigation(editor: vscode.TextEditor, direction: NavigationDirection, conflicts?: interfaces.IDocumentMergeConflict[]): Promise<IDocumentMergeConflictNavigationResults | null> {\n\t\tif (!conflicts) {\n\t\t\tconflicts = await this.tracker.getConflicts(editor.document);\n\t\t}\n\n\t\tif (!conflicts || conflicts.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet selection = editor.selection.active;\n\t\tif (conflicts.length === 1) {\n\t\t\tif (conflicts[0].range.contains(selection)) {\n\t\t\t\treturn {\n\t\t\t\t\tcanNavigate: false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tcanNavigate: true,\n\t\t\t\tconflict: conflicts[0]\n\t\t\t};\n\t\t}\n\n\t\tlet predicate: (_conflict: any) => boolean;\n\t\tlet fallback: () => interfaces.IDocumentMergeConflict;\n\t\tlet scanOrder: interfaces.IDocumentMergeConflict[];\n\n\t\tif (direction === NavigationDirection.Forwards) {\n\t\t\tpredicate = (conflict) => selection.isBefore(conflict.range.start);\n\t\t\tfallback = () => conflicts![0];\n\t\t\tscanOrder = conflicts;\n\t\t} else if (direction === NavigationDirection.Backwards) {\n\t\t\tpredicate = (conflict) => selection.isAfter(conflict.range.start);\n\t\t\tfallback = () => conflicts![conflicts!.length - 1];\n\t\t\tscanOrder = conflicts.slice().reverse();\n\t\t} else {\n\t\t\tthrow new Error(`Unsupported direction ${direction}`);\n\t\t}\n\n\t\tfor (const conflict of scanOrder) {\n\t\t\tif (predicate(conflict) && !conflict.range.contains(selection)) {\n\t\t\t\treturn {\n\t\t\t\t\tcanNavigate: true,\n\t\t\t\t\tconflict: conflict\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// Went all the way to the end, return the head\n\t\treturn {\n\t\t\tcanNavigate: true,\n\t\t\tconflict: fallback()\n\t\t};\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\n\nexport default class MergeConflictContentProvider implements vscode.TextDocumentContentProvider, vscode.Disposable {\n\n\tstatic scheme = 'merge-conflict.conflict-diff';\n\n\tconstructor(private context: vscode.ExtensionContext) {\n\t}\n\n\tbegin() {\n\t\tthis.context.subscriptions.push(\n\t\t\tvscode.workspace.registerTextDocumentContentProvider(MergeConflictContentProvider.scheme, this)\n\t\t);\n\t}\n\n\tdispose() {\n\t}\n\n\tasync provideTextDocumentContent(uri: vscode.Uri): Promise<string | null> {\n\t\ttry {\n\t\t\tconst { scheme, ranges } = JSON.parse(uri.query) as { scheme: string; ranges: [{ line: number; character: number }[], { line: number; character: number }[]][] };\n\n\t\t\t// complete diff\n\t\t\tconst document = await vscode.workspace.openTextDocument(uri.with({ scheme, query: '' }));\n\n\t\t\tlet text = '';\n\t\t\tlet lastPosition = new vscode.Position(0, 0);\n\n\t\t\tranges.forEach(rangeObj => {\n\t\t\t\tlet [conflictRange, fullRange] = rangeObj;\n\t\t\t\tconst [start, end] = conflictRange;\n\t\t\t\tconst [fullStart, fullEnd] = fullRange;\n\n\t\t\t\ttext += document.getText(new vscode.Range(lastPosition.line, lastPosition.character, fullStart.line, fullStart.character));\n\t\t\t\ttext += document.getText(new vscode.Range(start.line, start.character, end.line, end.character));\n\t\t\t\tlastPosition = new vscode.Position(fullEnd.line, fullEnd.character);\n\t\t\t});\n\n\t\t\tlet documentEnd = document.lineAt(document.lineCount - 1).range.end;\n\t\t\ttext += document.getText(new vscode.Range(lastPosition.line, lastPosition.character, documentEnd.line, documentEnd.character));\n\n\t\t\treturn text;\n\t\t}\n\t\tcatch (ex) {\n\t\t\tawait vscode.window.showErrorMessage('Unable to show comparison');\n\t\t\treturn null;\n\t\t}\n\t}\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport interface ITask<T> {\n\t(): T;\n}\n\nexport class Delayer<T> {\n\n\tpublic defaultDelay: number;\n\tprivate timeout: any; // Timer\n\tprivate completionPromise: Promise<T> | null;\n\tprivate onSuccess: ((value: T | PromiseLike<T> | undefined) => void) | null;\n\tprivate task: ITask<T> | null;\n\n\tconstructor(defaultDelay: number) {\n\t\tthis.defaultDelay = defaultDelay;\n\t\tthis.timeout = null;\n\t\tthis.completionPromise = null;\n\t\tthis.onSuccess = null;\n\t\tthis.task = null;\n\t}\n\n\tpublic trigger(task: ITask<T>, delay: number = this.defaultDelay): Promise<T> {\n\t\tthis.task = task;\n\t\tif (delay >= 0) {\n\t\t\tthis.cancelTimeout();\n\t\t}\n\n\t\tif (!this.completionPromise) {\n\t\t\tthis.completionPromise = new Promise<T | undefined>((resolve) => {\n\t\t\t\tthis.onSuccess = resolve;\n\t\t\t}).then(() => {\n\t\t\t\tthis.completionPromise = null;\n\t\t\t\tthis.onSuccess = null;\n\t\t\t\tlet result = this.task!();\n\t\t\t\tthis.task = null;\n\t\t\t\treturn result;\n\t\t\t});\n\t\t}\n\n\t\tif (delay >= 0 || this.timeout === null) {\n\t\t\tthis.timeout = setTimeout(() => {\n\t\t\t\tthis.timeout = null;\n\t\t\t\tthis.onSuccess!(undefined);\n\t\t\t}, delay >= 0 ? delay : this.defaultDelay);\n\t\t}\n\n\t\treturn this.completionPromise;\n\t}\n\n\tpublic forceDelivery(): Promise<T> | null {\n\t\tif (!this.completionPromise) {\n\t\t\treturn null;\n\t\t}\n\t\tthis.cancelTimeout();\n\t\tlet result = this.completionPromise;\n\t\tthis.onSuccess!(undefined);\n\t\treturn result;\n\t}\n\n\tpublic isTriggered(): boolean {\n\t\treturn this.timeout !== null;\n\t}\n\n\tpublic cancel(): void {\n\t\tthis.cancelTimeout();\n\t\tthis.completionPromise = null;\n\t}\n\n\tprivate cancelTimeout(): void {\n\t\tif (this.timeout !== null) {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.timeout = null;\n\t\t}\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as interfaces from './interfaces';\nimport * as vscode from 'vscode';\n\nexport class DocumentMergeConflict implements interfaces.IDocumentMergeConflict {\n\n\tpublic range: vscode.Range;\n\tpublic current: interfaces.IMergeRegion;\n\tpublic incoming: interfaces.IMergeRegion;\n\tpublic commonAncestors: interfaces.IMergeRegion[];\n\tpublic splitter: vscode.Range;\n\n\tconstructor(descriptor: interfaces.IDocumentMergeConflictDescriptor) {\n\t\tthis.range = descriptor.range;\n\t\tthis.current = descriptor.current;\n\t\tthis.incoming = descriptor.incoming;\n\t\tthis.commonAncestors = descriptor.commonAncestors;\n\t\tthis.splitter = descriptor.splitter;\n\t}\n\n\tpublic commitEdit(type: interfaces.CommitType, editor: vscode.TextEditor, edit?: vscode.TextEditorEdit): Thenable<boolean> {\n\n\t\tif (edit) {\n\n\t\t\tthis.applyEdit(type, editor.document, edit);\n\t\t\treturn Promise.resolve(true);\n\t\t}\n\n\t\treturn editor.edit((edit) => this.applyEdit(type, editor.document, edit));\n\t}\n\n\tpublic applyEdit(type: interfaces.CommitType, document: vscode.TextDocument, edit: { replace(range: vscode.Range, newText: string): void }): void {\n\n\t\t// Each conflict is a set of ranges as follows, note placements or newlines\n\t\t// which may not in spans\n\t\t// [ Conflict Range             -- (Entire content below)\n\t\t//   [ Current Header ]\\n       -- >>>>> Header\n\t\t//   [ Current Content ]        -- (content)\n\t\t//   [ Splitter ]\\n             -- =====\n\t\t//   [ Incoming Content ]       -- (content)\n\t\t//   [ Incoming Header ]\\n      -- <<<<< Incoming\n\t\t// ]\n\t\tif (type === interfaces.CommitType.Current) {\n\t\t\t// Replace [ Conflict Range ] with [ Current Content ]\n\t\t\tlet content = document.getText(this.current.content);\n\t\t\tthis.replaceRangeWithContent(content, edit);\n\t\t}\n\t\telse if (type === interfaces.CommitType.Incoming) {\n\t\t\tlet content = document.getText(this.incoming.content);\n\t\t\tthis.replaceRangeWithContent(content, edit);\n\t\t}\n\t\telse if (type === interfaces.CommitType.Both) {\n\t\t\t// Replace [ Conflict Range ] with [ Current Content ] + \\n + [ Incoming Content ]\n\n\t\t\tconst currentContent = document.getText(this.current.content);\n\t\t\tconst incomingContent = document.getText(this.incoming.content);\n\n\t\t\tedit.replace(this.range, currentContent.concat(incomingContent));\n\t\t}\n\t}\n\n\tprivate replaceRangeWithContent(content: string, edit: { replace(range: vscode.Range, newText: string): void }) {\n\t\tif (this.isNewlineOnly(content)) {\n\t\t\tedit.replace(this.range, '');\n\t\t\treturn;\n\t\t}\n\n\t\t// Replace [ Conflict Range ] with [ Current Content ]\n\t\tedit.replace(this.range, content);\n\t}\n\n\tprivate isNewlineOnly(text: string) {\n\t\treturn text === '\\n' || text === '\\r\\n';\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport { MergeConflictParser } from './mergeConflictParser';\nimport * as interfaces from './interfaces';\nimport { Delayer } from './delayer';\n\nclass ScanTask {\n\tpublic origins: Set<string> = new Set<string>();\n\tpublic delayTask: Delayer<interfaces.IDocumentMergeConflict[]>;\n\n\tconstructor(delayTime: number, initialOrigin: string) {\n\t\tthis.origins.add(initialOrigin);\n\t\tthis.delayTask = new Delayer<interfaces.IDocumentMergeConflict[]>(delayTime);\n\t}\n\n\tpublic addOrigin(name: string): void {\n\t\tthis.origins.add(name);\n\t}\n\n\tpublic hasOrigin(name: string): boolean {\n\t\treturn this.origins.has(name);\n\t}\n}\n\nclass OriginDocumentMergeConflictTracker implements interfaces.IDocumentMergeConflictTracker {\n\tconstructor(private parent: DocumentMergeConflictTracker, private origin: string) {\n\t}\n\n\tgetConflicts(document: vscode.TextDocument): PromiseLike<interfaces.IDocumentMergeConflict[]> {\n\t\treturn this.parent.getConflicts(document, this.origin);\n\t}\n\n\tisPending(document: vscode.TextDocument): boolean {\n\t\treturn this.parent.isPending(document, this.origin);\n\t}\n\n\tforget(document: vscode.TextDocument) {\n\t\tthis.parent.forget(document);\n\t}\n}\n\nexport default class DocumentMergeConflictTracker implements vscode.Disposable, interfaces.IDocumentMergeConflictTrackerService {\n\tprivate cache: Map<string, ScanTask> = new Map();\n\tprivate delayExpireTime: number = 0;\n\n\tgetConflicts(document: vscode.TextDocument, origin: string): PromiseLike<interfaces.IDocumentMergeConflict[]> {\n\t\t// Attempt from cache\n\n\t\tlet key = this.getCacheKey(document);\n\n\t\tif (!key) {\n\t\t\t// Document doesn't have a uri, can't cache it, so return\n\t\t\treturn Promise.resolve(this.getConflictsOrEmpty(document, [origin]));\n\t\t}\n\n\t\tlet cacheItem = this.cache.get(key);\n\t\tif (!cacheItem) {\n\t\t\tcacheItem = new ScanTask(this.delayExpireTime, origin);\n\t\t\tthis.cache.set(key, cacheItem);\n\t\t}\n\t\telse {\n\t\t\tcacheItem.addOrigin(origin);\n\t\t}\n\n\t\treturn cacheItem.delayTask.trigger(() => {\n\t\t\tlet conflicts = this.getConflictsOrEmpty(document, Array.from(cacheItem!.origins));\n\n\t\t\tif (this.cache) {\n\t\t\t\tthis.cache.delete(key!);\n\t\t\t}\n\n\t\t\treturn conflicts;\n\t\t});\n\t}\n\n\tisPending(document: vscode.TextDocument, origin: string): boolean {\n\t\tif (!document) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet key = this.getCacheKey(document);\n\t\tif (!key) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst task = this.cache.get(key);\n\t\tif (!task) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn task.hasOrigin(origin);\n\t}\n\n\tcreateTracker(origin: string): interfaces.IDocumentMergeConflictTracker {\n\t\treturn new OriginDocumentMergeConflictTracker(this, origin);\n\t}\n\n\tforget(document: vscode.TextDocument) {\n\t\tlet key = this.getCacheKey(document);\n\n\t\tif (key) {\n\t\t\tthis.cache.delete(key);\n\t\t}\n\t}\n\n\tdispose() {\n\t\tthis.cache.clear();\n\t}\n\n\tprivate getConflictsOrEmpty(document: vscode.TextDocument, _origins: string[]): interfaces.IDocumentMergeConflict[] {\n\t\tconst containsConflict = MergeConflictParser.containsConflict(document);\n\n\t\tif (!containsConflict) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst conflicts = MergeConflictParser.scanDocument(document);\n\t\treturn conflicts;\n\t}\n\n\tprivate getCacheKey(document: vscode.TextDocument): string | null {\n\t\tif (document.uri) {\n\t\t\treturn document.uri.toString();\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as vscode from 'vscode';\nimport * as interfaces from './interfaces';\nimport { DocumentMergeConflict } from './documentMergeConflict';\n\nconst startHeaderMarker = '<<<<<<<';\nconst commonAncestorsMarker = '|||||||';\nconst splitterMarker = '=======';\nconst endFooterMarker = '>>>>>>>';\n\ninterface IScanMergedConflict {\n\tstartHeader: vscode.TextLine;\n\tcommonAncestors: vscode.TextLine[];\n\tsplitter?: vscode.TextLine;\n\tendFooter?: vscode.TextLine;\n}\n\nexport class MergeConflictParser {\n\n\tstatic scanDocument(document: vscode.TextDocument): interfaces.IDocumentMergeConflict[] {\n\n\t\t// Scan each line in the document, we already know there is at least a <<<<<<< and\n\t\t// >>>>>> marker within the document, we need to group these into conflict ranges.\n\t\t// We initially build a scan match, that references the lines of the header, splitter\n\t\t// and footer. This is then converted into a full descriptor containing all required\n\t\t// ranges.\n\n\t\tlet currentConflict: IScanMergedConflict | null = null;\n\t\tconst conflictDescriptors: interfaces.IDocumentMergeConflictDescriptor[] = [];\n\n\t\tfor (let i = 0; i < document.lineCount; i++) {\n\t\t\tconst line = document.lineAt(i);\n\n\t\t\t// Ignore empty lines\n\t\t\tif (!line || line.isEmptyOrWhitespace) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Is this a start line? <<<<<<<\n\t\t\tif (line.text.startsWith(startHeaderMarker)) {\n\t\t\t\tif (currentConflict !== null) {\n\t\t\t\t\t// Error, we should not see a startMarker before we've seen an endMarker\n\t\t\t\t\tcurrentConflict = null;\n\n\t\t\t\t\t// Give up parsing, anything matched up this to this point will be decorated\n\t\t\t\t\t// anything after will not\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Create a new conflict starting at this line\n\t\t\t\tcurrentConflict = { startHeader: line, commonAncestors: [] };\n\t\t\t}\n\t\t\t// Are we within a conflict block and is this a common ancestors marker? |||||||\n\t\t\telse if (currentConflict && !currentConflict.splitter && line.text.startsWith(commonAncestorsMarker)) {\n\t\t\t\tcurrentConflict.commonAncestors.push(line);\n\t\t\t}\n\t\t\t// Are we within a conflict block and is this a splitter? =======\n\t\t\telse if (currentConflict && !currentConflict.splitter && line.text === splitterMarker) {\n\t\t\t\tcurrentConflict.splitter = line;\n\t\t\t}\n\t\t\t// Are we within a conflict block and is this a footer? >>>>>>>\n\t\t\telse if (currentConflict && line.text.startsWith(endFooterMarker)) {\n\t\t\t\tcurrentConflict.endFooter = line;\n\n\t\t\t\t// Create a full descriptor from the lines that we matched. This can return\n\t\t\t\t// null if the descriptor could not be completed.\n\t\t\t\tlet completeDescriptor = MergeConflictParser.scanItemTolMergeConflictDescriptor(document, currentConflict);\n\n\t\t\t\tif (completeDescriptor !== null) {\n\t\t\t\t\tconflictDescriptors.push(completeDescriptor);\n\t\t\t\t}\n\n\t\t\t\t// Reset the current conflict to be empty, so we can match the next\n\t\t\t\t// starting header marker.\n\t\t\t\tcurrentConflict = null;\n\t\t\t}\n\t\t}\n\n\t\treturn conflictDescriptors\n\t\t\t.filter(Boolean)\n\t\t\t.map(descriptor => new DocumentMergeConflict(descriptor));\n\t}\n\n\tprivate static scanItemTolMergeConflictDescriptor(document: vscode.TextDocument, scanned: IScanMergedConflict): interfaces.IDocumentMergeConflictDescriptor | null {\n\t\t// Validate we have all the required lines within the scan item.\n\t\tif (!scanned.startHeader || !scanned.splitter || !scanned.endFooter) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet tokenAfterCurrentBlock: vscode.TextLine = scanned.commonAncestors[0] || scanned.splitter;\n\n\t\t// Assume that descriptor.current.header, descriptor.incoming.header and descriptor.splitter\n\t\t// have valid ranges, fill in content and total ranges from these parts.\n\t\t// NOTE: We need to shift the decorator range back one character so the splitter does not end up with\n\t\t// two decoration colors (current and splitter), if we take the new line from the content into account\n\t\t// the decorator will wrap to the next line.\n\t\treturn {\n\t\t\tcurrent: {\n\t\t\t\theader: scanned.startHeader.range,\n\t\t\t\tdecoratorContent: new vscode.Range(\n\t\t\t\t\tscanned.startHeader.rangeIncludingLineBreak.end,\n\t\t\t\t\tMergeConflictParser.shiftBackOneCharacter(document, tokenAfterCurrentBlock.range.start, scanned.startHeader.rangeIncludingLineBreak.end)),\n\t\t\t\t// Current content is range between header (shifted for linebreak) and splitter or common ancestors mark start\n\t\t\t\tcontent: new vscode.Range(\n\t\t\t\t\tscanned.startHeader.rangeIncludingLineBreak.end,\n\t\t\t\t\ttokenAfterCurrentBlock.range.start),\n\t\t\t\tname: scanned.startHeader.text.substring(startHeaderMarker.length + 1)\n\t\t\t},\n\t\t\tcommonAncestors: scanned.commonAncestors.map((currentTokenLine, index, commonAncestors) => {\n\t\t\t\tlet nextTokenLine = commonAncestors[index + 1] || scanned.splitter;\n\t\t\t\treturn {\n\t\t\t\t\theader: currentTokenLine.range,\n\t\t\t\t\tdecoratorContent: new vscode.Range(\n\t\t\t\t\t\tcurrentTokenLine.rangeIncludingLineBreak.end,\n\t\t\t\t\t\tMergeConflictParser.shiftBackOneCharacter(document, nextTokenLine.range.start, currentTokenLine.rangeIncludingLineBreak.end)),\n\t\t\t\t\t// Each common ancestors block is range between one common ancestors token\n\t\t\t\t\t// (shifted for linebreak) and start of next common ancestors token or splitter\n\t\t\t\t\tcontent: new vscode.Range(\n\t\t\t\t\t\tcurrentTokenLine.rangeIncludingLineBreak.end,\n\t\t\t\t\t\tnextTokenLine.range.start),\n\t\t\t\t\tname: currentTokenLine.text.substring(commonAncestorsMarker.length + 1)\n\t\t\t\t};\n\t\t\t}),\n\t\t\tsplitter: scanned.splitter.range,\n\t\t\tincoming: {\n\t\t\t\theader: scanned.endFooter.range,\n\t\t\t\tdecoratorContent: new vscode.Range(\n\t\t\t\t\tscanned.splitter.rangeIncludingLineBreak.end,\n\t\t\t\t\tMergeConflictParser.shiftBackOneCharacter(document, scanned.endFooter.range.start, scanned.splitter.rangeIncludingLineBreak.end)),\n\t\t\t\t// Incoming content is range between splitter (shifted for linebreak) and footer start\n\t\t\t\tcontent: new vscode.Range(\n\t\t\t\t\tscanned.splitter.rangeIncludingLineBreak.end,\n\t\t\t\t\tscanned.endFooter.range.start),\n\t\t\t\tname: scanned.endFooter.text.substring(endFooterMarker.length + 1)\n\t\t\t},\n\t\t\t// Entire range is between current header start and incoming header end (including line break)\n\t\t\trange: new vscode.Range(scanned.startHeader.range.start, scanned.endFooter.rangeIncludingLineBreak.end)\n\t\t};\n\t}\n\n\tstatic containsConflict(document: vscode.TextDocument): boolean {\n\t\tif (!document) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet text = document.getText();\n\t\treturn text.includes(startHeaderMarker) && text.includes(endFooterMarker);\n\t}\n\n\tprivate static shiftBackOneCharacter(document: vscode.TextDocument, range: vscode.Position, unlessEqual: vscode.Position): vscode.Position {\n\t\tif (range.isEqual(unlessEqual)) {\n\t\t\treturn range;\n\t\t}\n\n\t\tlet line = range.line;\n\t\tlet character = range.character - 1;\n\n\t\tif (character < 0) {\n\t\t\tline--;\n\t\t\tcharacter = document.lineAt(line).range.end.character;\n\t\t}\n\n\t\treturn new vscode.Position(line, character);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as vscode from 'vscode';\nimport * as interfaces from './interfaces';\nimport { loadMessageBundle } from 'vscode-nls';\nconst localize = loadMessageBundle();\n\nexport default class MergeDecorator implements vscode.Disposable {\n\n\tprivate decorations: { [key: string]: vscode.TextEditorDecorationType } = {};\n\n\tprivate decorationUsesWholeLine: boolean = true; // Useful for debugging, set to false to see exact match ranges\n\n\tprivate config?: interfaces.IExtensionConfiguration;\n\tprivate tracker: interfaces.IDocumentMergeConflictTracker;\n\tprivate updating = new Map<vscode.TextEditor, boolean>();\n\n\tconstructor(private context: vscode.ExtensionContext, trackerService: interfaces.IDocumentMergeConflictTrackerService) {\n\t\tthis.tracker = trackerService.createTracker('decorator');\n\t}\n\n\tbegin(config: interfaces.IExtensionConfiguration) {\n\t\tthis.config = config;\n\t\tthis.registerDecorationTypes(config);\n\n\t\t// Check if we already have a set of active windows, attempt to track these.\n\t\tvscode.window.visibleTextEditors.forEach(e => this.applyDecorations(e));\n\n\t\tvscode.workspace.onDidOpenTextDocument(event => {\n\t\t\tthis.applyDecorationsFromEvent(event);\n\t\t}, null, this.context.subscriptions);\n\n\t\tvscode.workspace.onDidChangeTextDocument(event => {\n\t\t\tthis.applyDecorationsFromEvent(event.document);\n\t\t}, null, this.context.subscriptions);\n\n\t\tvscode.window.onDidChangeVisibleTextEditors((e) => {\n\t\t\t// Any of which could be new (not just the active one).\n\t\t\te.forEach(e => this.applyDecorations(e));\n\t\t}, null, this.context.subscriptions);\n\t}\n\n\tconfigurationUpdated(config: interfaces.IExtensionConfiguration) {\n\t\tthis.config = config;\n\t\tthis.registerDecorationTypes(config);\n\n\t\t// Re-apply the decoration\n\t\tvscode.window.visibleTextEditors.forEach(e => {\n\t\t\tthis.removeDecorations(e);\n\t\t\tthis.applyDecorations(e);\n\t\t});\n\t}\n\n\tprivate registerDecorationTypes(config: interfaces.IExtensionConfiguration) {\n\n\t\t// Dispose of existing decorations\n\t\tObject.keys(this.decorations).forEach(k => this.decorations[k].dispose());\n\t\tthis.decorations = {};\n\n\t\t// None of our features are enabled\n\t\tif (!config.enableDecorations || !config.enableEditorOverview) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Create decorators\n\t\tif (config.enableDecorations || config.enableEditorOverview) {\n\t\t\tthis.decorations['current.content'] = vscode.window.createTextEditorDecorationType(\n\t\t\t\tthis.generateBlockRenderOptions('merge.currentContentBackground', 'editorOverviewRuler.currentContentForeground', config)\n\t\t\t);\n\n\t\t\tthis.decorations['incoming.content'] = vscode.window.createTextEditorDecorationType(\n\t\t\t\tthis.generateBlockRenderOptions('merge.incomingContentBackground', 'editorOverviewRuler.incomingContentForeground', config)\n\t\t\t);\n\n\t\t\tthis.decorations['commonAncestors.content'] = vscode.window.createTextEditorDecorationType(\n\t\t\t\tthis.generateBlockRenderOptions('merge.commonContentBackground', 'editorOverviewRuler.commonContentForeground', config)\n\t\t\t);\n\t\t}\n\n\t\tif (config.enableDecorations) {\n\t\t\tthis.decorations['current.header'] = vscode.window.createTextEditorDecorationType({\n\t\t\t\tisWholeLine: this.decorationUsesWholeLine,\n\t\t\t\tbackgroundColor: new vscode.ThemeColor('merge.currentHeaderBackground'),\n\t\t\t\tcolor: new vscode.ThemeColor('editor.foreground'),\n\t\t\t\toutlineStyle: 'solid',\n\t\t\t\toutlineWidth: '1pt',\n\t\t\t\toutlineColor: new vscode.ThemeColor('merge.border'),\n\t\t\t\tafter: {\n\t\t\t\t\tcontentText: ' ' + localize('currentChange', '(Current Change)'),\n\t\t\t\t\tcolor: new vscode.ThemeColor('descriptionForeground')\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.decorations['commonAncestors.header'] = vscode.window.createTextEditorDecorationType({\n\t\t\t\tisWholeLine: this.decorationUsesWholeLine,\n\t\t\t\tbackgroundColor: new vscode.ThemeColor('merge.commonHeaderBackground'),\n\t\t\t\tcolor: new vscode.ThemeColor('editor.foreground'),\n\t\t\t\toutlineStyle: 'solid',\n\t\t\t\toutlineWidth: '1pt',\n\t\t\t\toutlineColor: new vscode.ThemeColor('merge.border')\n\t\t\t});\n\n\t\t\tthis.decorations['splitter'] = vscode.window.createTextEditorDecorationType({\n\t\t\t\tcolor: new vscode.ThemeColor('editor.foreground'),\n\t\t\t\toutlineStyle: 'solid',\n\t\t\t\toutlineWidth: '1pt',\n\t\t\t\toutlineColor: new vscode.ThemeColor('merge.border'),\n\t\t\t\tisWholeLine: this.decorationUsesWholeLine,\n\t\t\t});\n\n\t\t\tthis.decorations['incoming.header'] = vscode.window.createTextEditorDecorationType({\n\t\t\t\tbackgroundColor: new vscode.ThemeColor('merge.incomingHeaderBackground'),\n\t\t\t\tcolor: new vscode.ThemeColor('editor.foreground'),\n\t\t\t\toutlineStyle: 'solid',\n\t\t\t\toutlineWidth: '1pt',\n\t\t\t\toutlineColor: new vscode.ThemeColor('merge.border'),\n\t\t\t\tisWholeLine: this.decorationUsesWholeLine,\n\t\t\t\tafter: {\n\t\t\t\t\tcontentText: ' ' + localize('incomingChange', '(Incoming Change)'),\n\t\t\t\t\tcolor: new vscode.ThemeColor('descriptionForeground')\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tdispose() {\n\n\t\t// TODO: Replace with Map<string, T>\n\t\tObject.keys(this.decorations).forEach(name => {\n\t\t\tthis.decorations[name].dispose();\n\t\t});\n\n\t\tthis.decorations = {};\n\t}\n\n\tprivate generateBlockRenderOptions(backgroundColor: string, overviewRulerColor: string, config: interfaces.IExtensionConfiguration): vscode.DecorationRenderOptions {\n\n\t\tlet renderOptions: vscode.DecorationRenderOptions = {};\n\n\t\tif (config.enableDecorations) {\n\t\t\trenderOptions.backgroundColor = new vscode.ThemeColor(backgroundColor);\n\t\t\trenderOptions.isWholeLine = this.decorationUsesWholeLine;\n\t\t}\n\n\t\tif (config.enableEditorOverview) {\n\t\t\trenderOptions.overviewRulerColor = new vscode.ThemeColor(overviewRulerColor);\n\t\t\trenderOptions.overviewRulerLane = vscode.OverviewRulerLane.Full;\n\t\t}\n\n\t\treturn renderOptions;\n\t}\n\n\tprivate applyDecorationsFromEvent(eventDocument: vscode.TextDocument) {\n\t\tfor (const editor of vscode.window.visibleTextEditors) {\n\t\t\tif (editor.document === eventDocument) {\n\t\t\t\t// Attempt to apply\n\t\t\t\tthis.applyDecorations(editor);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async applyDecorations(editor: vscode.TextEditor) {\n\t\tif (!editor || !editor.document) { return; }\n\n\t\tif (!this.config || (!this.config.enableDecorations && !this.config.enableEditorOverview)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If we have a pending scan from the same origin, exit early. (Cannot use this.tracker.isPending() because decorations are per editor.)\n\t\tif (this.updating.get(editor)) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tthis.updating.set(editor, true);\n\n\t\t\tlet conflicts = await this.tracker.getConflicts(editor.document);\n\t\t\tif (vscode.window.visibleTextEditors.indexOf(editor) === -1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (conflicts.length === 0) {\n\t\t\t\tthis.removeDecorations(editor);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Store decorations keyed by the type of decoration, set decoration wants a \"style\"\n\t\t\t// to go with it, which will match this key (see constructor);\n\t\t\tlet matchDecorations: { [key: string]: vscode.Range[] } = {};\n\n\t\t\tlet pushDecoration = (key: string, d: vscode.Range) => {\n\t\t\t\tmatchDecorations[key] = matchDecorations[key] || [];\n\t\t\t\tmatchDecorations[key].push(d);\n\t\t\t};\n\n\t\t\tconflicts.forEach(conflict => {\n\t\t\t\t// TODO, this could be more effective, just call getMatchPositions once with a map of decoration to position\n\t\t\t\tif (!conflict.current.decoratorContent.isEmpty) {\n\t\t\t\t\tpushDecoration('current.content', conflict.current.decoratorContent);\n\t\t\t\t}\n\t\t\t\tif (!conflict.incoming.decoratorContent.isEmpty) {\n\t\t\t\t\tpushDecoration('incoming.content', conflict.incoming.decoratorContent);\n\t\t\t\t}\n\n\t\t\t\tconflict.commonAncestors.forEach(commonAncestorsRegion => {\n\t\t\t\t\tif (!commonAncestorsRegion.decoratorContent.isEmpty) {\n\t\t\t\t\t\tpushDecoration('commonAncestors.content', commonAncestorsRegion.decoratorContent);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (this.config!.enableDecorations) {\n\t\t\t\t\tpushDecoration('current.header', conflict.current.header);\n\t\t\t\t\tpushDecoration('splitter', conflict.splitter);\n\t\t\t\t\tpushDecoration('incoming.header', conflict.incoming.header);\n\n\t\t\t\t\tconflict.commonAncestors.forEach(commonAncestorsRegion => {\n\t\t\t\t\t\tpushDecoration('commonAncestors.header', commonAncestorsRegion.header);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// For each match we've generated, apply the generated decoration with the matching decoration type to the\n\t\t\t// editor instance. Keys in both matches and decorations should match.\n\t\t\tObject.keys(matchDecorations).forEach(decorationKey => {\n\t\t\t\tlet decorationType = this.decorations[decorationKey];\n\n\t\t\t\tif (decorationType) {\n\t\t\t\t\teditor.setDecorations(decorationType, matchDecorations[decorationKey]);\n\t\t\t\t}\n\t\t\t});\n\n\t\t} finally {\n\t\t\tthis.updating.delete(editor);\n\t\t}\n\t}\n\n\tprivate removeDecorations(editor: vscode.TextEditor) {\n\t\t// Remove all decorations, there might be none\n\t\tObject.keys(this.decorations).forEach(decorationKey => {\n\n\t\t\t// Race condition, while editing the settings, it's possible to\n\t\t\t// generate regions before the configuration has been refreshed\n\t\t\tlet decorationType = this.decorations[decorationKey];\n\n\t\t\tif (decorationType) {\n\t\t\t\teditor.setDecorations(decorationType, []);\n\t\t\t}\n\t\t});\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as vscode from 'vscode';\nimport DocumentTracker from './documentTracker';\nimport CodeLensProvider from './codelensProvider';\nimport CommandHandler from './commandHandler';\nimport ContentProvider from './contentProvider';\nimport Decorator from './mergeDecorator';\nimport * as interfaces from './interfaces';\n\nconst ConfigurationSectionName = 'merge-conflict';\n\nexport default class ServiceWrapper implements vscode.Disposable {\n\n\tprivate services: vscode.Disposable[] = [];\n\n\tconstructor(private context: vscode.ExtensionContext) {\n\t}\n\n\tbegin() {\n\n\t\tlet configuration = this.createExtensionConfiguration();\n\t\tconst documentTracker = new DocumentTracker();\n\n\t\tthis.services.push(\n\t\t\tdocumentTracker,\n\t\t\tnew CommandHandler(documentTracker),\n\t\t\tnew CodeLensProvider(documentTracker),\n\t\t\tnew ContentProvider(this.context),\n\t\t\tnew Decorator(this.context, documentTracker),\n\t\t);\n\n\t\tthis.services.forEach((service: any) => {\n\t\t\tif (service.begin && service.begin instanceof Function) {\n\t\t\t\tservice.begin(configuration);\n\t\t\t}\n\t\t});\n\n\t\tvscode.workspace.onDidChangeConfiguration(() => {\n\t\t\tthis.services.forEach((service: any) => {\n\t\t\t\tif (service.configurationUpdated && service.configurationUpdated instanceof Function) {\n\t\t\t\t\tservice.configurationUpdated(this.createExtensionConfiguration());\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tcreateExtensionConfiguration(): interfaces.IExtensionConfiguration {\n\t\tconst workspaceConfiguration = vscode.workspace.getConfiguration(ConfigurationSectionName);\n\t\tconst codeLensEnabled: boolean = workspaceConfiguration.get('codeLens.enabled', true);\n\t\tconst decoratorsEnabled: boolean = workspaceConfiguration.get('decorators.enabled', true);\n\n\t\treturn {\n\t\t\tenableCodeLens: codeLensEnabled,\n\t\t\tenableDecorations: decoratorsEnabled,\n\t\t\tenableEditorOverview: decoratorsEnabled\n\t\t};\n\t}\n\n\tdispose() {\n\t\tthis.services.forEach(disposable => disposable.dispose());\n\t\tthis.services = [];\n\t}\n}\n\n","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport MergeConflictServices from './services';\n\nexport function activate(context: vscode.ExtensionContext) {\n\t// Register disposables\n\tconst services = new MergeConflictServices(context);\n\tservices.begin();\n\tcontext.subscriptions.push(services);\n}\n\nexport function deactivate() {\n}\n\n"],"sourceRoot":""}