#+TITLE: edsl for dungeons & dragons workflow, to formalisms like Petri Net

* asPetri                                                              :note:

Every ~PetriNet PLabel TLabel~ comprises the following contents:

| item | places | transitions | p -> t | t -> p |
|------+--------+-------------+--------+--------|
|      |        |             |        |        |

The global petri net is an ~mconcat~ of all the sub-nets.

** Conventions

We represent parallel workflows using a "scatter / gather" pattern: a FORK transition splits activity to multiple places, each of which heads a thread of activity. The threads eventually converge back to a JOIN transition. This is basic synchronization.

We represent choice among multiple possible events by using labeled edges.

We represent user input by an ~(Await X) -> [X] -> (Decided X)~ set of nodes.

** Conversion from StateTree

A StateTree is made of ~Node (stateName :-> outEdges)~ and its children.

We convert a StateTree to a PetriNet using the following transformations:

*** Leaf Node (plain box)

| Node | stateName | outEdges | subForest | PetriNet | places       | transitions | p -> t  | t -> p  |
|------+-----------+----------+-----------+----------+--------------+-------------+---------+---------|
|      | box       | []       | []        |          | Awaiting box |             |         |         |
|      |           |          |           |          |              | box         | Ab -> b | b -> Db |
|      |           |          |           |          | Decided box  |             |         |         |

*** Box containing one child and no outEdges

| Node | stateName | outEdges | subForest | PetriNet | places          | transitions | p -> t   | t -> p   |
|------+-----------+----------+-----------+----------+-----------------+-------------+----------+----------|
|      | parent    | []       | [box]     |          | Awaiting parent | parentFork  | Ap -> pF | pF -> Ab |
|      |           |          |           |          | Awaiting box    | box         | Ab -> b  | b -> Db  |
|      |           |          |           |          | Decided box     | parentJoin  | Db -> pJ |          |
|      |           |          |           |          | Decided parent  |             |          | pJ -> Dp |

*** Box containing two children and no outEdges

| Node | stateName | outEdges | subForest    | PetriNet | places          | transitions | p -> t   | t -> p       |
|------+-----------+----------+--------------+----------+-----------------+-------------+----------+--------------|
|      | parent    | []       | [box, child] |          | Awaiting parent | parentFork  | Ap -> pF | Ac |
|      |           |          |              |          |                 |             |          | qa |
|      |           |          |              |          | Awaiting box    | box         | Ab -> b  | pF -> Ab, b -> Db |
|      |           |          |              |          | Decided box     | parentJoin  | Db -> pJ |              |
|      |           |          |              |          | Awaiting child  | child       | Ac -> c  | c -> Dc      |
|      |           |          |              |          | Decided child   |             | Dc -> pJ |              |
|      |           |          |              |          | Decided parent  |             |          | pJ -> Dp     |


*** Plain box with one outEdge, unlabeled

*** Plain box with two outEdges, labeled

*** Plain box with one child and one outEdge

*** Other Remarks
output to Petri net representation.
Petri Nets are a graph; they aren't strictly hierarchical -- we're not doing Nets In Nets.
so how do we take a Workflow approach to this?
https://en.wikipedia.org/wiki/Petri_net#Workflow_nets

we rewrite all targetless children of a state to be indegrees of a join event that points to a parent state.
we rewrite all sourceless children of the root state to be targets of a fork event.

a labeled out edge becomes a downstream transition from a place.
"case" conditions are represented as "nondeterminism" where a place can have multiple output transitions;
it's up to the environment to tell us which of the transitions actually fired.
in other words, case race of
                       dwarf -> let dsr = choose dwarf sub-race; return { race, dsr }
                       elf   -> let esr = choose elf   sub-race; return { race, esr }
 translates to:
 (Awaiting choose race) -> [ choose race ] -> (Decided race) -> [ race is dwarf ] -> (Awaiting choose dwarf sub-race) -> [ choose d s-r ] -> (Decided choose d s-r)
                                                             -> [ race is elf   ] -> (Awaiting choose elf   sub-race) -> [ choose e s-r ] -> (Decided choose e s-r)


(front)    -> [pre]  -> (recurse) -> [post] -> (back)
(awaiting) -> [fork] -> (recurse) -> [join] -> (decided)
(start)    -> [push] -> (recurse) -> [pop]  -> (end)


