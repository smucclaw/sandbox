#+TITLE: edsl for dungeons & dragons workflow, to formalisms like Petri Net

* asPetri                                                              :note:

Every ~PetriNet PLabel TLabel~ comprises the following contents:

- places : PLabel
- transitions : TLabel
- p -> t : PLabel -> TLabel
- t -> p : TLabel -> PLabel

So, if we had a simple PN consisting of:

#+begin_example
(start) -> [event] -> (end)
#+end_example

We would represent it like this:

| item | places | transitions | p -> t         | t -> p       |
|------+--------+-------------+----------------+--------------|
|      | start  |             |                |              |
|      |        |             | start -> event |              |
|      |        | event       |                |              |
|      |        |             |                | event -> end |
|      | end    |             |                |              |

The global petri net is an ~mconcat~ of all the sub-nets.

** Conventions

We represent *concurrency* using a "scatter / gather" pattern: after a starting place, a ~FORK~ transition splits activity to multiple places, each of which heads a thread of activity. The threads eventually converge back to a ~JOIN~ transition, which proceeds to an ending place. This is basic synchronization.

We represent *external events* by an ~(Await X) -> [X] -> (Decided X)~ set of nodes, where ~[X]~ is read from an event stream. The ~TL~ constructor is used for those events, to distinguish from "automatic" transitions which use other constructors like ~Noop~, ~Fork~, and ~Join~.

We represent *choice* among multiple possible events by labeling the multiple edges that exit a place. They gather back to the parent using the equivalent of an "or gate". The ~Case~ constructor performs conditional branching.

** Conversion from StateTree

A StateTree is made of ~Node (stateName :-> outEdges)~ and its children.

We convert a StateTree to a PetriNet using the following transformations:

*** Leaf Node (plain simple box)

| Node | stateName | outEdges | subForest | PetriNet | places       | transitions | p -> t  | t -> p  |
|------+-----------+----------+-----------+----------+--------------+-------------+---------+---------|
|      | box       | []       | []        |          | Awaiting box |             | Ab -> b |         |
|      |           |          |           |          |              | box         |         |         |
|      |           |          |           |          | Decided box  |             |         | b -> Db |

*** Box containing one child and no outEdges

| Node | stateName | outEdges | subForest | PetriNet | places          | transitions | p -> t   | t -> p   |
|------+-----------+----------+-----------+----------+-----------------+-------------+----------+----------|
|      | parent    | []       | [box]     |          | Awaiting parent | parentFork  | Ap -> pF | pF -> Ab |
|      |           |          |           |          | Awaiting box    | box         | Ab -> b  | b -> Db  |
|      |           |          |           |          | Decided box     |             | Db -> pJ |          |
|      |           |          |           |          | Decided parent  | parentJoin  |          | pJ -> Dp |

The fork and join seem extraneous, but they make sense when there are multiple children:

*** Box containing two children and no outEdges

| Node | stateName | outEdges | subForest    | PetriNet | places          | transitions | p -> t   | t -> p             |
|------+-----------+----------+--------------+----------+-----------------+-------------+----------+--------------------|
|      | parent    | []       | [box, child] |          | Awaiting parent | parentFork  | Ap -> pF | pF -> Ab, pF -> Ac |
|      |           |          |              |          | Awaiting box    | box         | Ab -> b  | b -> Db            |
|      |           |          |              |          | Decided box     |             | Db -> pJ |                    |
|      |           |          |              |          | Awaiting child  | child       | Ac -> c  | c -> Dc            |
|      |           |          |              |          | Decided child   |             | Dc -> pJ |                    |
|      |           |          |              |          | Decided parent  | parentJoin  |          | pJ -> Dp           |

*** Plain box with one outEdge, unlabeled

| Node | stateName | outEdges     | subForest | PetriNet | places        | transitions | p -> t    | t -> p    |
|------+-----------+--------------+-----------+----------+---------------+-------------+-----------+-----------|
|      | box       | [((), next)] | []        |          | Awaiting box  | box         | Ab -> b   | b -> Db   |
|      |           |              |           |          | Decided box   |             | Db -> b2n |           |
|      |           |              |           |          |               | box2next    |           | b2n -> An |
|      |           |              |           |          | Awaiting next | next        | An -> n   | n -> Dn   |
|      |           |              |           |          | Decided next  |             |           |           |

~box2next~ is implemented as a ~Noop "proceeding directly from box to next"~

*** Plain box with two outEdges, labeled

| Node | stateName | outEdges     | subForest | PetriNet | places          | transitions | p -> t     | t -> p    |
|------+-----------+--------------+-----------+----------+-----------------+-------------+------------+-----------|
|      | box       | [(t1,next1)  | []        |          |                 |             |            |           |
|      |           | ,(t2,next2)] |           |          | Awaiting box    | box         | Ab -> b    | b -> Db   |
|      |           |              |           |          | Decided box     |             |            |           |
|      |           |              |           |          |                 | t1          | Db -> t1   | t1 -> An1 |
|      |           |              |           |          | Awaiting next1  | next1       | An1 -> n1  | n1 -> Dn1 |
|      |           |              |           |          | Decided next1   |             |            |           |
|      |           |              |           |          |                 | t2          | Db -> t2   | t2 -> An2 |
|      |           |              |           |          | Awaiting next2  | next2       | An2 -> n2  | n2 -> Dn2 |
|      |           |              |           |          | Decided next2   |             |            |           |
|      |           |              |           |          |                 |             |            |           |
|      |           |              |           |          | Box gather (Gb) | or1         | Dn1 -> or1 | or1 -> Gb |
|      |           |              |           |          | Box gather (Gb) | or2         | Dn2 -> or2 | or2 -> Gb |

The Gathers act as an or-gate to join either next-child back to the box.

*** Box with two children and two outEdges, labeled

| Node | stateName | outEdges     | subForest | PetriNet | places          | transitions | p -> t     | t -> p    |
|------+-----------+--------------+-----------+----------+-----------------+-------------+------------+-----------|
|      | parent    | [(t1,next1)  | [box      |          |                 |             |            |           |
|      |           | ,(t2,next2)] | ,child]   |          |                 |             |            |           |
|      |           |              |           |          | Awaiting parent | parentFork  | Ap -> pF   |           |
|      |           |              |           |          |                 |             |            | pF -> Ab  |
|      |           |              |           |          | Awaiting box    | box         | Ab -> b    | b -> Db   |
|      |           |              |           |          | Decided box     | parentJoin  | Db -> pJ   |           |
|      |           |              |           |          |                 |             |            | pF -> Ac  |
|      |           |              |           |          | Awaiting child  | child       | Ac -> c    | c -> Dc   |
|      |           |              |           |          | Decided child   | parentJoin  | Dc -> pJ   |           |
|      |           |              |           |          | Decided parent  |             |            | pJ -> Dp  |
|      |           |              |           |          |                 | t1          | Dp -> t1   | t1 -> An1 |
|      |           |              |           |          | Awaiting next1  | next1       | An1 -> n1  | n1 -> Dn1 |
|      |           |              |           |          | Decided next1   |             |            |           |
|      |           |              |           |          |                 | t2          | Db -> t2   | t2 -> An2 |
|      |           |              |           |          | Awaiting next2  | next2       | An2 -> n2  | n2 -> Dn2 |
|      |           |              |           |          | Decided next2   |             |            |           |
|      |           |              |           |          |                 |             |            |           |
|      |           |              |           |          | Box gather (Gb) | or1         | Dn1 -> or1 | or1 -> Gb |
|      |           |              |           |          | Box gather (Gb) | or2         | Dn2 -> or2 | or2 -> Gb |

*** General Principles

We induce from the above examples that first we deal with children, then we deal with outdegrees.

What do we join? Whatever places are produced by the children and outdegrees, which themselves have no outdegree transitions.

*** Naming conventions in the ~asPetri~ function

Given a state ~X~,

The ~front~ and ~back~ places are labels ~Awaiting X~ and ~Decided X~. The ~gather~ place is a final place that sweeps up any next states.

The ~pre~ and ~post~ transitions are either ~X Fork~ and ~X Join~, or ~Noop~s: ~X Push~ and ~X Pop~. These are useful in the parent/subForest case.

~middle~ is just the transition ~X~ itself.

* Playing a Petri Net

We use a Petri Net to represent a workflow.

We have a notion of an event stream provided by the environment.

A Petri Net consumes those "external" events -- a.k.a. transitions -- and updates markings accordingly.

Some events are "internal" -- Forks and Joins and Noops are artefacts of our Petri Net encoding. Internal events are not expected from the environment. Instead, they auto-play.

External events are constructed with the ~TL~ data constructor.

The event stream is provided from the environment and arrives in the form of key/value pairs. The keys are TL strings. The key/value pairs are stored in a symbol lookup available for lookup by downstream parts of the Petri Net.

The ~Case~ transition is a special internal transition that implements conditional branch. The edge label is tested against the value received in the immediately preceding event, and if it matches, the transition is fired.

Let's set up this hierarchy of stepper functions:

- play :: given an event stream, play1 each event in the stream until no events remain.
- play1 :: run play0 to autoplay, then consume one event. If the event is not enabled, return a Left warning; this is equivalent to a parser aborting on "unexpected token encountered".
- play0 :: autoplay all internal events e.g. Fork, Join, Noop, Case until we run out of internal events
- step0 :: actually do the work of stepping through a transition by updating the marking

What are the types of these functions? They rather remind one of a parser combinator: we are consuming input and elaborating structure, together with an error log.

In an ideal world, the the appropriate pattern would be a monadic parser combinator.

In this initial implementation, we just do things the dumb way: using Fold.

The accumulator is the marking.

The stepper is actually a ~(stepper petriNet)~ that knows how to step through the given ~petriNet~.

* Future Work

Suppose a downstream event wants to refer to the value of an event received previously. To support this:
- extend the syntax for a node to be "Lookup X" with labeled out edges.
- change the semantics of a "Choose X" event to save the value in the symbol table under "X" rather than under "Choose X"
