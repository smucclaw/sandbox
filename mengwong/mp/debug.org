mp> test (suite: mp-test, args: --match "/revised parser/horn-1: should parse horn clause on a single line/")

* / pRule                                                                                                               :Decide:
** / pRule: unwrapping indentation and recursing                                                                       :Decide:
*** / myindented: consuming GoDeeper                                                                                  :Decide:
** / pRegRule                                                                                                          :Decide:
*** / pRuleLabel                                                                                                      :Decide:
*** / pRegRuleSugary                                                                                                  :Decide:
**** / pMultiTermAka                                                                                                 :Decide:
***** / pAKA                                                                                                        :Decide:
****** / pAKA base                                                                                                 :Decide:
******* / pMultiTerm calling someDeep choice                                                                      :Decide:
******** / someDeep                                                                                              :Decide:
********* / manyIndentation/leaf?                                                                               :Decide:
********** / someDeep first part calls base directly                                                           :Decide:
*********** / pNumAsText                                                                                      :Decide:
********* / manyIndentation/deeper; calling someIndentation                                                     :Decide:
********** / someIndentation                                                                                   :Decide:
*********** / myindented: consuming GoDeeper                                                                  :Decide:
*** / pRegRuleNormal                                                                                                  :Decide:
**** / permutationsReg                                                                                               :Decide:
***** / regulative permutation with deontic-temporal                                                                :Decide:
****** / preambleBoolStructR [Unless]                                                                              :Decide:
****** / preambleBoolStructR [When,If]                                                                             :Decide:
****** / pDT                                                                                                       :Decide:
******* / optIndentedTuple                                                                                        :Decide:
******** / optIndented                                                                                           :Decide:
****** / pActor [Every,Party,TokAll]                                                                               :Decide:
****** / pDoAction/Do                                                                                              :Decide:
***** / regulative permutation with deontic-action                                                                  :Decide:
****** / preambleBoolStructR [Unless]                                                                              :Decide:
****** / preambleBoolStructR [When,If]                                                                             :Decide:
****** / pTemporal/eventually                                                                                      :Decide:
****** / pTemporal/specifically                                                                                    :Decide:
****** / pTemporal/vaguely                                                                                         :Decide:
****** / pActor [Every,Party,TokAll]                                                                               :Decide:
****** / pDA                                                                                                       :Decide:
** / pConstitutiveRule                                                                                                 :Decide:
*** / calling myindented pNameParens                                                                                  :Decide:
**** / manyIndentation/leaf?                                                                                         :Decide:
***** / pMultiTermAka                                                                                               :Decide:
****** / pAKA                                                                                                      :Decide:
******* / pAKA base                                                                                               :Decide:
******** / pMultiTerm calling someDeep choice                                                                    :Decide:
********* / someDeep                                                                                            :Decide:
********** / manyIndentation/leaf?                                                                             :Decide:
*********** / someDeep first part calls base directly                                                         :Decide:
************ / pNumAsText                                                                                    :Decide:
********** / manyIndentation/deeper; calling someIndentation                                                   :Decide:
*********** / someIndentation                                                                                 :Decide:
************ / myindented: consuming GoDeeper                                                                :Decide:
**** / manyIndentation/deeper; calling someIndentation                                                               :Decide:
***** / someIndentation                                                                                             :Decide:
****** / myindented: consuming GoDeeper                                                                            :Decide:
** / pHornlike                                                                                                         :Decide:
*** / pRuleLabel                                                                                                      :Decide:
*** / pHornlike / permute                                                                                             :Decide:
**** / pHornlike/uponLimb                                                                                            :Decide:
**** / pHornlike/givenLimb                                                                                           :Decide:
**** / pHornlike/someStructure                                                                                       :Decide:
***** / someIndentation                                                                                             :GoDeeper:
****** / myindented: consuming GoDeeper                                                                            :GoDeeper:
****** \ myindented: consuming GoDeeper has returned GoDeeper                                                      :Other "X":
****** / manyIndentation/leaf?                                                                                     :Other "X":
******* / optIndentedTuple                                                                                        :Other "X":
******** / optIndented                                                                                           :Other "X":
********* / pMultiTerm calling someDeep choice                                                                  :Other "X":
********** / someDeep                                                                                          :Other "X":
*********** / manyIndentation/leaf?                                                                           :Other "X":
************ / someDeep first part calls base directly                                                       :Other "X":
************ \ someDeep first part calls base directly has returned "X"                                      :GoDeeper:
************ / someDeep second part calls manyDeep                                                           :GoDeeper:
************* / manyDeep                                                                                    :GoDeeper:
************** / manyDeep calling someDeep                                                                 :GoDeeper:
*************** / someDeep                                                                                :GoDeeper:
**************** / manyIndentation/leaf?                                                                 :GoDeeper:
***************** / someDeep first part calls base directly                                             :GoDeeper:
****************** / pNumAsText                                                                        :GoDeeper:
**************** / manyIndentation/deeper; calling someIndentation                                       :GoDeeper:
***************** / someIndentation                                                                     :GoDeeper:
****************** / myindented: consuming GoDeeper                                                    :GoDeeper:
****************** \ myindented: consuming GoDeeper has returned GoDeeper                              :Is:
****************** / manyIndentation/leaf?                                                             :Is:
******************* / someDeep first part calls base directly                                         :Is:
******************** / pNumAsText                                                                    :Is:
****************** / manyIndentation/deeper; calling someIndentation                                   :Is:
******************* / someIndentation                                                                 :Is:
******************** / myindented: consuming GoDeeper                                                :Is:
************** / someDeep failed, manyDeep defaulting to retun []                                          :GoDeeper:
************** \ someDeep failed, manyDeep defaulting to retun [] has returned []                          :GoDeeper:
************* \ manyDeep has returned []                                                                    :GoDeeper:
************ \ someDeep second part calls manyDeep has returned []                                           :GoDeeper:
*********** \ manyIndentation/leaf? has returned ["X"]                                                        :GoDeeper:
********** \ someDeep has returned ["X"]                                                                       :GoDeeper:
********* \ pMultiTerm calling someDeep choice has returned ["X"]                                               :GoDeeper:
********* / someIndentation                                                                                     :GoDeeper:
********** / myindented: consuming GoDeeper                                                                    :GoDeeper:
********** \ myindented: consuming GoDeeper has returned GoDeeper                                              :Is:
********** / manyIndentation/leaf?                                                                             :Is:
*********** / someIndentation                                                                                 :GoDeeper:
************ / myindented: consuming GoDeeper                                                                :GoDeeper:
************ \ myindented: consuming GoDeeper has returned GoDeeper                                          :Other "Y":
************ / manyIndentation/leaf?                                                                         :Other "Y":
************* / pMultiTerm calling someDeep choice                                                          :Other "Y":
************** / someDeep                                                                                  :Other "Y":
*************** / manyIndentation/leaf?                                                                   :Other "Y":
**************** / someDeep first part calls base directly                                               :Other "Y":
**************** \ someDeep first part calls base directly has returned "Y"                              :GoDeeper:
**************** / someDeep second part calls manyDeep                                                   :GoDeeper:
***************** / manyDeep                                                                            :GoDeeper:
****************** / manyDeep calling someDeep                                                         :GoDeeper:
******************* / someDeep                                                                        :GoDeeper:
******************** / manyIndentation/leaf?                                                         :GoDeeper:
********************* / someDeep first part calls base directly                                     :GoDeeper:
********************** / pNumAsText                                                                :GoDeeper:
******************** / manyIndentation/deeper; calling someIndentation                               :GoDeeper:
********************* / someIndentation                                                             :GoDeeper:
********************** / myindented: consuming GoDeeper                                            :GoDeeper:
********************** \ myindented: consuming GoDeeper has returned GoDeeper                      :When:
********************** / manyIndentation/leaf?                                                     :When:
*********************** / someDeep first part calls base directly                                 :When:
************************ / pNumAsText                                                            :When:
********************** / manyIndentation/deeper; calling someIndentation                           :When:
*********************** / someIndentation                                                         :When:
************************ / myindented: consuming GoDeeper                                        :When:
****************** / someDeep failed, manyDeep defaulting to retun []                                  :GoDeeper:
****************** \ someDeep failed, manyDeep defaulting to retun [] has returned []                  :GoDeeper:
***************** \ manyDeep has returned []                                                            :GoDeeper:
**************** \ someDeep second part calls manyDeep has returned []                                   :GoDeeper:
*************** \ manyIndentation/leaf? has returned ["Y"]                                                :GoDeeper:
************** \ someDeep has returned ["Y"]                                                               :GoDeeper:
************* \ pMultiTerm calling someDeep choice has returned ["Y"]                                       :GoDeeper:
************ \ manyIndentation/leaf? has returned ["Y"]                                                      :GoDeeper:
************ / myindented: consuming UnDeeper                                                                :GoDeeper:
********** / manyIndentation/deeper; calling someIndentation                                                   :Is:
*********** / someIndentation                                                                                 :Is:
************ / myindented: consuming GoDeeper                                                                :Is:
********* / pMultiTerm calling someDeep choice                                                                  :Other "X":
********** / someDeep                                                                                          :Other "X":
*********** / manyIndentation/leaf?                                                                           :Other "X":
************ / someDeep first part calls base directly                                                       :Other "X":
************ \ someDeep first part calls base directly has returned "X"                                      :GoDeeper:
************ / someDeep second part calls manyDeep                                                           :GoDeeper:
************* / manyDeep                                                                                    :GoDeeper:
************** / manyDeep calling someDeep                                                                 :GoDeeper:
*************** / someDeep                                                                                :GoDeeper:
**************** / manyIndentation/leaf?                                                                 :GoDeeper:
***************** / someDeep first part calls base directly                                             :GoDeeper:
****************** / pNumAsText                                                                        :GoDeeper:
**************** / manyIndentation/deeper; calling someIndentation                                       :GoDeeper:
***************** / someIndentation                                                                     :GoDeeper:
****************** / myindented: consuming GoDeeper                                                    :GoDeeper:
****************** \ myindented: consuming GoDeeper has returned GoDeeper                              :Is:
****************** / manyIndentation/leaf?                                                             :Is:
******************* / someDeep first part calls base directly                                         :Is:
******************** / pNumAsText                                                                    :Is:
****************** / manyIndentation/deeper; calling someIndentation                                   :Is:
******************* / someIndentation                                                                 :Is:
******************** / myindented: consuming GoDeeper                                                :Is:
************** / someDeep failed, manyDeep defaulting to retun []                                          :GoDeeper:
************** \ someDeep failed, manyDeep defaulting to retun [] has returned []                          :GoDeeper:
************* \ manyDeep has returned []                                                                    :GoDeeper:
************ \ someDeep second part calls manyDeep has returned []                                           :GoDeeper:
*********** \ manyIndentation/leaf? has returned ["X"]                                                        :GoDeeper:
********** \ someDeep has returned ["X"]                                                                       :GoDeeper:
********* \ pMultiTerm calling someDeep choice has returned ["X"]                                               :GoDeeper:
********* / someIndentation                                                                                     :GoDeeper:
********** / myindented: consuming GoDeeper                                                                    :GoDeeper:
********** \ myindented: consuming GoDeeper has returned GoDeeper                                              :Is:
********** / manyIndentation/leaf?                                                                             :Is:
*********** / someIndentation                                                                                 :GoDeeper:
************ / myindented: consuming GoDeeper                                                                :GoDeeper:
************ \ myindented: consuming GoDeeper has returned GoDeeper                                          :Other "Y":
************ / manyIndentation/leaf?                                                                         :Other "Y":
************* / pBoolStructR                                                                                :Other "Y":
************** / rpUnlessGroup                                                                             :Other "Y":
************** / rpAndGroup                                                                                :Other "Y":
*************** / manyIndentation/leaf?                                                                   :Other "Y":
**************** / rpOrGroup                                                                             :Other "Y":
***************** / someIndentation                                                                     :Other "Y":
****************** / myindented: consuming GoDeeper                                                    :Other "Y":
*************** / manyIndentation/deeper; calling someIndentation                                         :Other "Y":
**************** / someIndentation                                                                       :Other "Y":
***************** / myindented: consuming GoDeeper                                                      :Other "Y":
************ / manyIndentation/deeper; calling someIndentation                                               :Other "Y":
************* / someIndentation                                                                             :Other "Y":
************** / myindented: consuming GoDeeper                                                            :Other "Y":
********** / manyIndentation/deeper; calling someIndentation                                                   :Is:
*********** / someIndentation                                                                                 :Is:
************ / myindented: consuming GoDeeper                                                                :Is:
********* / pMultiTerm calling someDeep choice                                                                  :Other "X":
********** / someDeep                                                                                          :Other "X":
*********** / manyIndentation/leaf?                                                                           :Other "X":
************ / someDeep first part calls base directly                                                       :Other "X":
************ \ someDeep first part calls base directly has returned "X"                                      :GoDeeper:
************ / someDeep second part calls manyDeep                                                           :GoDeeper:
************* / manyDeep                                                                                    :GoDeeper:
************** / manyDeep calling someDeep                                                                 :GoDeeper:
*************** / someDeep                                                                                :GoDeeper:
**************** / manyIndentation/leaf?                                                                 :GoDeeper:
***************** / someDeep first part calls base directly                                             :GoDeeper:
****************** / pNumAsText                                                                        :GoDeeper:
**************** / manyIndentation/deeper; calling someIndentation                                       :GoDeeper:
***************** / someIndentation                                                                     :GoDeeper:
****************** / myindented: consuming GoDeeper                                                    :GoDeeper:
****************** \ myindented: consuming GoDeeper has returned GoDeeper                              :Is:
****************** / manyIndentation/leaf?                                                             :Is:
******************* / someDeep first part calls base directly                                         :Is:
******************** / pNumAsText                                                                    :Is:
****************** / manyIndentation/deeper; calling someIndentation                                   :Is:
******************* / someIndentation                                                                 :Is:
******************** / myindented: consuming GoDeeper                                                :Is:
************** / someDeep failed, manyDeep defaulting to retun []                                          :GoDeeper:
************** \ someDeep failed, manyDeep defaulting to retun [] has returned []                          :GoDeeper:
************* \ manyDeep has returned []                                                                    :GoDeeper:
************ \ someDeep second part calls manyDeep has returned []                                           :GoDeeper:
*********** \ manyIndentation/leaf? has returned ["X"]                                                        :GoDeeper:
********** \ someDeep has returned ["X"]                                                                       :GoDeeper:
********* \ pMultiTerm calling someDeep choice has returned ["X"]                                               :GoDeeper:
********* / someIndentation                                                                                     :GoDeeper:
********** / myindented: consuming GoDeeper                                                                    :GoDeeper:
********** \ myindented: consuming GoDeeper has returned GoDeeper                                              :Is:
********** / manyIndentation/leaf?                                                                             :Is:
*********** / whenCase                                                                                        :Is:
********** / manyIndentation/deeper; calling someIndentation                                                   :Is:
*********** / someIndentation                                                                                 :Is:
************ / myindented: consuming GoDeeper                                                                :Is:
****** / manyIndentation/deeper; calling someIndentation                                                           :Other "X":
******* / someIndentation                                                                                         :Other "X":
******** / myindented: consuming GoDeeper                                                                        :Other "X":
** / pRuleLabel                                                                                                        :Decide:

revised parser
  horn-1: should parse horn clause on a single line FAILED [1]

Failures:

  test/Spec.hs:91:3: 
  1) revised parser horn-1: should parse horn clause on a single line
       expected: [[Hornlike {name = ["X"], keyword = Decide, given = Nothing, upon = Nothing, clauses = [HC2 {hHead = RPConstraint ["X"] RPis ["Y"], hBody = Just (Leaf (RPConstraint ["Z"] RPis ["Q"]))}], rlabel = Nothing, lsource = Nothing, srcref = Just (SrcRef {url = "test/Spec", short = "test/Spec", srcrow = 1, srccol = 1, version = Nothing})}]]
       but parsing failed with error:
       1:3:
       unexpected Is
       expecting EOL, GoDeeper, If, Means, Otherwise, or When
       DECIDE X      ✳ IS   Y      WHEN   Z      IS     Q      AND    P      >      NP    
       

  To rerun use: --match "/revised parser/horn-1: should parse horn clause on a single line/"

Randomized with seed 541642562

Finished in 0.0053 seconds
1 example, 1 failure

mp> Test suite mp-test failed
Test suite failure for package mp-0.1.0.0
*   exited with: ExitFailure 1                                                                                         :    mp-test::
Logs printed to console

