mp> test (suite: mp-test, args: --match "/megaparsing/should parse an unconditional/")

* / pRule                                                                                                               :GoDeeper:
** / pRule: unwrapping indentation and recursing                                                                       :GoDeeper:
*** / myindented: consuming GoDeeper                                                                                  :GoDeeper:
*** \ myindented: consuming GoDeeper has returned GoDeeper                                                            :Every:
*** / pRule                                                                                                           :Every:
**** / pRule: unwrapping indentation and recursing                                                                   :Every:
***** / myindented: consuming GoDeeper                                                                              :Every:
**** / pRegRule                                                                                                      :Every:
***** / pRuleLabel                                                                                                  :Every:
***** / pRegRuleSugary                                                                                              :Every:
****** / pMultiTermAka                                                                                             :Every:
******* / pAKA                                                                                                    :Every:
******** / pAKA base                                                                                             :Every:
********* / pMultiTerm calling someDeep choice                                                                  :Every:
********** / someDeep                                                                                          :Every:
*********** / manyIndentation/leaf?                                                                           :Every:
************ / someDeep first part calls base directly                                                       :Every:
************* / pNumAsText                                                                                  :Every:
*********** / manyIndentation/deeper; calling someIndentation                                                 :Every:
************ / someIndentation                                                                               :Every:
************* / myindented: consuming GoDeeper                                                              :Every:
***** / pRegRuleNormal                                                                                              :Every:
****** / permutationsReg                                                                                           :Every:
******* / regulative permutation with deontic-temporal                                                            :Every:
******** / preambleBoolStructR [Unless]                                                                          :Every:
******** / preambleBoolStructR [When,If]                                                                         :Every:
******** / pDT                                                                                                   :Every:
********* / optIndentedTuple                                                                                    :Every:
********** / optIndented                                                                                       :Every:
******** / pActor [Every,Party,TokAll]                                                                           :Every:
********* / someIndentation                                                                                     :GoDeeper:
********** / myindented: consuming GoDeeper                                                                    :GoDeeper:
********** \ myindented: consuming GoDeeper has returned GoDeeper                                              :Other "perso:
********** / manyIndentation/leaf?                                                                             :Other "perso:
*********** / pMultiTermAka                                                                                   :Other "perso:
************ / pAKA                                                                                          :Other "perso:
************* / pAKA base                                                                                   :Other "perso:
************** / pMultiTerm calling someDeep choice                                                        :Other "perso:
*************** / someDeep                                                                                :Other "perso:
**************** / manyIndentation/leaf?                                                                 :Other "perso:
***************** / someDeep first part calls base directly                                             :Other "perso:
***************** \ someDeep first part calls base directly has returned "person"                       :UnDeeper:
***************** / someDeep second part calls manyDeep                                                 :UnDeeper:
****************** / manyDeep                                                                          :UnDeeper:
******************* / manyDeep calling someDeep                                                       :UnDeeper:
******************** / someDeep                                                                      :UnDeeper:
********************* / manyIndentation/leaf?                                                       :UnDeeper:
********************** / someDeep first part calls base directly                                   :UnDeeper:
*********************** / pNumAsText                                                              :UnDeeper:
********************* / manyIndentation/deeper; calling someIndentation                             :UnDeeper:
********************** / someIndentation                                                           :UnDeeper:
*********************** / myindented: consuming GoDeeper                                          :UnDeeper:
******************* / someDeep failed, manyDeep defaulting to retun []                                :UnDeeper:
******************* \ someDeep failed, manyDeep defaulting to retun [] has returned []                :UnDeeper:
****************** \ manyDeep has returned []                                                          :UnDeeper:
***************** \ someDeep second part calls manyDeep has returned []                                 :UnDeeper:
**************** \ manyIndentation/leaf? has returned ["person"]                                         :UnDeeper:
*************** \ someDeep has returned ["person"]                                                        :UnDeeper:
************** \ pMultiTerm calling someDeep choice has returned ["person"]                                :UnDeeper:
************* \ pAKA base has returned ["person"]                                                           :UnDeeper:
************* / manyIndentation/leaf?                                                                       :UnDeeper:
************** / Aka Token                                                                                 :UnDeeper:
************* / manyIndentation/deeper; calling someIndentation                                             :UnDeeper:
************** / someIndentation                                                                           :UnDeeper:
*************** / myindented: consuming GoDeeper                                                          :UnDeeper:
************ \ pAKA has returned ["person"]                                                                  :UnDeeper:
*********** \ pMultiTermAka has returned ["person"]                                                           :UnDeeper:
********** \ manyIndentation/leaf? has returned ["person"]                                                     :UnDeeper:
********** / myindented: consuming UnDeeper                                                                    :UnDeeper:
********** \ myindented: consuming UnDeeper has returned UnDeeper                                              :Must:
********* \ someIndentation has returned ["person"]                                                             :Must:
******** \ pActor [Every,Party,TokAll] has returned (Every,Leaf (("person" :| [],Nothing) :| []))                :Must:
******** / manyIndentation/leaf?                                                                                 :Must:
********* / preambleBoolStructR [Who,Which,Whose]                                                               :Must:
******** / manyIndentation/deeper; calling someIndentation                                                       :Must:
********* / someIndentation                                                                                     :Must:
********** / myindented: consuming GoDeeper                                                                    :Must:
******** / preambleBoolStructR [Unless]                                                                          :Must:
******** / preambleBoolStructR [When,If]                                                                         :Must:
******** / pDT                                                                                                   :Must:
********* / optIndentedTuple                                                                                    :Must:
********** / optIndented                                                                                       :Must:
*********** / someIndentation                                                                                 :Do:
************ / myindented: consuming GoDeeper                                                                :Do:
********** \ optIndented has returned (DMust,Nothing)                                                          :Do:
********* \ optIndentedTuple has returned (DMust,Nothing)                                                       :Do:
******** \ pDT has returned (DMust,Nothing)                                                                      :Do:
******** / preambleBoolStructR [Unless]                                                                          :Do:
******** / preambleBoolStructR [When,If]                                                                         :Do:
******** / pDoAction/Do                                                                                          :Do:
******** \ pDoAction/Do has returned Do                                                                          :GoDeeper:
******** / pDoAction/pAction                                                                                     :GoDeeper:
********* / pAction calling dBoolStructP                                                                        :GoDeeper:
********** / dBoolStructP calling exprP                                                                        :GoDeeper:
*********** / expr pParamText                                                                                 :GoDeeper:
************ / term p / 1:someIndentation                                                                    :GoDeeper:
************* / myindented: consuming GoDeeper                                                              :GoDeeper:
************* \ myindented: consuming GoDeeper has returned GoDeeper                                        :Other "sing":
************* / term p / 1:someIndentation                                                                  :Other "sing":
************** / myindented: consuming GoDeeper                                                            :Other "sing":
************* / term p / 2:pOtherVal                                                                        :Other "sing":
************** / pParamText                                                                                :UnDeeper:
*************** / pParamText(flat) first line: pKeyValues                                                 :UnDeeper:
**************** / pKeyValues                                                                            :UnDeeper:
***************** / someIndentation                                                                     :UnDeeper:
****************** / myindented: consuming GoDeeper                                                    :UnDeeper:
************* / term p / 3:plain p                                                                          :Other "sing":
************** / pParamText                                                                                :Other "sing":
*************** / pParamText(flat) first line: pKeyValues                                                 :Other "sing":
**************** / pKeyValues                                                                            :Other "sing":
***************** / someIndentation                                                                     :Other "sing":
****************** / myindented: consuming GoDeeper                                                    :Other "sing":
************ / term p / 2:pOtherVal                                                                          :GoDeeper:
************ / term p / 3:plain p                                                                            :GoDeeper:
************* / pParamText                                                                                  :GoDeeper:
************** / pParamText(flat) first line: pKeyValues                                                   :GoDeeper:
*************** / pKeyValues                                                                              :GoDeeper:
**************** / someIndentation                                                                       :GoDeeper:
***************** / myindented: consuming GoDeeper                                                      :GoDeeper:
***************** \ myindented: consuming GoDeeper has returned GoDeeper                                :Other "sing":
***************** / manyIndentation/leaf?                                                               :Other "sing":
****************** / someDeepThenMaybe                                                                 :Other "sing":
******************* / someDeepThenMaybe/initial                                                       :Other "sing":
******************* \ someDeepThenMaybe/initial has returned "sing"                                   :UnDeeper:
******************* / going inner                                                                     :UnDeeper:
******************** / someIndentation                                                               :UnDeeper:
********************* / myindented: consuming GoDeeper                                              :UnDeeper:
******************* / going rhs                                                                       :UnDeeper:
******************** / manyThenMaybe/base                                                            :UnDeeper:
********************* / someIndentation                                                             :UnDeeper:
********************** / myindented: consuming GoDeeper                                            :UnDeeper:
******************** \ manyThenMaybe/base has returned ([],Nothing)                                  :UnDeeper:
******************* \ going rhs has returned ([],Nothing)                                             :UnDeeper:
****************** \ someDeepThenMaybe has returned (["sing"],Nothing)                                 :UnDeeper:
***************** \ manyIndentation/leaf? has returned (["sing"],Nothing)                               :UnDeeper:
***************** / myindented: consuming UnDeeper                                                      :UnDeeper:
***************** \ myindented: consuming UnDeeper has returned UnDeeper                                :UnDeeper:
**************** \ someIndentation has returned (["sing"],Nothing)                                       :UnDeeper:
*************** \ pKeyValues has returned ("sing" :| [],Nothing)                                          :UnDeeper:
************** \ pParamText(flat) first line: pKeyValues has returned ("sing" :| [],Nothing)               :UnDeeper:
************** / pParamText(flat) subsequent lines: sameMany pKeyValues                                    :UnDeeper:
*************** / sameMany                                                                                :UnDeeper:
**************** / pKeyValues                                                                            :UnDeeper:
***************** / someIndentation                                                                     :UnDeeper:
****************** / myindented: consuming GoDeeper                                                    :UnDeeper:
*************** \ sameMany has returned []                                                                :UnDeeper:
************** \ pParamText(flat) subsequent lines: sameMany pKeyValues has returned []                    :UnDeeper:
************* \ pParamText has returned ("sing" :| [],Nothing) :| []                                        :UnDeeper:
************ \ term p / 3:plain p has returned MyLeaf (("sing" :| [],Nothing) :| [])                         :UnDeeper:
************ / binary(Or)                                                                                    :UnDeeper:
************ / binary(And)                                                                                   :UnDeeper:
*********** \ expr pParamText has returned MyLeaf (("sing" :| [],Nothing) :| [])                              :UnDeeper:
********** \ dBoolStructP calling exprP has returned Leaf (("sing" :| [],Nothing) :| [])                       :UnDeeper:
********* \ pAction calling dBoolStructP has returned Leaf (("sing" :| [],Nothing) :| [])                       :UnDeeper:
******** \ pDoAction/pAction has returned Leaf (("sing" :| [],Nothing) :| [])                                    :UnDeeper:
******** / preambleBoolStructR [Unless]                                                                          :UnDeeper:
******** / preambleBoolStructR [When,If]                                                                         :UnDeeper:
******* \ regulative permutation with deontic-temporal has returned RuleBody {rbaction = Leaf (("sing" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMust, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Nothing} :UnDeeper:
****** \ permutationsReg has returned RuleBody {rbaction = Leaf (("sing" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMust, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Nothing} :UnDeeper:
****** / pHenceLest-Hence                                                                                          :UnDeeper:
****** / pHenceLest-Lest                                                                                           :UnDeeper:
*****   pRegRuleNormal: permutations returned rulebody RuleBody {rbaction = Leaf (("sing" :| [],Nothing) :| []), rbpbrs = [], rbpbrneg = [], rbdeon = DMust, rbtemporal = Nothing, rbupon = [], rbgiven = [], rbhaving = Nothing, rbkeyname = (Every,Leaf (("person" :| [],Nothing) :| [])), rbwho = Nothing} :UnDeeper:
*****   pRegRuleNormal: the positive preamble is Nothing                                                           :UnDeeper:
*****   pRegRuleNormal: the negative preamble is Nothing                                                           :UnDeeper:
*****   pRegRuleNormal: returning Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Nothing, cond = Nothing, deontic = DMust, action = Leaf (("sing" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing} :UnDeeper:
***** \ pRegRuleNormal has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Nothing, cond = Nothing, deontic = DMust, action = Leaf (("sing" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing} :UnDeeper:
**** \ pRegRule has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Nothing, cond = Nothing, deontic = DMust, action = Leaf (("sing" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing} :UnDeeper:
*** \ pRule has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Nothing, cond = Nothing, deontic = DMust, action = Leaf (("sing" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing} :UnDeeper:
*** / myindented: consuming UnDeeper                                                                                  :UnDeeper:
*** \ myindented: consuming UnDeeper has returned UnDeeper                                                            :EOF:
** \ pRule: unwrapping indentation and recursing has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Nothing, cond = Nothing, deontic = DMust, action = Leaf (("sing" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing} :EOF:
* \ pRule has returned Regulative {subj = Leaf (("person" :| [],Nothing) :| []), keyword = Every, who = Nothing, cond = Nothing, deontic = DMust, action = Leaf (("sing" :| [],Nothing) :| []), temporal = Nothing, hence = Nothing, lest = Nothing, rlabel = Nothing, lsource = Nothing, srcref = Nothing, upon = Nothing, given = Nothing, having = Nothing} :EOF:
* / pRule                                                                                                               :EOF:

megaparsing
  should parse an unconditional

Finished in 0.0034 seconds
1 example, 0 failures

mp> Test suite mp-test passed
