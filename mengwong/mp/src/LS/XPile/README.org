#+TITLE: About Reasoning

What questions do we need to ask the end user?

How do we automatically build various transpilation targets?

* Outputting to a State Graph

See draft state graph at top right of the [[https://docs.google.com/spreadsheets/d/1qMGwFhgPYLm-bmoN2es2orGkTaTN382pG2z3RjZ_s-4/edit?pli=1#gid=0][PDPA DBNO tab]]. 

Our output will be a timed automaton or Petri Net.

Transitions can be
- deadlines :: BEFORE 30 days
- actions :: PDPC demands explanation

To navigate the path, we need to know what happend, and when; that "trace" gives us enough information to navigate to the current state(s).

What facts do we need to gather?

| State1 | Transition | State2 | We must ask          | Then we know                          |
|--------+------------+--------+----------------------+---------------------------------------|
| X      | Deadline   | Y      | did X state hold?    | If deadline was met, go R.            |
|        |            |        | if so, on what date? | If deadline was not, go L.            |
|        |            |        | did Y state hold?    | If deadline is in the future, stay X. |
|        |            |        | if so, on what date? |                                       |
|--------+------------+--------+----------------------+---------------------------------------|
| X      | Action     | Y      | did X state hold?    | Do we stay in X?                      |
|        |            |        | if so, on what date? | Or proceed to state X, Y, or ~Y?      |
|        |            |        | did action occur?    |                                       |
|        |            |        | if so, on what date? |                                       |

Once these questions are answered we have enough information to proceed to the next state, or remain in the current state.

After all enabled transitions have been evaluated we are left with a residual state graph, or a current marking of a Petri Net, that tells us what the current state of the world is.

From this current state of the world we can:
- deduce current obligations
- start to abductively plan for a desired outcome state

* What children follow from a parent state?

| Parent state has deontic | then children are | connector | default   |
|--------------------------+-------------------+-----------+-----------|
| MUST,                    | R: happy path     | HENCE     | FULFILLED |
| SHANT                    | L: unhappy path   | LEST      | BREACH    |
|--------------------------+-------------------+-----------+-----------|
| MAY                      | R: happy path     | HENCE     | FULFILLED |
|                          | L: neutral path   | LEST      | FULFILLED |

A MUST always has two output paths: the happy path goes to the right, and is connected via ~HENCE~. The unhappy path goes to the left, and is connected via ~LEST~. If they are not explicitly given, then by default, the unhappy path is BREACH; the happy path is FULFILLED.

A MAY without an explicit neutral path (where the permitted action is not taken) will, by default, have an implicit neutral to FULFILLED.

* Simple Example

See the test/README.org for pdpadbno-1

* PDPA Notification Example

** Reasoned by Hand

- Given a Data Breach which has previously been determined to be Notifiable,
- what facts would allow the Organisation to not be obligated to send a notification?

This could be considered an exercise in Default Logic because, by default, the Org must send notification.

What exceptions could allow that default to be overridden?

*** Answers                                                                             :spoilers:

**** the data breach occurred only within an organisation                            :act:26_B_4:

This factor is technically part of the determination that the DB is Notifiable; however, because the rule is stated with an UNLESS, people may commonly consider that a DB{N=True} applies due to all the "IF" reasons; and then consider the "UNLESS" reasons as overriding them at a higher level.

In other words, people might say, "Oh, yes, it is a Notifiable Data Breach because of all the positive reasons. But we don't need to actually notify because it also matched the negative reason -- that it was only within an organisation."

So we include this answer here for completeness.

**** you are a Public Agency                                                          :act:4_1_c:

**** the organisation has taken any action to render it unlikely that the notifiable data breach will result in significant harm to the individual :act:26_D_5_a:


**** the organisation already implemented any technological measure to render it unlikely that the notifiable data breach will result in significant harm to the individual :act:26_D_5_b:

**** the PDPC has directed the Organisation not to notify an affected individual   :act:26_D_6_b:

**** any Law Enforcement Agency has advised against notifying affected individuals :act:26_D_6_a:

**** the PDPC waives the requirement in response to written application              :act:26_D_7:

** Visual Representation

Syntax for my little Petri DSL:

First word

- (state) :: round parentheses represent a state
- [transition] :: square brackets represent a transition
- <decision:value> :: angle brackets represent some "nondeterminism" -- multiple possible transitions emerge from a state, with the given value. The happy path is given above the unhappy path.
- <decision> :: without angle brackets is a shorthand for <decision:*>. This is used in the context of a linking arrow
- |   or term
- &   and term

Subsequent words are ~[ dot attributes in square brackets ]~.

Connectors:

- explicit syntax :: (state) -> [transition] -> (state)
- layout syntax :: "child indentation" is equivalent to an arrow between parent and child

Future extension: Maybe use ((initial)) to represent a start state

#+begin_src text
  // start petri dsl "pdpadbno-1" -- see mp/bin/mkpetrinet
    (INITIAL)
      [aware]                                                  [ label = "upon becoming aware a data breach may have occurred" ]
        (is_aware)                                             [ label = "is aware a data breach may have occurred" ]
          [assessment:done]                                    [ label = "within 30 days" ]
            (assessment done)
              <is_notifiable:yes>
                | see NDB Qualification
                ()
                  [notify PDPC:done]                           [ label = "within 3 days" ]
                    (PDPC notified)
                      <exceptions:no>                          
                        ()
                          [notify users:done]                  [ label = "within 3 days" ]
                            (FULFILLED)
                      <exceptions:yes>
                        |     (Act §26D.5)    it is unlikely that the NDB will result in significant harm to the individual
                          |   (Act §26D.5.a)  the organisation has taken any action to render it unlikely that the NDB will result in significant harm to the individual
                          |   (Act §26D.5.b)  the organisation already implemented any technological measure to render it unlikely that the notifiable data breach will result in significant harm to the individual
                        |     (Act §4.1.c)    you are a Public Agency
                        |     (Act §26D.6.a)  the PDPC has directed the Organisation not to notify an affected individual
                        |     (Act §26D.6.b)  a prescribed Law Enforcement Agency has advised against notifying affected individuals
                        |     (Act §26D.7)    the PDPC has waived the requirement in response to written application
                        (FULFILLED)
                  [notify PDPC:not done]
                    (BREACH)
              <is_notifiable:no>
                (FULFILLED)
  
          [assessment:not done]
            (BREACH)
  // end petri dsl
#+end_src

#+begin_src dot
  subgraph states {
    initial;
    is_aware;
    assess_hence;
    assess_lest;
    pdpc_informed;
    users_informed;
    users_ignorant;
    fulfilled;
    breach;
  }

  subgraph transitions {
    aware     [ label = "upon becoming aware a data breach may have occurred" ];
    assess    [ label = "assess if it is a Notifiable Data Breach\nwithin 30 days" ];
    notifiable_yes;
    notifiable_no;
    users_notifiable_yes;
    users_notifiable_no;
  }

  initial -> aware -> is_aware -> assess -> assess_hence;
                                  assess -> assess_lest;

  assess_hence -> notifiable_yes;
  assess_hence -> notifiable_no -> fulfilled;

  have to notify PDPC but not end user if we have taken technological measures

  notifiable_yes -> pdpc_informed -> users_notifiable_yes -> users_informed -> fulfilled;
                                     users_notifiable_yes -> users_ignorant -> breach;
                    pdpc_informed -> users_notifiable_no                    -> fulfilled;



  -}
#+end_src
