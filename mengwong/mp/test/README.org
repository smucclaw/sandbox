#+TITLE: Literate Tests

To export as .csv, put your cursor over the desired table and run ~M-x org-table-export~

Or you can just run, from the ~mp/~ directory,

#+begin_src sh
  make csv
#+end_src

** indented boolean expression under preamble WHO
:PROPERTIES:
:TABLE_EXPORT_FILE: indented-1.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

walks OR runs OR eats OR (drinks AND swallows)

|   | EVERY | person |          |            |
|   | WHO   | walks  |          |            |
|   | OR    | runs   |          |            |
|   | OR    | eats   |          | // comment |
|   | OR    |        | drinks   |            |
|   |       | AND    | swallows |            |
|   | MUST  |        |          |            |
|   | ->    | sing   |          |            |

** indented boolean expression (with checkboxes)
:PROPERTIES:
:TABLE_EXPORT_FILE: indented-1-checkboxes.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

Google Sheets exports checkboxes as booleans. The parser should ignore them.

|   | EVERY |       | person |          |            |
|   | WHO   | TRUE  | walks  |          |            |
|   | OR    | FALSE | runs   |          |            |
|   | OR    | FALSE | eats   |          | // comment |
|   | OR    |       | TRUE   | drinks   |            |
|   |       | AND   | FALSE  | swallows |            |
|   | MUST  |       |        |          |            |
|   | ->    | FALSE | sing   |          |            |

** simple constitutive rule
:PROPERTIES:
:TABLE_EXPORT_FILE: simple-constitutive-1.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

defined terms are T-shaped rules

|       | degustates |
| MEANS | eats       |
| OR    | drinks     |

** simple constitutive rule (with checkboxes)
:PROPERTIES:
:TABLE_EXPORT_FILE: simple-constitutive-1-checkboxes.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

...ignoring checkboxes...

|   |   |       |      |            |   |   |
|   |   | TRUE  |      | degustates |   |   |
|   |   | MEANS | TRUE | eats       |   |   |
|   |   | OR    | TRUE | drinks     |   |   |
|   |   |       |      |            |   |   |

** indented inline constitutive rule
:PROPERTIES:
:TABLE_EXPORT_FILE: indented-2.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

This has the same meaning as the original Waddington example, except the "eats or drinks" is labelled as the defined term "degustates". And we change "drinks" to "imbibes" ...

|   | EVERY | person |            |
|   | WHO   | walks  |            |
|   | AND   |        | degustates |
|   |       | MEANS  | eats       |
|   |       | OR     | imbibes    |
|   | MUST  |        |            |
|   | ->    | sing   |            |

We parse this into a tree of rules; other rules are now welcome to refer to this defined term as well.

#+begin_src haskell
  [ Regulative
      { every = "person"
      , who = All
          ( Pre "Who" )
          [ Leaf "walks"
          , Leaf "degustates"
          ]
      , deontic = DMust
      , action = "sing"
      , temporal = Nothing
      }
  , Constitutive
      { term = "degustates"
      , cond = Any
          ( Pre "any of:" )
          [ Leaf "eats"
          , Leaf "imbibes"
          ]
      }
  ]
#+end_src

What does "imbibes" mean, anyway?

** multiple nestings
:PROPERTIES:
:TABLE_EXPORT_FILE: indented-3.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

And we further nest a definition for "imbibes".

|   | EVERY | person     |         |          |
|   | WHO   | walks      |         |          |
|   | AND   | degustates |         |          |
|   |       | MEANS      | eats    |          |
|   |       | OR         | imbibes |          |
|   |       |            | MEANS   | drinks   |
|   |       |            | AND     | swallows |
|   |       |            | OR      | spits    |
|   | MUST  | sing       |         |          |

We parse this into a tree of rules; other rules are now welcome to refer to this defined term as well.

Note the defined terms in this example have moved one cell left to more natural positions.

** what happens if everything is on one line?
:PROPERTIES:
:TABLE_EXPORT_FILE: experiment-oneline.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

|   | degustates | MEANS | eats | AND | drinks | OR | farts |

** Multiple Preambles and BoolRules
:PROPERTIES:
:TABLE_EXPORT_FILE: multiple-preambles.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

Preambles are:
- WHO
- WHEN
- IF
- UNLESS

*** Subject Qualifier BoolStructs

Immediately after the PARTY or EVERY line, a single WHO preamble may appear, followed by a BoolStruct. The BoolStruct applies to the entity who is the subject of the rule.

We have seen this form above.

*** General Boolstructs

Anywhere else in the stanza, a WHEN, IF, or UNLESS preamble, may appear, followed by a BoolStruct. Such BoolStructs apply generally -- they do not refer to the entity.

Below we use pilcrows to set off two stanzas which are identical but for permutation.

| EVERY  | person              |   |       |                     |
| WHO    | walks               |   |       |                     |
| AND    | eats                |   |       |                     |
| OR     | drinks              |   |       |                     |
| MUST   |                     |   |       |                     |
| WHEN   | Saturday            |   |       |                     |
| ->     | sing                |   |       |                     |
|        |                     |   |       |                     |
| EVERY  | person              |   |       |                     |
| WHO    | walks               |   |       |                     |
| AND    | eats                |   |       |                     |
| OR     | drinks              |   |       |                     |
| MUST   |                     |   |       |                     |
| ->     | sing                |   |       |                     |
| UNLESS | quietHours          |   |       |                     |
|        |                     |   |       |                     |
| EVERY  | person              | ¶ | EVERY | person              |
| WHO    | walks               | ¶ | WHO   | walks               |
| AND    | eats                | ¶ | AND   | eats                |
| OR     | drinks              | ¶ | OR    | drinks              |
| MUST   |                     | ¶ | MUST  |                     |
| IF     | the King so desires | ¶ | ->    | sing                |
| ->     | sing                | ¶ | IF    | the King so desires |
|        |                     |   |       |                     |
| EVERY  | person              |   |       |                     |
| WHO    | walks               |   |       |                     |
| AND    | eats                |   |       |                     |
| OR     | drinks              |   |       |                     |
| MUST   |                     |   |       |                     |
| IF     | the King wishes     |   |       |                     |
| ->     | sing                |   |       |                     |
| UNLESS | the Queen forbids   |   |       |                     |
|        |                     |   |       |                     |


** different kinds of conditions
:PROPERTIES:
:TABLE_EXPORT_FILE: if-king-wishes-1.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| EVERY | person          |    |                                                     |
| WHO   | walks           |    |                                                     |
| AND   | eats            |    |                                                     |
| MUST  |                 |    |                                                     |
| IF    | the King wishes | // | scope quantification slightly different vs 4        |
| ->    | sing            | // | suggests that the King is consulted for each person |

** with multiple preambleBoolRules
:PROPERTIES:
:TABLE_EXPORT_FILE: if-king-wishes-queen.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| EVERY | person                   |
| WHO   | walks                    |
| AND   | eats                     |
| MUST  |                          |
| IF    | the King wishes          |
| WHEN  | the Queen is not looking |
| ->    | sing                     |

** in a different order 2
:PROPERTIES:
:TABLE_EXPORT_FILE: if-king-wishes-2.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| EVERY | person          |   |   |
| WHO   | walks           |   |   |
| AND   | eats            |   |   |
| MUST  |                 |   |   |
| ->    | sing            |   |   |
| IF    | the King wishes |   |   |

** in a different order again 3
:PROPERTIES:
:TABLE_EXPORT_FILE: if-king-wishes-3.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| EVERY | person          |   |   |
| WHO   | walks           |   |   |
| AND   | eats            |   |   |
| IF    | the King wishes |   |   |
| MUST  |                 |   |   |
| ->    | sing            |   |   |

** in a different order again 4
:PROPERTIES:
:TABLE_EXPORT_FILE: if-king-wishes-4.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

Let's not allow this form:

| IF    | the King wishes | // | suggests that the King is consulted once, for all people |
| EVERY | person          |    |                                                          |
| WHO   | walks           |    |                                                          |
| AND   | eats            |    |                                                          |
| MUST  |                 |    |                                                          |
| ->    | sing            |    |                                                          |

Because this is really more of a meta-rule situation.

| IF   | the King wishes |        | // we could call this a meta-rule relation |
| THEN | EVERY           | person |                                            |
|      | WHO             | walks  |                                            |
|      | AND             | eats   |                                            |
|      | MUST            |        |                                            |
|      | ->              | sing   |                                            |

Let's not support this case 4 until we have a more principled approach to meta-rule relationships. Then we can put in IF/THEN/ELSE for a closed-world binary logic? and IF/THEN/ELSE/SHRUG for a Maybe Ternary lol

** chained regulatives
:PROPERTIES:
:TABLE_EXPORT_FILE: chained-regulatives.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| EVERY | person          |       |        |        |
| WHO   | walks           |       |        |        |
| AND   | eats            |       |        |        |
| MUST  |                 |       |        |        |
| IF    | the King wishes |       |        |        |
| ->    | sing            |       |        |        |
| HENCE | PARTY           | King  |        |        |
|       | MAY             | pay   |        |        |
|       | AFTER           | 20    | min    |        |
| LEST  | Singer          | MUST  | BEFORE | 1 | supper |
|       |                 | ->    | pay    |        |

*** do the individual components work?

do the individual components work?

**** the king part
:PROPERTIES:
:TABLE_EXPORT_FILE: chained-regulatives-part1.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| PARTY | King  |     |
| MAY   | pay   |     |
| AFTER | 20    | min |

**** the singer part
:PROPERTIES:
:TABLE_EXPORT_FILE: chained-regulatives-part2.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| Singer | MUST | BEFORE | 1 | supper |
|        | ->   | pay    |   |        |

** chained regulatives with action params
:PROPERTIES:
:TABLE_EXPORT_FILE: action-params-singer.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| Singer | MUST | BEFORE | 1 | supper   |
|        | ->   | pay    |          |
|        |      | to     | the King |
|        |      | amount | $20      |

** Alternative Arrangements of Temporals and Actions
*** may pay after time
:PROPERTIES:
:TABLE_EXPORT_FILE: chained-regulatives-part1-alternative-1.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| PARTY | King  |  |
| MAY   | pay   |  |
| AFTER | 20    | min |

*** may after time pay
:PROPERTIES:
:TABLE_EXPORT_FILE: chained-regulatives-part1-alternative-2.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| PARTY | King  |    |     |
| MAY   | AFTER | 20 | min |
| ->    | pay   |    |     |

*** party after may time
:PROPERTIES:
:TABLE_EXPORT_FILE: chained-regulatives-part1-alternative-3.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| PARTY | King  |     |
| AFTER | 20    | min |
| MAY   | pay   |     |

*** party may, no time
:PROPERTIES:
:TABLE_EXPORT_FILE: chained-regulatives-part1-alternative-4.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| PARTY | King |
| MAY   | pay  |

** simple natural language aliases
:PROPERTIES:
:TABLE_EXPORT_FILE: nl-aliases.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| EVERY | person          | AKA | singer |
| WHO   | walks           |     |        |
| AND   | eats            |     |        |
| MUST  |                 |     |        |
| IF    | the King wishes |     |        |
| ->    | sing            |     |        |

** vague temporal spec
:PROPERTIES:
:TABLE_EXPORT_FILE: t-vaguely.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| EVERY | person          | AKA | singer |
| WHO   | walks           |     |        |
| AND   | eats            |     |        |
| MUST  | sooner or later |     |        |
| IF    | the King wishes |     |        |
| ->    | sing            |     |        |

** stanzas interrupted by blank lines
:PROPERTIES:
:TABLE_EXPORT_FILE: blank-lines.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

|                                                     |                 |          |        |
| A paragraph with irrelevant text should be ignored. |                 | Like so. |        |
|                                                     |                 |          |        |
|                                                     |                 |          |        |
| EVERY                                               | person          | AKA      | singer |
| WHO                                                 | walks           |          |        |
| AND                                                 | eats            |          |        |
| MUST                                                |                 |          |        |
|                                                     |                 |          |        |
|                                                     |                 |          |        |
| IF                                                  | the King wishes |          |        |
| ->                                                  | sing            |          |        |

** qualifying person
:PROPERTIES:
:TABLE_EXPORT_FILE: qualifying-person.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| EVERY | Qualifying Person | AKA   | QP |
|       | MEANS             | walks |    |
|       | AND               | eats  |    |
| MUST  |                   |       |    |
| ->    | sing              |       |    |

** legislative source citations
:PROPERTIES:
:TABLE_EXPORT_FILE: source-citations.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| (Act 1) | EVERY | person          |   |
|         | WHO   | walks           |   |
| (Act 2) | AND   | eats            |   |
|         | MUST  |                 |   |
| (Act 3) | IF    | the King wishes |   |
|         | ->    | sing            |   |

** Stanza Extraction
:PROPERTIES:
:TABLE_EXPORT_FILE: extract-potatoes.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

Suppose we downloaded as CSV an entire spreadsheet containing multiple stanzas. How do parse only the relevant bits?

|   | EVERY    | person |                |          |         |   |   |
|   | WHO      | walks  |                |          |         |   |   |
|   | AND      | eats   |                |          |         |   |   |
|   | OR       | drinks |                |          |         |   |   |
|   | MUST     |        |                |          |         |   |   |
|   | ->       | sing   |                |          |         |   |   |
|   |          |        |                |          |         |   |   |
|   | we add a | line   | to separate    | the      | stanzas |   |   |
|   |          |        |                |          |         |   |   |
|   |          | EVERY  | person         |          |         |   |   |
|   |          | MAY    | AFTER          | lunch    |         |   |   |
|   |          | ->     | eat potato     |          |         |   |   |
|   |          | WHEN   | tasty(potato)  |          |         |   |   |
|   |          | UNLESS | green(potato)  |          |         |   |   |
|   |          |        |                |          |         |   |   |
|   | we add a | line   | to separate    | the      | stanzas |   |   |
|   |          |        |                |          |         |   |   |
|   | You      | MUST   | BEFORE         | midnight |         |   |   |
|   |          | ->     | discard potato |          |         |   |   |
|   |          | WHEN   | green(potato)  |          |         |   |   |
|   |          |        |                |          |         |   |   |
|   |          |        |                |          |         |   |   |


** The ~Unless~ preamble
:PROPERTIES:
:TABLE_EXPORT_FILE: /dev/null
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

*** UNLESS for entity qualification vs for regular conditionals

The preamble ~WHO~ introduces a Boolean structure which qualifies the party.

The preamble ~IF~ introduces a Boolean structure which qualifies preconditions generally.

The preamble ~UNLESS~ is like ~IF~, but reversed.

What preamble do we use to reverse a WHO? Let's use the keyword ~EXCEPT~ for now.

|          | qualifies party | qualifies preconditions generally |
| positive | WHO             | IF / WHEN                         |
| negative | EXCEPT          | UNLESS                            |

*** Unless /in/ the tail
:PROPERTIES:
:TABLE_EXPORT_FILE: bob-tail-1.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

|        | Bob's your uncle             |
| MEANS  | Bob is your mother's brother |
| OR     | Bob is your father's brother |
| UNLESS | Bob is estranged             |

if ((morbror or farbror) and not estranged)

*** You can't have an UNLESS being the head of a constitutive rule -- it has to be MEANS or UNLESS or IS
:PROPERTIES:
:TABLE_EXPORT_FILE: bob-head-1.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

|       | Bob's your uncle |                  |
| MEANS | NOT              | Bob is estranged |
|       | OR               | Bob is dead      |

if (not (estranged or dead))

*** Unless as the only term in a regulative rule
:PROPERTIES:
:TABLE_EXPORT_FILE: unless-regulative-1.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| EVERY  | person         |
| MUST   | sing           |
| UNLESS | day of silence |

*** Unless as the first term in a regulative rule
:PROPERTIES:
:TABLE_EXPORT_FILE: unless-regulative-2.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| EVERY  | person          |
| MUST   | sing            |
| UNLESS | day of silence  |
| IF     | the king wishes |

The intepreter combines two conditions into one: ~if ((not (day of silence)) && (the king wishes))~

*** Unless as the second term in a regulative rule
:PROPERTIES:
:TABLE_EXPORT_FILE: unless-regulative-3.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| EVERY  | person          |
| MUST   | sing            |
| IF     | the king wishes |
| UNLESS | day of silence  |

same as above

*** Unless as a separated first term in a regulative rule
:PROPERTIES:
:TABLE_EXPORT_FILE: unless-regulative-4.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| EVERY  | person          |
| UNLESS | day of silence  |
| MUST   | sing            |
| IF     | the king wishes |

*** Unless as a separated second term in a regulative rule
:PROPERTIES:
:TABLE_EXPORT_FILE: unless-regulative-5.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| EVERY  | person          |
| IF     | the king wishes |
| MUST   | sing            |
| UNLESS | day of silence  |

*** Unless preambles an OR
:PROPERTIES:
:TABLE_EXPORT_FILE: unless-regulative-6.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| EVERY  | person          |
| IF     | the king wishes |
| MUST   | sing            |
| UNLESS | day of silence  |
| OR     | day of mourning |

*** Unless preambles an AND
:PROPERTIES:
:TABLE_EXPORT_FILE: unless-regulative-7.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| EVERY  | person                   |
| IF     | the king wishes          |
| MUST   | sing                     |
| UNLESS | day of mourning          |
| AND    | mourning forbids singing |

** NOT is a thing

*** Should be the same as an IF NOT (joined):
:PROPERTIES:
:TABLE_EXPORT_FILE: ifnot-1-joined.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| EVERY  | person         |
| MUST   | sing           |
| IF NOT | day of silence |

*** Should be the same as an IF NOT (separated):
:PROPERTIES:
:TABLE_EXPORT_FILE: ifnot-2-separate.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| EVERY | person |                |
| MUST  | sing   |                |
| IF    | NOT    | day of silence |

How does this interact with our indentation syntax?

*** Maybe IF NOT indentation binds looser than AND
:PROPERTIES:
:TABLE_EXPORT_FILE: ifnot-3-undefined.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| EVERY | person |                         |         |
| MUST  | sing   |                         |         |
| IF    | NOT    | day of silence          |         |
|       | AND    | observance is mandatory |         |

This could trigger an error, forcing the user to choose one of the explicit forms below.

(Right now it matches 4 immediately below, we are being lenient.)

If we get around to https://github.com/smucclaw/sandbox/issues/33 we can revisit this and outlaw it.

*** Maybe IF NOT indentation is required to appear at its own level to reduce human error
:PROPERTIES:
:TABLE_EXPORT_FILE: ifnot-4-indentation-explicit.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| EVERY | person |     |                         |
| MUST  | sing   |     |                         |
| IF    | NOT    |     | day of silence          |
|       |        | AND | observance is mandatory |

We already squash AND and OR to the same column, even though they have different precedence, so maybe we should force NOT to be explicit.

*** Maybe IF NOT indentation is required to appear at its own level to reduce human error
:PROPERTIES:
:TABLE_EXPORT_FILE: ifnot-5-indentation-explicit.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| EVERY | person      |                |
| MUST  | sing        |                |
| IF    | NOT         | day of silence |
| AND   | day of song |                |

Moving the AND to the level of the IF is an accepted and common form.



** The semantics of GIVEN and HAVING

Currently GIVEN is a boolstruct / boolrules thingy that has happened previously

maybe we want it to be a ParamText instead?

*** Given in a simple constitutive rule
:PROPERTIES:
:TABLE_EXPORT_FILE: given-consti-1.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

We look back in the history:

|       | songFee    |    |      |
| GIVEN | songLength |    |      |
| WHEN  | songLength | >= | 2min |
| IS    | $200       |    |      |
|       |            |    |      |
| but   |            |    |      |
|       |            |    |      |
|       | songFee    |    |      |
| GIVEN | songLength | <  | 2min |
| IS    | $100       |    |      |

*** HAVING
:PROPERTIES:
:TABLE_EXPORT_FILE: /dev/null
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

How about we then make HAVING be the ParamText that refers to something in the trace also?

| GIVEN  | tax rate   | :: | Number |
|        | income     | :: | Number |
|        |            |    |        |
| DEFINE | payableTax | :: | Float  |
| IS     | tax rate   | *  | income |

**** Simple Having
:PROPERTIES:
:TABLE_EXPORT_FILE: having-1.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| EVERY  | Party      |                  |      |
| HAVING | sung       |                  |      |
|        | songLength | >=               | 2min |
| MAY    | claim      | songFee          |      |
|        | amount     | $10 * songLength |      |

** Tracking citations and sources

In the spreadsheet we allow a prefix on each line that shows the source of the legislation.

To handle this we may need to augment our types so that each bit of logic can be annotated with a source Text.Text.



* Ontology
:PROPERTIES:
:TABLE_EXPORT_FILE: define-1.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

|   | DEFINE | Chirality |       |           |           |
|   | ONE OF | Left      |       |           |           |
|   |        | Right     |       |           |           |
|   |        |           |       |           |           |
|   | so     | now we    | can   |           |           |
|   |        |           |       |           |           |
|   | DEFINE | Hand      | ::    | Chirality |           |
|   |        |           |       |           |           |
|   | ;      |           |       |           |           |
|   |        |           |       |           |           |
|   | DEFINE | Arm       | ::    | Chirality |           |
|   |        |           |       |           |           |
|   | ;      |           |       |           |           |
|   |        |           |       |           |           |
|   | DEFINE | Sign      |       |           |           |
|   | ONE OF | Rock      |       |           |           |
|   |        | Scissors  |       |           |           |
|   |        | Paper     |       |           |           |
|   |        |           |       |           |           |
|   | ;      |           |       |           |           |
|   |        |           |       |           |           |
|   | DEFINE | Name      | IS    | A         | String    |
|   |        |           |       |           |           |
|   | ;      |           |       |           |           |
|   |        |           |       |           |           |
|   | DEFINE | BirthYear | IS    | A         | Number    |
|   |        |           |       |           |           |
|   | ;      |           |       |           |           |
|   |        |           |       |           |           |
|   | DEFINE | Player    | IS    | AN        | Entity    |
|   | HAS    | yearBorn  | IS    | A         | BirthYear |
|   |        | fullName  | IS    | A         | Name      |
|   |        | dynamic   | --    | untyped!  |           |
|   |        |           |       |           |           |
|   | ;      |           |       |           |           |
|   |        |           |       |           |           |
|   |        |           | beats |           |           |
|   | MEANS  | rock      | beats | scissors  |           |
|   |        | paper     | beats | rock      |           |
|   |        | scissors  | beats | paper     |           |
|   |        |           |       |           |           |


** GIVEN ... DEEM
:PROPERTIES:
:TABLE_EXPORT_FILE: define-2.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

optional Given ParamText
permute
  required Deem ParamText
  optional BoolStruct [If,When]

|   |       |               |       |    |      |
|   | GIVEN | x             | y     | :: | Sign |
|   | DEEM  | x             | beats | y  |      |
|   | WHEN  | x == Rock     |       |    |      |
|   | AND   | y == Scissors |       |    |      |

creates a Constitutive Rule; the "assig" (assignment) is "deem".

** Constitutive Rule syntax

Normally we have X MEANS Y

Y could be a boolstruct

#+begin_example
  degustates
       MEANS eats
          OR drinks
#+end_example

but it could be something else:

#+begin_example
    Maximum Number Of People AKA MaxPeople
                       MEANS 500
#+end_example

so let's try parsing as a boolrule and if that doesn't work we just shoehorn it into a paramtext.

** More Deem Syntax
:PROPERTIES:
:TABLE_EXPORT_FILE: define-3.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

what if we say
|       |         |   |    |        |
| GIVEN | x       | y | :: | Number |
| DEEM  | product |   |    |        |
| MEANS | x       | * | y  |        |
|       |         |   |    |        |



** defeating
:PROPERTIES:
:TABLE_EXPORT_FILE: define-4.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:


| GIVEN | Player1        |         |   | Player2        | :: | Player |
| DEEM  | Player1        | defeats |   | Player2        |    |        |
| WHEN  | Player1.choice | beats   |   | Player2.choice |    |        |
        
** Pilcrows
:PROPERTIES:
:TABLE_EXPORT_FILE: pilcrows-1.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

| EVERY  | person         |  | ¶ | | EVERY | person      |                |
| MUST   | sing           |  | ¶ | | MUST  | sing        |                |
| IF NOT | day of silence |  | ¶ | | IF    | NOT         | day of silence |
|        |                |  | ¶ | | AND   | day of song |                |

*** Harder Pilcrows
:PROPERTIES:
:TABLE_EXPORT_FILE: pilcrows-2.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:


| (Act §26C.3)   | EVERY  | Data Intermediary                                                                     |                                            | AKA | You |   | ¶ | (Act §26E)   | EVERY | Data Intermediary                                                               |                                             | AKA | You |
| (Act §26C.3)   | UNLESS | you are processing personal data on behalf of and for the purposes of a public agency |                                            |     |     |   | ¶ | (Act §26E)   | WHICH | processes personal data on behalf of and for the purposes of a public agency    |                                             |     |     |
| (Act §26C.2)   | MUST   | without undue delay                                                                   |                                            |     |     |   | ¶ | (Act §26E)   | MUST  | without undue delay                                                             |                                             |     |     |
| (Act §26C.2)   | UPON   | becoming aware a data breach involving a client Organisation may have occurred        |                                            |     |     |   | ¶ | (Act §26C.2) | UPON  | becoming aware a data breach involving a client public agency may have occurred |                                             |     |     |
| (Act §26C.1)   | WHEN   | the data breach occurs on or after the date of commencement of PDP(A)A 2020 §13       |                                            |     |     |   | ¶ |              |       |                                                                                 |                                             |     |     |
| (Act §26C.3.a) | ➔      | notify                                                                                | the Organisation for which you act as a DI |     |     |   | ¶ | (Act §26E)   | ➔     | notify                                                                          | the public agency for which you act as a DI |     |     |
|                |        |                                                                                       |                                            |     |     |   |   |              |       |                                                                                 |                                             |     |     |
|                |        |                                                                                       |                                            |     |     |   |   |              |       |                                                                                 |                                             |     |     |

** Rule Groups and Rule Labels
:PROPERTIES:
:TABLE_EXPORT_FILE: rulelabels.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

|              |   |   | §     | Notification                                                                    |          |                                   |     |         |                                  |         |               |
|              |   |   |       |                                                                                 |          |                                   |     |         |                                  |         |               |
|              |   |   |       | this is part of a rule group                                                    |          |                                   |     |         |                                  |         |               |
|              |   |   |       |                                                                                 |          |                                   |     |         |                                  |         |               |
|              |   |   | §§    | to PDPC                                                                         |          |                                   |     |         |                                  |         |               |
| (Act §26C.2) |   |   | EVERY | Organisation                                                                    |          |                                   |     | ("you") |                                  |         |               |
| (Act §4.1.c) |   |   | WHO   | is                                                                              | not      | a Public Agency                   |     |         |                                  |         |               |
| (Act §26C.2) |   |   | MUST  | WITHIN                                                                          |          | 30 days                           |     |         |                                  |         |               |
| (Act §26C.2) |   |   | UPON  | becoming aware a data breach may have occurred                                  |          |                                   |     |         |                                  |         |               |
| (Act §26C.1) |   |   | WHEN  | the data breach occurs on or after the date of commencement of PDP(A)A 2020 §13 |          |                                   |     |         |                                  |         |               |
| (Act §26C.2) |   |   | ➔     |                                                                                 | assess   | if it is a Notifiable Data Breach |     |         |                                  |         |               |
|              |   |   | HENCE | Notification                                                                    |          |                                   |     |         |                                  |         |               |
| (AdvG §20.4) |   |   | LEST  |                                                                                 | the PDPC | MAY                               |     |         |                                  |         |               |
| (AdvG §20.4) |   |   |       |                                                                                 |          | ➔                                 |     | demand  | an explanation for your inaction |         |               |
| (AdvG §20.4) |   |   |       |                                                                                 |          | HENCE                             | you | MUST    |                                  |         |               |
| (AdvG §20.4) |   |   |       |                                                                                 |          |                                   |     | ➔       |                                  | respond |               |
| (AdvG §20.4) |   |   |       |                                                                                 |          |                                   |     |         |                                  | to      | the PDPC      |
| (AdvG §20.4) |   |   |       |                                                                                 |          |                                   |     |         |                                  | about   | your inaction |

** Nested Or Group with pre/post labels

*** with pre
:PROPERTIES:
:TABLE_EXPORT_FILE: nested-or-pre.csv
:TABLE_EXPORT_FORMAT: orgtbl-to-csv
:END:

|       | degustates                          |       |
| MEANS | eats                                |       |
| OR    | drinking, meaning any of the below: |       |
|       |                                     | sips  |
|       | OR                                  | chugs |

