TASys
    { annotOfSys = ()
    , nameOfTASys = "Unknown name"
    , declsOfSys = []
    , channelsOfSys = [ "Notification" ]
    , automataOfSys =
        [ TA
            { annotOfTA = ()
            , nameOfTA = "Assessment"
            , locsOfTA =
                [ Loc
                    { nameOfLoc = "Initial" }
                , Loc
                    { nameOfLoc = "Upon_becoming_aware_a_data_breach_may_have_occurred" }
                , Loc
                    { nameOfLoc = "RuleTriggers" }
                , Loc
                    { nameOfLoc = "Sucess" }
                , Loc
                    { nameOfLoc = "Breach" }
                , Loc
                    { nameOfLoc = "TimeConstraintSatisfied" }
                ]
            , clocksOfTA =
                [ Clock
                    { nameOfClock = "timeAssessment" }
                ]
            , transitionsOfTA =
                [ Transition
                    { sourceOfTransition = Loc
                        { nameOfLoc = "Initial" }
                    , guardOfTransition = TransitionGuard [] Nothing
                    , syncOfTransition = Nothing
                    , actionOfTransition = TransitionAction
                        [ Clock
                            { nameOfClock = "timeAssessment" }
                        ]
                        ( Skip () )
                    , targetOfTransition = Loc
                        { nameOfLoc = "Upon_becoming_aware_a_data_breach_may_have_occurred" }
                    }
                , Transition
                    { sourceOfTransition = Loc
                        { nameOfLoc = "Upon_becoming_aware_a_data_breach_may_have_occurred" }
                    , guardOfTransition = TransitionGuard []
                        ( Just
                            ( VarE
                                { annotOfExpr = ()
                                , varOfExprVarE = GlobalVar
                                    { nameOfVar = QVarName
                                        { annotOfQVarName = ()
                                        , nameOfQVarName = "the_data_breach_occurs_on_or_after_the_date_of_commencement_of_PDP_A_A_2020__13"
                                        }
                                    }
                                }
                            )
                        )
                    , syncOfTransition = Nothing
                    , actionOfTransition = TransitionAction []
                        ( Skip () )
                    , targetOfTransition = Loc
                        { nameOfLoc = "RuleTriggers" }
                    }
                , Transition
                    { sourceOfTransition = Loc
                        { nameOfLoc = "Upon_becoming_aware_a_data_breach_may_have_occurred" }
                    , guardOfTransition = TransitionGuard []
                        ( Just
                            ( UnaOpE
                                { annotOfExpr = ()
                                , unaOpOfExprUnaOpE = UBool UBnot
                                , subEOfExprUnaOpE = VarE
                                    { annotOfExpr = ()
                                    , varOfExprVarE = GlobalVar
                                        { nameOfVar = QVarName
                                            { annotOfQVarName = ()
                                            , nameOfQVarName = "the_data_breach_occurs_on_or_after_the_date_of_commencement_of_PDP_A_A_2020__13"
                                            }
                                        }
                                    }
                                }
                            )
                        )
                    , syncOfTransition = Nothing
                    , actionOfTransition = TransitionAction []
                        ( Skip () )
                    , targetOfTransition = Loc
                        { nameOfLoc = "Sucess" }
                    }
                , Transition
                    { sourceOfTransition = Loc
                        { nameOfLoc = "RuleTriggers" }
                    , guardOfTransition = TransitionGuard
                        [ ClConstr
                            ( Clock
                                { nameOfClock = "timeAssessment" }
                            ) BClte 30
                        ] Nothing
                    , syncOfTransition = Nothing
                    , actionOfTransition = TransitionAction []
                        ( Skip () )
                    , targetOfTransition = Loc
                        { nameOfLoc = "TimeConstraintSatisfied" }
                    }
                , Transition
                    { sourceOfTransition = Loc
                        { nameOfLoc = "RuleTriggers" }
                    , guardOfTransition = TransitionGuard
                        [ ClConstr
                            ( Clock
                                { nameOfClock = "timeAssessment" }
                            ) BCgt 30
                        ] Nothing
                    , syncOfTransition = Nothing
                    , actionOfTransition = TransitionAction []
                        ( Skip () )
                    , targetOfTransition = Loc
                        { nameOfLoc = "Breach" }
                    }
                ]
            , urgentLocsOfTA = []
            , initialLocOfTA = Loc
                { nameOfLoc = "Initial" }
            , invarsOfTA = []
            , labellingOfTA = []
            }
        ]
    }
chan Notification;
process Assessment () {
    clock timeAssessment;
    state
        Initial,
        Upon_becoming_aware_a_data_breach_may_have_occurred,
        RuleTriggers,
        Sucess,
        Breach,
        TimeConstraintSatisfied
        ;

    init Initial;
    trans
        Initial -> Upon_becoming_aware_a_data_breach_may_have_occurred {   assign timeAssessment = 0; },
        Upon_becoming_aware_a_data_breach_may_have_occurred -> RuleTriggers { guard True  &&  the_data_breach_occurs_on_or_after_the_date_of_commencement_of_PDP_A_A_2020__13 ;   },
        Upon_becoming_aware_a_data_breach_may_have_occurred -> Sucess { guard True  &&  (not  the_data_breach_occurs_on_or_after_the_date_of_commencement_of_PDP_A_A_2020__13) ;   },
        RuleTriggers -> TimeConstraintSatisfied { guard timeAssessment <= 30 ;   },
        RuleTriggers -> Breach { guard timeAssessment > 30 ;   }
        ;
    }
system Assessment;
[ Regulative
    { subj = Leaf
        (
            ( "Organisation" :| []
            , Nothing
            ) :| []
        )
    , keyword = Every
    , who = Just
        ( Leaf
            (
                ( "is" :|
                    [ "not"
                    , "a Public Agency"
                    ]
                , Nothing
                ) :| []
            )
        )
    , cond = Just
        ( Leaf
            (
                ( "the data breach occurs on or after the date of commencement of PDP(A)A 2020 ยง13" :| []
                , Nothing
                ) :| []
            )
        )
    , deontic = DMust
    , action = Leaf
        (
            ( "assess" :| [ "if it is a Notifiable Data Breach" ]
            , Nothing
            ) :| []
        )
    , temporal = Just
        ( TemporalConstraint TBefore 30 "days" )
    , hence = Just
        ( RuleAlias "Notification" )
    , lest = Nothing
    , rlabel = Just
        ( "ยง"
        , 1
        , "Assessment"
        )
    , lsource = Nothing
    , srcref = Nothing
    , upon =
        [ Leaf
            (
                ( "becoming aware a data breach may have occurred" :| []
                , Nothing
                ) :| []
            )
        ]
    , given = Nothing
    , having = Nothing
    , orig = []
    }
]
