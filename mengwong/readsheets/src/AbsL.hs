-- Haskell data types for a science-fictional L4.
-- originally from smucclaw/dsl/bnfc/src-bnfc/AbsL.hs
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

module AbsL where

import Prelude (Char, Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype YYYYMMDD = YYYYMMDD String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype YYYYMMDDTHHMM = YYYYMMDDTHHMM String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype TrueBool = TrueBool String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype FalseBool = FalseBool String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype NothingBl = NothingBl String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype UIdent = UIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

data Rule = Rule RuleDef RuleName Asof MetaLimb RuleBody
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RuleDef = RID ObjAttr | RNumID Integer ObjAttr | RNum Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RuleName = RName OptLangStrings
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OptLangStrings
    = OptLangStrings1 | OptLangStringsLangStrings LangStrings
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RuleBody
    = RuleDeem GivenUpon [DefineLimb] WhenHenceWhere
    | RModal GivenUpon ModalLimb WhenHenceWhere
    | RulePerform GivenUpon PartyLimb PerformWord [ConstraintComma] WithLimb WhenHenceWhere
    | RMatch [MatchVars]
    | RBNoop
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data GivenUpon
    = GU0 | GUGiven GivenLimb UponLimb | GUUpon UponLimb GivenLimb
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data WhenHenceWhere = WHW WhenLimb HenceLimb WhereLimb
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DefineLimb
    = DefLimb DefineWord [ConstraintComma] WithLimb Asof
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DefineWord = DefDefine | DefDeem | DefDeclare | DefEntity
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ModalLimb = MD1 PartyLimb DeonticLimb DeadlineLimb
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PartyLimb = Parties OptAsAlias | PartyLimb PartyDef OptAsAlias
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PartyDef = PSome ObjAttr | PEvery PEvery | PNobody PNobody
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PEvery
    = PEvery_EVERYBODY
    | PEvery_ANYBODY
    | PEvery_EVERYONE
    | PEvery_ANYONE
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PNobody
    = PNobody_NOBODY | PNobody1 | PNobody_NOONE | PNobody_NONE
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OptAsAlias = OptAsAlias0 | OptAsAlias1 AsAlias
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AsAlias = AsAlias ObjAttr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DeonticLimb
    = DeonticLimb1 DeonticExpr OptLangStrings ActionLimb
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DeonticExpr = DEMust | DEMay | DEShant
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ActionLimb
    = ActionDirObj Exp ObjAttr OptAsAlias | ActionSingle Exp OptAsAlias
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DeadlineLimb = DL0 | DLLimb TempRel TemporalExpr OptAsAlias
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TempRel = TRBefore | TRPrior | TRAfter | TRUntil
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TemporalExpr
    = TemporalExpr1 DateTime DurationExpr
    | TemporalExpr2 ObjAttr DurationExpr
    | TemporalExpr3 LstExp
    | TemporalExpr4 LstExp
    | TemporalExprDuration Duration
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DurationExpr = DurationExpr1 | DurationExpr2 Duration
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Duration
    = TDY Integer
    | TDM Integer
    | TDW Integer
    | TDD Integer
    | TDBD Integer
    | TDDH Integer Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data HenceLimb
    = DNoHence
    | DHence Goto OptLangStrings
    | DHeLe Goto OptLangStrings Goto OptLangStrings
    | DLest Goto OptLangStrings
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Goto
    = RGotoOne RuleDef
    | RGotoOneArgs RuleDef Args
    | RGotoLst LstExp
    | RFulfilled
    | RBreach
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PerformWord
    = PerHereby | PerAgree | PerRep | PerWar | PerRepWar
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data UponLimb = UponLimb1 | UponLimb2 UponRefinement GivenExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data UponRefinement = Upon0 | Upon2 UponKleisli UponTime
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data UponKleisli = UponEach | UponAny
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data UponTime = UponPast | UponFuture | UponCurrent | UponEver
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data GivenLimb = GivenLimb0 | GivenLimb1 GivenExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data GivenExpr = GivenExpr1 [Exp] | GivenExpr2 [Exp] HavingLimb
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data HavingLimb = HavingLimb1 [HavingBoolExp]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data HavingBoolExp = HavingBoolExpExp Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data WhenLimb = NoWhen | WhenMatch Exp | WhenUnless Exp Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data WithLimb = WithLimb1 | WithLimb2 WithHas [WithIn]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data WithHas = WithHas_WITH | WithHas_HAS | WithHas_TYPE
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data WithIn = WithInExp Exp | WithInTraceExpr TraceExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Asof = Asof DateTime | AsofNull
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DateTime
    = DateTimeIso8601 Iso
    | DateTime_PRESENT
    | DateTime_NOW
    | DateTime_ENTRY
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Iso
    = Iso8601YYYYMMDD YYYYMMDD | Iso8601YYYYMMDDTHHMM YYYYMMDDTHHMM
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MetaLimb = Meta0 | MetaNOTW RuleDef | MetaSubj RuleDef
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data WhereLimb = WhereLimb0 | WhereLimb1 [WhereExp]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data WhereExp = WhereExp1 GivenLimb Exp WithLimb WhenLimb WhereLimb
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MatchVars
    = MatchVars1 Rule
    | MatchVars2 [ConstraintSemi]
    | MatchVars3 [ConstraintComma]
    | MatchVars4 ObjMethod
    | MatchVars5 ObjAttr
    | MatchVars6 ObjAttrElem
    | MatchVars7 [UnifyElem]
    | MatchVars8 Exp
    | MatchVars9 LstExp
    | MatchVars10 Exp
    | MatchVars11 WhenLimb
    | MatchVars12 WhereLimb
    | MatchVars13 DeonticLimb
    | MatchVars14 DefineLimb
    | MatchVars15 BraceList
    | MatchVars16 HenceLimb
    | MatchVars17 MatchQualifier
    | MatchVars18 MatchQuantifier
    | MatchVars19 MatchFlag
    | MatchVars20 RuleBody
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Module = ModuleDecl ObjAttr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Tops = Toplevel [Toplevels]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Toplevels
    = ToplevelsModule Module
    | ToplevelsImport Import
    | ToplevelsPragma Pragma
    | ToplevelsRule Rule
    | ToplevelsScenario Scenario
    | ToplevelsGroup Group
    | ToplevelsSection Section
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Import = Import ObjAttr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Group = Group1 RuleDef RuleName [Toplevels]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Section = Section1 RuleDef RuleName WithLimb WhereLimb
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Pragma = Pragma1 [Exp]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Scenario = RScenario ObjAttr WithLimb TraceExpr Asof WhereLimb
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TraceExpr = TraceExpr1 [LogEvent]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LogEvent
    = LogEventDirObj Iso ObjAttr Exp Exp
    | LogEventAny Iso ObjAttr ObjMethod
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = ConstE ConstVal
    | ListE LstExp
    | BracesE BraceList
    | TempE DateTime
    | RangeE Exp Exp
    | ObjME ObjMethod
    | CurrE CurrencyPrefix Exp
    | PowE Exp PowOp Exp
    | MulE Exp MulOp Exp
    | AddE Exp AddOp Exp
    | Set_Union Exp UNION Exp
    | Set_Subset Exp SUBSET Exp
    | Set_Intersect Exp INTERSECT Exp
    | CompE Exp CompOp Exp
    | RelE Exp RelOp Exp
    | UBool_Not NOT Exp
    | LikelyE Likelihood Exp
    | BBool_And Exp AND Exp
    | BBool_Or Exp OR Exp
    | QualExp MatchQuantifier Exp OptAsAlias MatchQualifier [MatchFlag]
    | CaseE ObjAttr [CaseExp]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ExpStm = ExpStm1 Exp | ExpStmLet Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LstExp
    = ListComp1 Exp ObjAttr Exp
    | ListComp2 Exp ObjAttr Exp Exp
    | ListComp3 ObjAttr Exp Exp
    | ListComp4 ObjAttr Exp
    | ListComma [Exp]
    | ListAnd [Exp] Exp
    | ListOr [Exp] Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ConstVal
    = BoolV_T TrueBool
    | BoolV_F FalseBool
    | BoolV_N NothingBl
    | IntV Integer
    | FloatV Double
    | StringV String
    | FloatPercent Double
    | IntPercent Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PowOp = BArith_Pow
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MulOp = BArith_Mul | BArith_Div | BL_Modulo1
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AddOp = BArith_Plus | BArith_Sub | L_Join
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CompOp
    = BCmp_LT
    | BCmp_LTE
    | BCmp_GT
    | BCmp_GTE
    | BCmp_Eq1
    | BCmp_Eq2
    | BCmp_Eq3
    | BCmp_Neq NEQ
    | BCmp_Match1
    | BCmp_NMatch
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RelOp
    = BL_In
    | BRel_Fat
    | BRel_Is
    | BRel_Isa
    | BRel_Has
    | BRel_Are
    | BRel_Sat1
    | BRel_Sat2
    | BRel_Exist1
    | BRel_Exist2
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data NEQ = NEQ1 | NEQ2
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AND = AND1 | AND2 | AND_AND
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OR = OR1 | OR2 | OR_OR
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data UNION = UNION_U | UNION1 | UNION_UNION
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data SUBSET = SUBSET1 | SUBSET_SUBSET
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data INTERSECT = INTERSECT1 | INTERSECT_INTERSECT
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CurrencyPrefix = CurrCode UIdent | CurrDollar
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Likelihood = UBool_Unlikely | UBool_Likely
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data NOT = NOT_NOT | NOT1 | NOT2
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MatchQuantifier
    = MQuant0
    | MQuantMin ConstVal OptOf
    | MQuantAny
    | MQuantAll
    | MQuantConst ConstVal
    | MQuantMax ConstVal OptOf
    | MQuantNull
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OptOf = OptOfNull | OptOf
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MatchQualifier = MQualEach | MQualTogether | MQualNull
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MatchFlag
    = MFlagLDistinct | MFlagRDistinct | MFlagBDistinct | MFlagNoRepeat
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ObjAttrElem
    = ObjAttrElemIdent Ident | ObjAttrElemUIdent UIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ObjAttr = OA_dots [ObjAttrElem]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ObjMethod
    = OMArgs [UnifyElem] Args OptLangStrings
    | OMNoArgs [UnifyElem] OptLangStrings
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Args = Args1 [ConstraintComma]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data UnifyElem
    = UnifyElemObjAttrElem ObjAttrElem
    | UnifyElemUnifyBracket UnifyBracket
    | UnifyElemUnifyStar UnifyStar
    | UnifyElem1
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data UnifyStar = UnifyStar1
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data UnifyBracket = UnifyBracket1 [CommaElem]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CommaElem = CommaElemObjAttr ObjAttr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BraceList = BraceList1 [ConstraintComma]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ConstraintComma = CComma Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ConstraintSemi = CSemi Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CaseExp = CaseExp1 Exp Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeUnify = TU
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeString = TS
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeBool = TB
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeMath = TM
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeObjMethod = TOM
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeTemporal = TT
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data UIdentList = UIdentList1 [UIdentElem]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data UIdentElem = UIdentElemUIdent UIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LangStrings = ELangStrings [LangString]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LangString = ELangString LangID String
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LangID = LangID1 [LangLabel]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LangLabel = LangLabelIdent Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

